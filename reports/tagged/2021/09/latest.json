{
  "tags": [
    {
      "tag": "spec-runner-tagger:ARGF is an instance of ARGF.class",
      "group": "ARGF",
      "spec": "ARGF",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF is extended by the Enumerable module",
      "group": "ARGF",
      "spec": "ARGF",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.argv returns ARGV for the initial ARGF",
      "group": "ARGF",
      "spec": "ARGF.argv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.argv returns the remaining arguments to treat",
      "group": "ARGF",
      "spec": "ARGF.argv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.binmode returns self",
      "group": "ARGF",
      "spec": "ARGF.binmode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.binmode sets the file's encoding to BINARY",
      "group": "ARGF",
      "spec": "ARGF.binmode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.bytes returns an Enumerator when passed no block",
      "group": "ARGF",
      "spec": "ARGF.bytes",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.bytes returns self when passed a block",
      "group": "ARGF",
      "spec": "ARGF.bytes",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.bytes when no block is given returned Enumerator size should return nil",
      "group": "ARGF",
      "spec": "ARGF.bytes",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.bytes when no block is given returns an Enumerator",
      "group": "ARGF",
      "spec": "ARGF.bytes",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.bytes yields each byte of all streams to the passed block",
      "group": "ARGF",
      "spec": "ARGF.bytes",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.chars returns an Enumerator when passed no block",
      "group": "ARGF",
      "spec": "ARGF.chars",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.chars returns self when passed a block",
      "group": "ARGF",
      "spec": "ARGF.chars",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.chars when no block is given returned Enumerator size should return nil",
      "group": "ARGF",
      "spec": "ARGF.chars",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.chars when no block is given returns an Enumerator",
      "group": "ARGF",
      "spec": "ARGF.chars",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.chars yields each char of all streams to the passed block",
      "group": "ARGF",
      "spec": "ARGF.chars",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.close closes the current open stream",
      "group": "ARGF",
      "spec": "ARGF.close",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.close does not close STDIN",
      "group": "ARGF",
      "spec": "ARGF.close",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.close doesn't raise an IOError if called on a closed stream",
      "group": "ARGF",
      "spec": "ARGF.close",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.close returns self",
      "group": "ARGF",
      "spec": "ARGF.close",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.closed? returns true if the current stream has been closed",
      "group": "ARGF",
      "spec": "ARGF.closed?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.codepoints does not require arguments",
      "group": "ARGF",
      "spec": "ARGF.codepoints",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.codepoints is a public method",
      "group": "ARGF",
      "spec": "ARGF.codepoints",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.codepoints returns an Enumerator when passed no block",
      "group": "ARGF",
      "spec": "ARGF.codepoints",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.codepoints returns self when passed a block",
      "group": "ARGF",
      "spec": "ARGF.codepoints",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.codepoints when no block is given returned Enumerator size should return nil",
      "group": "ARGF",
      "spec": "ARGF.codepoints",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.codepoints when no block is given returns an Enumerator",
      "group": "ARGF",
      "spec": "ARGF.codepoints",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.codepoints yields each codepoint of all streams",
      "group": "ARGF",
      "spec": "ARGF.codepoints",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each is a public method",
      "group": "ARGF",
      "spec": "ARGF.each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each reads each line of files",
      "group": "ARGF",
      "spec": "ARGF.each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each requires multiple arguments",
      "group": "ARGF",
      "spec": "ARGF.each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each returns self when passed a block",
      "group": "ARGF",
      "spec": "ARGF.each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each when no block is given returned Enumerator size should return nil",
      "group": "ARGF",
      "spec": "ARGF.each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each when no block is given returns an Enumerator",
      "group": "ARGF",
      "spec": "ARGF.each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each with a separator yields each separated section of all streams",
      "group": "ARGF",
      "spec": "ARGF.each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_byte returns an Enumerator when passed no block",
      "group": "ARGF",
      "spec": "ARGF.each_byte",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_byte returns self when passed a block",
      "group": "ARGF",
      "spec": "ARGF.each_byte",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_byte when no block is given returned Enumerator size should return nil",
      "group": "ARGF",
      "spec": "ARGF.each_byte",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_byte when no block is given returns an Enumerator",
      "group": "ARGF",
      "spec": "ARGF.each_byte",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_byte yields each byte of all streams to the passed block",
      "group": "ARGF",
      "spec": "ARGF.each_byte",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_char returns an Enumerator when passed no block",
      "group": "ARGF",
      "spec": "ARGF.each_char",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_char returns self when passed a block",
      "group": "ARGF",
      "spec": "ARGF.each_char",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_char when no block is given returned Enumerator size should return nil",
      "group": "ARGF",
      "spec": "ARGF.each_char",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_char when no block is given returns an Enumerator",
      "group": "ARGF",
      "spec": "ARGF.each_char",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_char yields each char of all streams to the passed block",
      "group": "ARGF",
      "spec": "ARGF.each_char",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_codepoint does not require arguments",
      "group": "ARGF",
      "spec": "ARGF.each_codepoint",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_codepoint is a public method",
      "group": "ARGF",
      "spec": "ARGF.each_codepoint",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_codepoint returns an Enumerator when passed no block",
      "group": "ARGF",
      "spec": "ARGF.each_codepoint",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_codepoint returns self when passed a block",
      "group": "ARGF",
      "spec": "ARGF.each_codepoint",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_codepoint when no block is given returned Enumerator size should return nil",
      "group": "ARGF",
      "spec": "ARGF.each_codepoint",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_codepoint when no block is given returns an Enumerator",
      "group": "ARGF",
      "spec": "ARGF.each_codepoint",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_codepoint yields each codepoint of all streams",
      "group": "ARGF",
      "spec": "ARGF.each_codepoint",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_line is a public method",
      "group": "ARGF",
      "spec": "ARGF.each_line",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_line reads each line of files",
      "group": "ARGF",
      "spec": "ARGF.each_line",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_line requires multiple arguments",
      "group": "ARGF",
      "spec": "ARGF.each_line",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_line returns self when passed a block",
      "group": "ARGF",
      "spec": "ARGF.each_line",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_line when no block is given returned Enumerator size should return nil",
      "group": "ARGF",
      "spec": "ARGF.each_line",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_line when no block is given returns an Enumerator",
      "group": "ARGF",
      "spec": "ARGF.each_line",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.each_line with a separator yields each separated section of all streams",
      "group": "ARGF",
      "spec": "ARGF.each_line",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.eof raises IOError when called on a closed stream",
      "group": "ARGF",
      "spec": "ARGF.eof",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.eof returns true when reaching the end of a file",
      "group": "ARGF",
      "spec": "ARGF.eof",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.eof? raises IOError when called on a closed stream",
      "group": "ARGF",
      "spec": "ARGF.eof?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.eof? returns true when reaching the end of a file",
      "group": "ARGF",
      "spec": "ARGF.eof?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.file returns the current file object on each file",
      "group": "ARGF",
      "spec": "ARGF.file",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.filename returns the current file name on each file",
      "group": "ARGF",
      "spec": "ARGF.filename",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.filename sets the $FILENAME global variable with the current file name on each file",
      "group": "ARGF",
      "spec": "ARGF.filename",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.fileno raises an ArgumentError when called on a closed stream",
      "group": "ARGF",
      "spec": "ARGF.fileno",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.fileno returns the current file number on each file",
      "group": "ARGF",
      "spec": "ARGF.fileno",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.getc reads each char of files",
      "group": "ARGF",
      "spec": "ARGF.getc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.getc reads each char of files",
      "group": "ARGF",
      "spec": "ARGF.getc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.getc returns nil when end of stream reached",
      "group": "ARGF",
      "spec": "ARGF.getc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.gets modifies and backups two files when in place edit mode is on",
      "group": "ARGF",
      "spec": "ARGF.gets",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.gets modifies the files when in place edit mode is on",
      "group": "ARGF",
      "spec": "ARGF.gets",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.gets reads all lines of a file",
      "group": "ARGF",
      "spec": "ARGF.gets",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.gets reads all lines of stdin",
      "group": "ARGF",
      "spec": "ARGF.gets",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.gets reads all lines of two files",
      "group": "ARGF",
      "spec": "ARGF.gets",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.gets reads one line of a file",
      "group": "ARGF",
      "spec": "ARGF.gets",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.gets reads the contents of the file with default encoding",
      "group": "ARGF",
      "spec": "ARGF.gets",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.gets returns nil when reaching end of files",
      "group": "ARGF",
      "spec": "ARGF.gets",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.gets sets $_ global variable with each line read",
      "group": "ARGF",
      "spec": "ARGF.gets",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.lineno aliases to $.",
      "group": "ARGF",
      "spec": "ARGF.lineno",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.lineno returns the current line number on each file",
      "group": "ARGF",
      "spec": "ARGF.lineno",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.lines is a public method",
      "group": "ARGF",
      "spec": "ARGF.lines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.lines reads each line of files",
      "group": "ARGF",
      "spec": "ARGF.lines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.lines requires multiple arguments",
      "group": "ARGF",
      "spec": "ARGF.lines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.lines returns self when passed a block",
      "group": "ARGF",
      "spec": "ARGF.lines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.lines when no block is given returned Enumerator size should return nil",
      "group": "ARGF",
      "spec": "ARGF.lines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.lines when no block is given returns an Enumerator",
      "group": "ARGF",
      "spec": "ARGF.lines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.lines with a separator yields each separated section of all streams",
      "group": "ARGF",
      "spec": "ARGF.lines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.path returns the current file name on each file",
      "group": "ARGF",
      "spec": "ARGF.path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.path sets the $FILENAME global variable with the current file name on each file",
      "group": "ARGF",
      "spec": "ARGF.path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.pos gives the correct position for each read operation",
      "group": "ARGF",
      "spec": "ARGF.pos",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.pos raises an ArgumentError when called on a closed stream",
      "group": "ARGF",
      "spec": "ARGF.pos",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.pos= sets the correct position in files",
      "group": "ARGF",
      "spec": "ARGF.pos=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read clears output buffer before appending to it",
      "group": "ARGF",
      "spec": "ARGF.read",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read reads a number of bytes from stdin",
      "group": "ARGF",
      "spec": "ARGF.read",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read reads a number of bytes from the first file",
      "group": "ARGF",
      "spec": "ARGF.read",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read reads across two files consecutively",
      "group": "ARGF",
      "spec": "ARGF.read",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read reads from a single file consecutively",
      "group": "ARGF",
      "spec": "ARGF.read",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read reads the contents of a file",
      "group": "ARGF",
      "spec": "ARGF.read",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read reads the contents of a special device file",
      "group": "ARGF",
      "spec": "ARGF.read",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read reads the contents of one file and some characters from the second",
      "group": "ARGF",
      "spec": "ARGF.read",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read reads the contents of one file and stdin",
      "group": "ARGF",
      "spec": "ARGF.read",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read reads the contents of stdin",
      "group": "ARGF",
      "spec": "ARGF.read",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read reads the contents of the file with default encoding",
      "group": "ARGF",
      "spec": "ARGF.read",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read reads the contents of the same file twice",
      "group": "ARGF",
      "spec": "ARGF.read",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read reads the contents of two files",
      "group": "ARGF",
      "spec": "ARGF.read",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read treats first nil argument as no length limit",
      "group": "ARGF",
      "spec": "ARGF.read",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read treats second argument as an output buffer",
      "group": "ARGF",
      "spec": "ARGF.read",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read treats second nil argument as no output buffer",
      "group": "ARGF",
      "spec": "ARGF.read",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read_nonblock clears output buffer before appending to it",
      "group": "ARGF",
      "spec": "ARGF.read_nonblock",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read_nonblock reads a number of bytes from stdin",
      "group": "ARGF",
      "spec": "ARGF.read_nonblock",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read_nonblock reads a number of bytes from the first file",
      "group": "ARGF",
      "spec": "ARGF.read_nonblock",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read_nonblock reads from a single file consecutively",
      "group": "ARGF",
      "spec": "ARGF.read_nonblock",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read_nonblock reads the contents of a special device file",
      "group": "ARGF",
      "spec": "ARGF.read_nonblock",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read_nonblock reads up to the given amount of bytes",
      "group": "ARGF",
      "spec": "ARGF.read_nonblock",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read_nonblock reads up to the given bytes from STDIN",
      "group": "ARGF",
      "spec": "ARGF.read_nonblock",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read_nonblock reads up to the given bytes from a file when a file and STDIN are present",
      "group": "ARGF",
      "spec": "ARGF.read_nonblock",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read_nonblock treats second argument as an output buffer",
      "group": "ARGF",
      "spec": "ARGF.read_nonblock",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read_nonblock treats second nil argument as no output buffer",
      "group": "ARGF",
      "spec": "ARGF.read_nonblock",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read_nonblock when using multiple files reads up to the given amount of bytes from the first file",
      "group": "ARGF",
      "spec": "ARGF.read_nonblock",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read_nonblock when using multiple files returns an empty String when reading after having read the first file in its entirety",
      "group": "ARGF",
      "spec": "ARGF.read_nonblock",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read_nonblock with STDIN raises IO::EAGAINWaitReadable when empty",
      "group": "ARGF",
      "spec": "ARGF.read_nonblock",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.read_nonblock with STDIN returns :wait_readable when the :exception is set to false",
      "group": "ARGF",
      "spec": "ARGF.read_nonblock",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readchar raises EOFError when end of stream reached",
      "group": "ARGF",
      "spec": "ARGF.readchar",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readline modifies and backups two files when in place edit mode is on",
      "group": "ARGF",
      "spec": "ARGF.readline",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readline modifies the files when in place edit mode is on",
      "group": "ARGF",
      "spec": "ARGF.readline",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readline raises an EOFError when reaching end of files",
      "group": "ARGF",
      "spec": "ARGF.readline",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readline reads all lines of a file",
      "group": "ARGF",
      "spec": "ARGF.readline",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readline reads all lines of stdin",
      "group": "ARGF",
      "spec": "ARGF.readline",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readline reads all lines of two files",
      "group": "ARGF",
      "spec": "ARGF.readline",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readline reads one line of a file",
      "group": "ARGF",
      "spec": "ARGF.readline",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readline sets $_ global variable with each line read",
      "group": "ARGF",
      "spec": "ARGF.readline",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readlines reads all lines of all files",
      "group": "ARGF",
      "spec": "ARGF.readlines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readlines returns an empty Array when end of stream reached",
      "group": "ARGF",
      "spec": "ARGF.readlines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readpartial clears output buffer before appending to it",
      "group": "ARGF",
      "spec": "ARGF.readpartial",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readpartial clears output buffer even if EOFError is raised because @argf is at end",
      "group": "ARGF",
      "spec": "ARGF.readpartial",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readpartial raises an ArgumentError if called without a maximum read length",
      "group": "ARGF",
      "spec": "ARGF.readpartial",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readpartial raises an EOFError if the exception was raised while reading STDIN",
      "group": "ARGF",
      "spec": "ARGF.readpartial",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readpartial raises an EOFError if the exception was raised while reading the last file",
      "group": "ARGF",
      "spec": "ARGF.readpartial",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readpartial reads a number of bytes from stdin",
      "group": "ARGF",
      "spec": "ARGF.readpartial",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readpartial reads a number of bytes from the first file",
      "group": "ARGF",
      "spec": "ARGF.readpartial",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readpartial reads from a single file consecutively",
      "group": "ARGF",
      "spec": "ARGF.readpartial",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readpartial reads maximum number of bytes from one file at a time",
      "group": "ARGF",
      "spec": "ARGF.readpartial",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readpartial reads maximum number of bytes from one file at a time",
      "group": "ARGF",
      "spec": "ARGF.readpartial",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readpartial reads the contents of a special device file",
      "group": "ARGF",
      "spec": "ARGF.readpartial",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readpartial returns an empty string if EOFError is raised while reading any but the last file",
      "group": "ARGF",
      "spec": "ARGF.readpartial",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readpartial treats second argument as an output buffer",
      "group": "ARGF",
      "spec": "ARGF.readpartial",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.readpartial treats second nil argument as no output buffer",
      "group": "ARGF",
      "spec": "ARGF.readpartial",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.rewind goes back to beginning of current file",
      "group": "ARGF",
      "spec": "ARGF.rewind",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.rewind raises an ArgumentError when end of stream reached",
      "group": "ARGF",
      "spec": "ARGF.rewind",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.rewind resets ARGF.lineno to 0",
      "group": "ARGF",
      "spec": "ARGF.rewind",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.seek sets the absolute position relative to beginning of file",
      "group": "ARGF",
      "spec": "ARGF.seek",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.seek sets the absolute position relative to end of file",
      "group": "ARGF",
      "spec": "ARGF.seek",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.seek sets the position relative to current position in file",
      "group": "ARGF",
      "spec": "ARGF.seek",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.seek takes at least one argument (offset)",
      "group": "ARGF",
      "spec": "ARGF.seek",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.set_encoding sets the external encoding when passed an encoding instance",
      "group": "ARGF",
      "spec": "ARGF.set_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.set_encoding sets the external encoding when passed an encoding name",
      "group": "ARGF",
      "spec": "ARGF.set_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.set_encoding sets the external, internal encoding when passed 'ext:int' String",
      "group": "ARGF",
      "spec": "ARGF.set_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.set_encoding sets the external, internal encoding when passed two encoding instances",
      "group": "ARGF",
      "spec": "ARGF.set_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.skip has no effect at end of stream",
      "group": "ARGF",
      "spec": "ARGF.skip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.skip has no effect when called twice in a row",
      "group": "ARGF",
      "spec": "ARGF.skip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.skip has no effect when nothing has been processed yet",
      "group": "ARGF",
      "spec": "ARGF.skip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.skip skips the current file",
      "group": "ARGF",
      "spec": "ARGF.skip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.tell gives the correct position for each read operation",
      "group": "ARGF",
      "spec": "ARGF.tell",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.tell raises an ArgumentError when called on a closed stream",
      "group": "ARGF",
      "spec": "ARGF.tell",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.to_a reads all lines of all files",
      "group": "ARGF",
      "spec": "ARGF.to_a",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.to_a returns an empty Array when end of stream reached",
      "group": "ARGF",
      "spec": "ARGF.to_a",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.to_i raises an ArgumentError when called on a closed stream",
      "group": "ARGF",
      "spec": "ARGF.to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.to_i returns the current file number on each file",
      "group": "ARGF",
      "spec": "ARGF.to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.to_io returns the IO of the current file",
      "group": "ARGF",
      "spec": "ARGF.to_io",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ARGF.to_s returns 'ARGF'",
      "group": "ARGF",
      "spec": "ARGF.to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Abbrev.abbrev returns a hash of all unambiguous abbreviations of the array of strings passed in",
      "group": "Abbrev",
      "spec": "Abbrev.abbrev",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Abbrev.abbrev returns an empty hash when called on an empty array",
      "group": "Abbrev",
      "spec": "Abbrev.abbrev",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ArgumentError gives its own class name as message if it has no message",
      "group": "ArgumentError",
      "spec": "ArgumentError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ArgumentError is a subclass of StandardError",
      "group": "ArgumentError",
      "spec": "ArgumentError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array includes Enumerable",
      "group": "Array",
      "spec": "Array",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#* converts the passed argument to a String rather than an Integer",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#* raises a TypeError if the argument can neither be converted to a string nor an integer",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#* raises a TypeError is the passed argument is nil",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#* raises an ArgumentError when passed 2 or more arguments",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#* raises an ArgumentError when passed no arguments",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#* tires to convert the passed argument to an Integer using #to_int",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#* tries to convert the passed argument to a String using #to_str",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#* with a string returns a string formed by concatenating each element.to_str separated by separator",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#* with a string uses the same separator with nested arrays",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#* with a string with a tainted separator does not taint the result if the array has only one element",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#* with a string with a tainted separator does not taint the result if the array is empty",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#* with a string with a tainted separator taints the result if the array has two or more elements",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#* with a string with an untrusted separator does not untrust the result if the array has only one element",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#* with a string with an untrusted separator does not untrust the result if the array is empty",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#* with a string with an untrusted separator untrusts the result if the array has two or more elements",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#* with an integer concatenates n copies of the array when passed an integer",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#* with an integer copies the taint status of the original array even if the array is empty",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#* with an integer copies the taint status of the original array even if the passed count is 0",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#* with an integer copies the taint status of the original array if the passed count is not 0",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#* with an integer copies the untrusted status of the original array even if the array is empty",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#* with an integer copies the untrusted status of the original array even if the passed count is 0",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#* with an integer copies the untrusted status of the original array if the passed count is not 0",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#* with an integer does not return self even if the passed integer is 1",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#* with an integer properly handles recursive arrays",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#* with an integer raises an ArgumentError when passed a negative integer",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#* with an integer with a subclass of Array does not call #initialize on the subclass instance",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#* with an integer with a subclass of Array returns a subclass instance",
      "group": "Array",
      "spec": "Array#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#+ can concatenate an array with itself",
      "group": "Array",
      "spec": "Array#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#+ concatenates two arrays",
      "group": "Array",
      "spec": "Array#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#+ does not call to_ary on array subclasses",
      "group": "Array",
      "spec": "Array#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#+ does not get infected even if an original array is tainted",
      "group": "Array",
      "spec": "Array#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#+ does not infected even if an original array is untrusted",
      "group": "Array",
      "spec": "Array#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#+ does return subclass instances with Array subclasses",
      "group": "Array",
      "spec": "Array#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#+ properly handles recursive arrays",
      "group": "Array",
      "spec": "Array#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#+ tries to convert the passed argument to an Array using #to_ary",
      "group": "Array",
      "spec": "Array#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#<< correctly resizes the Array",
      "group": "Array",
      "spec": "Array#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#<< pushes the object onto the end of the array",
      "group": "Array",
      "spec": "Array#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#<< raises a FrozenError on a frozen array",
      "group": "Array",
      "spec": "Array#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#<< returns self to allow chaining",
      "group": "Array",
      "spec": "Array#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#abbrev returns a hash of all unambiguous abbreviations of the array of strings passed in",
      "group": "Array",
      "spec": "Array#abbrev",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#abbrev returns an empty hash when called on an empty array",
      "group": "Array",
      "spec": "Array#abbrev",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#any? with a block given is false if the array is empty",
      "group": "Array",
      "spec": "Array#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#any? with a block given is false if the block returns false for all members of the array",
      "group": "Array",
      "spec": "Array#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#any? with a block given is true if the block returns true for any member of the array",
      "group": "Array",
      "spec": "Array#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#any? with no block given (a default block of { |x| x } is implicit) is false if the array is empty",
      "group": "Array",
      "spec": "Array#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#any? with no block given (a default block of { |x| x } is implicit) is false if the array is not empty, but all the members of the array are falsy",
      "group": "Array",
      "spec": "Array#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#any? with no block given (a default block of { |x| x } is implicit) is true if the array has any truthy members",
      "group": "Array",
      "spec": "Array#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#append appends the arguments to the array",
      "group": "Array",
      "spec": "Array#append",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#append isn't confused by previous shift",
      "group": "Array",
      "spec": "Array#append",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#append properly handles recursive arrays",
      "group": "Array",
      "spec": "Array#append",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#append raises a FrozenError on a frozen array",
      "group": "Array",
      "spec": "Array#append",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#assoc calls == on first element of each array",
      "group": "Array",
      "spec": "Array#assoc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#assoc ignores any non-Array elements",
      "group": "Array",
      "spec": "Array#assoc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#assoc returns the first array whose 1st item is == obj or nil",
      "group": "Array",
      "spec": "Array#assoc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#at does not extend the array unless the given index is out of range",
      "group": "Array",
      "spec": "Array#at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#at raises a TypeError when the passed argument can't be coerced to Integer",
      "group": "Array",
      "spec": "Array#at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#at raises an ArgumentError when 2 or more arguments are passed",
      "group": "Array",
      "spec": "Array#at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#at returns nil if the given index is greater than or equal to the array's length",
      "group": "Array",
      "spec": "Array#at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#at returns nil if the given index is less than -len, where len is length of the array",
      "group": "Array",
      "spec": "Array#at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#at returns the (-n)'th element from the last, for the given negative index n",
      "group": "Array",
      "spec": "Array#at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#at returns the (n+1)'th element for the passed index n",
      "group": "Array",
      "spec": "Array#at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#at tries to convert the passed argument to an Integer using #to_int",
      "group": "Array",
      "spec": "Array#at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#clear does not accept any arguments",
      "group": "Array",
      "spec": "Array#clear",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#clear keeps tainted status",
      "group": "Array",
      "spec": "Array#clear",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#clear keeps untrusted status",
      "group": "Array",
      "spec": "Array#clear",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#clear leaves the Array empty",
      "group": "Array",
      "spec": "Array#clear",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#clear raises a FrozenError on a frozen array",
      "group": "Array",
      "spec": "Array#clear",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#clear removes all elements",
      "group": "Array",
      "spec": "Array#clear",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#clear returns self",
      "group": "Array",
      "spec": "Array#clear",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#collect does not change self",
      "group": "Array",
      "spec": "Array#collect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#collect does not copy tainted status",
      "group": "Array",
      "spec": "Array#collect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#collect does not copy untrusted status",
      "group": "Array",
      "spec": "Array#collect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#collect does not return subclass instance",
      "group": "Array",
      "spec": "Array#collect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#collect raises an ArgumentError when no block and with arguments",
      "group": "Array",
      "spec": "Array#collect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#collect returns a copy of array with each element replaced by the value returned by block",
      "group": "Array",
      "spec": "Array#collect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#collect returns an Enumerator when no block given",
      "group": "Array",
      "spec": "Array#collect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#collect returns the evaluated value of block if it broke in the block",
      "group": "Array",
      "spec": "Array#collect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#collect when no block is given returned Enumerator size returns the enumerable size",
      "group": "Array",
      "spec": "Array#collect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#collect! keeps tainted status",
      "group": "Array",
      "spec": "Array#collect!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#collect! keeps untrusted status",
      "group": "Array",
      "spec": "Array#collect!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#collect! replaces each element with the value returned by block",
      "group": "Array",
      "spec": "Array#collect!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#collect! returns an Enumerator when no block given, and the enumerator can modify the original array",
      "group": "Array",
      "spec": "Array#collect!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#collect! returns self",
      "group": "Array",
      "spec": "Array#collect!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#collect! returns the evaluated value of block but its contents is partially modified, if it broke in the block",
      "group": "Array",
      "spec": "Array#collect!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#collect! when frozen raises a FrozenError",
      "group": "Array",
      "spec": "Array#collect!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#collect! when frozen raises a FrozenError when calling #each on the returned Enumerator",
      "group": "Array",
      "spec": "Array#collect!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#collect! when frozen raises a FrozenError when calling #each on the returned Enumerator when empty",
      "group": "Array",
      "spec": "Array#collect!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#collect! when frozen raises a FrozenError when empty",
      "group": "Array",
      "spec": "Array#collect!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#collect! when no block is given returned Enumerator size returns the enumerable size",
      "group": "Array",
      "spec": "Array#collect!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#combination generates from a defensive copy, ignoring mutations",
      "group": "Array",
      "spec": "Array#combination",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#combination returns an enumerator when no block is provided",
      "group": "Array",
      "spec": "Array#combination",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#combination returns self when a block is given",
      "group": "Array",
      "spec": "Array#combination",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#combination when no block is given returned Enumerator size returns 0 when the number of combinations is < 0",
      "group": "Array",
      "spec": "Array#combination",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#combination when no block is given returned Enumerator size returns the binomial coefficient between the array size the number of combinations",
      "group": "Array",
      "spec": "Array#combination",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#combination yields [] when length is 0",
      "group": "Array",
      "spec": "Array#combination",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#combination yields a copy of self if the argument is the size of the receiver",
      "group": "Array",
      "spec": "Array#combination",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#combination yields a partition consisting of only singletons",
      "group": "Array",
      "spec": "Array#combination",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#combination yields nothing for out of bounds length and return self",
      "group": "Array",
      "spec": "Array#combination",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#combination yields nothing if the argument is out of bounds",
      "group": "Array",
      "spec": "Array#combination",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#combination yields the expected combinations",
      "group": "Array",
      "spec": "Array#combination",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#compact does not keep tainted status even if all elements are removed",
      "group": "Array",
      "spec": "Array#compact",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#compact does not keep untrusted status even if all elements are removed",
      "group": "Array",
      "spec": "Array#compact",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#compact does not return self",
      "group": "Array",
      "spec": "Array#compact",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#compact does not return subclass instance for Array subclasses",
      "group": "Array",
      "spec": "Array#compact",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#compact returns a copy of array with all nil elements removed",
      "group": "Array",
      "spec": "Array#compact",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#compact! keeps tainted status even if all elements are removed",
      "group": "Array",
      "spec": "Array#compact!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#compact! keeps untrusted status even if all elements are removed",
      "group": "Array",
      "spec": "Array#compact!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#compact! raises a FrozenError on a frozen array",
      "group": "Array",
      "spec": "Array#compact!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#compact! removes all nil elements",
      "group": "Array",
      "spec": "Array#compact!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#compact! returns nil if there are no nil elements to remove",
      "group": "Array",
      "spec": "Array#compact!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#compact! returns self if some nil elements are removed",
      "group": "Array",
      "spec": "Array#compact!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#concat appends elements to an Array with enough capacity that has been shifted",
      "group": "Array",
      "spec": "Array#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#concat appends elements to an Array without enough capacity that has been shifted",
      "group": "Array",
      "spec": "Array#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#concat appends the elements in the other array",
      "group": "Array",
      "spec": "Array#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#concat concatenates the initial value when given arguments contain 2 self",
      "group": "Array",
      "spec": "Array#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#concat does not call #to_ary on Array subclasses",
      "group": "Array",
      "spec": "Array#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#concat does not loop endlessly when argument is self",
      "group": "Array",
      "spec": "Array#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#concat is not infected by the other",
      "group": "Array",
      "spec": "Array#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#concat is not infected untrustedness by the other",
      "group": "Array",
      "spec": "Array#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#concat keeps tainted status",
      "group": "Array",
      "spec": "Array#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#concat keeps the tainted status of elements",
      "group": "Array",
      "spec": "Array#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#concat keeps the untrusted status of elements",
      "group": "Array",
      "spec": "Array#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#concat keeps untrusted status",
      "group": "Array",
      "spec": "Array#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#concat raises a FrozenError when Array is frozen and modification occurs",
      "group": "Array",
      "spec": "Array#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#concat raises a FrozenError when Array is frozen and no modification occurs",
      "group": "Array",
      "spec": "Array#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#concat returns self when given no arguments",
      "group": "Array",
      "spec": "Array#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#concat returns the array itself",
      "group": "Array",
      "spec": "Array#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#concat takes multiple arguments",
      "group": "Array",
      "spec": "Array#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#concat tries to convert the passed argument to an Array using #to_ary",
      "group": "Array",
      "spec": "Array#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#count returns the number of element for which the block evaluates to true",
      "group": "Array",
      "spec": "Array#count",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#count returns the number of elements",
      "group": "Array",
      "spec": "Array#count",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#count returns the number of elements that equal the argument",
      "group": "Array",
      "spec": "Array#count",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#cycle calls #to_int to convert count to an Integer",
      "group": "Array",
      "spec": "Array#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#cycle does not rescue StopIteration when not passed a count",
      "group": "Array",
      "spec": "Array#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#cycle does not rescue StopIteration when passed a count",
      "group": "Array",
      "spec": "Array#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#cycle does not yield and returns nil when passed 0",
      "group": "Array",
      "spec": "Array#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#cycle does not yield and returns nil when the array is empty and passed value is an integer",
      "group": "Array",
      "spec": "Array#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#cycle does not yield and returns nil when the array is empty and passed value is nil",
      "group": "Array",
      "spec": "Array#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#cycle iterates indefinitely when not passed a count",
      "group": "Array",
      "spec": "Array#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#cycle iterates indefinitely when passed nil",
      "group": "Array",
      "spec": "Array#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#cycle iterates the array 'count' times yielding each item to the block",
      "group": "Array",
      "spec": "Array#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#cycle iterates the array Integer(count) times when passed a Float count",
      "group": "Array",
      "spec": "Array#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#cycle raises a TypeError if #to_int does not return an Integer",
      "group": "Array",
      "spec": "Array#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#cycle raises a TypeError if passed a String",
      "group": "Array",
      "spec": "Array#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#cycle raises a TypeError if passed an Object",
      "group": "Array",
      "spec": "Array#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#cycle raises a TypeError if passed false",
      "group": "Array",
      "spec": "Array#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#cycle raises a TypeError if passed true",
      "group": "Array",
      "spec": "Array#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#cycle when no block is given returned Enumerator size should be Float::INFINITY when no argument is passed",
      "group": "Array",
      "spec": "Array#cycle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#cycle when no block is given returned Enumerator size should be the result of multiplying the enumerable size by the argument passed",
      "group": "Array",
      "spec": "Array#cycle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#cycle when no block is given returned Enumerator size should be zero when the argument passed is 0 or less",
      "group": "Array",
      "spec": "Array#cycle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#delete calculates equality correctly for reference values",
      "group": "Array",
      "spec": "Array#delete",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete keeps tainted status",
      "group": "Array",
      "spec": "Array#delete",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#delete keeps untrusted status",
      "group": "Array",
      "spec": "Array#delete",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#delete may be given a block that is executed if no element matches object",
      "group": "Array",
      "spec": "Array#delete",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete raises a FrozenError on a frozen array",
      "group": "Array",
      "spec": "Array#delete",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete removes elements that are #== to object",
      "group": "Array",
      "spec": "Array#delete",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete returns nil if the array is empty due to a shift",
      "group": "Array",
      "spec": "Array#delete",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete returns nil on a frozen array if a modification does not take place",
      "group": "Array",
      "spec": "Array#delete",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete returns object or nil if no elements match object",
      "group": "Array",
      "spec": "Array#delete",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete_at accepts negative indices",
      "group": "Array",
      "spec": "Array#delete_at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete_at keeps tainted status",
      "group": "Array",
      "spec": "Array#delete_at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#delete_at keeps untrusted status",
      "group": "Array",
      "spec": "Array#delete_at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#delete_at raises a FrozenError on a frozen array",
      "group": "Array",
      "spec": "Array#delete_at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete_at removes the element at the specified index",
      "group": "Array",
      "spec": "Array#delete_at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete_at returns nil and makes no modification if the index is out of range",
      "group": "Array",
      "spec": "Array#delete_at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete_at returns the removed element at the specified index",
      "group": "Array",
      "spec": "Array#delete_at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete_at tries to convert the passed argument to an Integer using #to_int",
      "group": "Array",
      "spec": "Array#delete_at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete_if keeps tainted status",
      "group": "Array",
      "spec": "Array#delete_if",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#delete_if keeps untrusted status",
      "group": "Array",
      "spec": "Array#delete_if",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#delete_if raises a FrozenError on a frozen array",
      "group": "Array",
      "spec": "Array#delete_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete_if raises a FrozenError on an empty frozen array",
      "group": "Array",
      "spec": "Array#delete_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete_if removes each element for which block returns true",
      "group": "Array",
      "spec": "Array#delete_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete_if returns an Enumerator if no block given",
      "group": "Array",
      "spec": "Array#delete_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete_if returns an Enumerator if no block given, and the array is frozen",
      "group": "Array",
      "spec": "Array#delete_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete_if returns an Enumerator if no block given, and the enumerator can modify the original array",
      "group": "Array",
      "spec": "Array#delete_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete_if returns self",
      "group": "Array",
      "spec": "Array#delete_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete_if returns self when called on an Array emptied with #shift",
      "group": "Array",
      "spec": "Array#delete_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete_if updates the receiver after all blocks",
      "group": "Array",
      "spec": "Array#delete_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#delete_if when no block is given returned Enumerator size returns the enumerable size",
      "group": "Array",
      "spec": "Array#delete_if",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#drop acts correctly after a shift",
      "group": "Array",
      "spec": "Array#drop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#drop does not remove any elements when passed zero",
      "group": "Array",
      "spec": "Array#drop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#drop raises an ArgumentError if the number of elements specified is negative",
      "group": "Array",
      "spec": "Array#drop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#drop removes the specified number of elements from the start of the array",
      "group": "Array",
      "spec": "Array#drop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#drop returns an empty Array if all elements are dropped",
      "group": "Array",
      "spec": "Array#drop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#drop returns an empty Array if more elements than exist are dropped",
      "group": "Array",
      "spec": "Array#drop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#drop returns an empty Array when called on an empty Array",
      "group": "Array",
      "spec": "Array#drop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#drop_while removes elements from the start of the array until the block returns false",
      "group": "Array",
      "spec": "Array#drop_while",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#drop_while removes elements from the start of the array until the block returns nil",
      "group": "Array",
      "spec": "Array#drop_while",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#drop_while removes elements from the start of the array while the block evaluates to true",
      "group": "Array",
      "spec": "Array#drop_while",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#each does not yield elements deleted from the end of the array",
      "group": "Array",
      "spec": "Array#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#each returns an Enumerator if no block given",
      "group": "Array",
      "spec": "Array#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#each when no block is given returned Enumerator size returns the enumerable size",
      "group": "Array",
      "spec": "Array#each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#each yields each element to a block that takes multiple arguments",
      "group": "Array",
      "spec": "Array#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#each yields each element to the block",
      "group": "Array",
      "spec": "Array#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#each yields elements added to the end of the array by the block",
      "group": "Array",
      "spec": "Array#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#each_index is not confused by removing elements from the front",
      "group": "Array",
      "spec": "Array#each_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#each_index passes the index of each element to the block",
      "group": "Array",
      "spec": "Array#each_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#each_index returns an Enumerator if no block given",
      "group": "Array",
      "spec": "Array#each_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#each_index returns self",
      "group": "Array",
      "spec": "Array#each_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#each_index when no block is given returned Enumerator size returns the enumerable size",
      "group": "Array",
      "spec": "Array#each_index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#empty? returns true if the array has no elements",
      "group": "Array",
      "spec": "Array#empty?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#first does not return subclass instance when passed count on Array subclasses",
      "group": "Array",
      "spec": "Array#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#first is not destructive",
      "group": "Array",
      "spec": "Array#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#first properly handles recursive arrays",
      "group": "Array",
      "spec": "Array#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#first raises a RangeError when count is a Bignum",
      "group": "Array",
      "spec": "Array#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#first raises a TypeError if the passed argument is not numeric",
      "group": "Array",
      "spec": "Array#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#first raises an ArgumentError when count is negative",
      "group": "Array",
      "spec": "Array#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#first returns an array containing the first element when passed count == 1",
      "group": "Array",
      "spec": "Array#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#first returns an array which is independent to the original when passed count",
      "group": "Array",
      "spec": "Array#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#first returns an empty array when passed count == 0",
      "group": "Array",
      "spec": "Array#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#first returns an empty array when passed count on an empty array",
      "group": "Array",
      "spec": "Array#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#first returns nil if self is empty",
      "group": "Array",
      "spec": "Array#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#first returns the entire array when count > length",
      "group": "Array",
      "spec": "Array#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#first returns the first count elements if given a count",
      "group": "Array",
      "spec": "Array#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#first returns the first element",
      "group": "Array",
      "spec": "Array#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#first tries to convert the passed argument to an Integer using #to_int",
      "group": "Array",
      "spec": "Array#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#frozen? returns false for an array being sorted by #sort",
      "group": "Array",
      "spec": "Array#frozen?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#frozen? returns true if array is frozen",
      "group": "Array",
      "spec": "Array#frozen?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#include? calls == on elements from left to right until success",
      "group": "Array",
      "spec": "Array#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#include? determines presence by using element == obj",
      "group": "Array",
      "spec": "Array#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#include? returns true if object is present, false otherwise",
      "group": "Array",
      "spec": "Array#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#last does not return subclass instance on Array subclasses",
      "group": "Array",
      "spec": "Array#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#last is not destructive",
      "group": "Array",
      "spec": "Array#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#last properly handles recursive arrays",
      "group": "Array",
      "spec": "Array#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#last raises a TypeError if the passed argument is not numeric",
      "group": "Array",
      "spec": "Array#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#last raises an ArgumentError when count is negative",
      "group": "Array",
      "spec": "Array#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#last returns an array containing the last element when passed count == 1",
      "group": "Array",
      "spec": "Array#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#last returns an array which is independent to the original when passed count",
      "group": "Array",
      "spec": "Array#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#last returns an empty array when count == 0",
      "group": "Array",
      "spec": "Array#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#last returns an empty array when passed a count on an empty array",
      "group": "Array",
      "spec": "Array#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#last returns nil if self is empty",
      "group": "Array",
      "spec": "Array#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#last returns the entire array when count > length",
      "group": "Array",
      "spec": "Array#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#last returns the last count elements if given a count",
      "group": "Array",
      "spec": "Array#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#last returns the last element",
      "group": "Array",
      "spec": "Array#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#last tries to convert the passed argument to an Integer using #to_int",
      "group": "Array",
      "spec": "Array#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#length properly handles recursive arrays",
      "group": "Array",
      "spec": "Array#length",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#length returns the number of elements",
      "group": "Array",
      "spec": "Array#length",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#map does not change self",
      "group": "Array",
      "spec": "Array#map",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#map does not copy tainted status",
      "group": "Array",
      "spec": "Array#map",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#map does not copy untrusted status",
      "group": "Array",
      "spec": "Array#map",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#map does not return subclass instance",
      "group": "Array",
      "spec": "Array#map",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#map raises an ArgumentError when no block and with arguments",
      "group": "Array",
      "spec": "Array#map",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#map returns a copy of array with each element replaced by the value returned by block",
      "group": "Array",
      "spec": "Array#map",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#map returns an Enumerator when no block given",
      "group": "Array",
      "spec": "Array#map",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#map returns the evaluated value of block if it broke in the block",
      "group": "Array",
      "spec": "Array#map",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#map when no block is given returned Enumerator size returns the enumerable size",
      "group": "Array",
      "spec": "Array#map",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#map! keeps tainted status",
      "group": "Array",
      "spec": "Array#map!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#map! keeps untrusted status",
      "group": "Array",
      "spec": "Array#map!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#map! replaces each element with the value returned by block",
      "group": "Array",
      "spec": "Array#map!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#map! returns an Enumerator when no block given, and the enumerator can modify the original array",
      "group": "Array",
      "spec": "Array#map!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#map! returns self",
      "group": "Array",
      "spec": "Array#map!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#map! returns the evaluated value of block but its contents is partially modified, if it broke in the block",
      "group": "Array",
      "spec": "Array#map!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#map! when frozen raises a FrozenError",
      "group": "Array",
      "spec": "Array#map!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#map! when frozen raises a FrozenError when calling #each on the returned Enumerator",
      "group": "Array",
      "spec": "Array#map!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#map! when frozen raises a FrozenError when calling #each on the returned Enumerator when empty",
      "group": "Array",
      "spec": "Array#map!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#map! when frozen raises a FrozenError when empty",
      "group": "Array",
      "spec": "Array#map!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#map! when no block is given returned Enumerator size returns the enumerable size",
      "group": "Array",
      "spec": "Array#map!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#prepend prepends object to the original array",
      "group": "Array",
      "spec": "Array#prepend",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#prepend properly handles recursive arrays",
      "group": "Array",
      "spec": "Array#prepend",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#prepend quietly ignores unshifting nothing",
      "group": "Array",
      "spec": "Array#prepend",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#prepend raises a FrozenError on a frozen array when the array is modified",
      "group": "Array",
      "spec": "Array#prepend",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#prepend raises a FrozenError on a frozen array when the array would not be modified",
      "group": "Array",
      "spec": "Array#prepend",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#push appends the arguments to the array",
      "group": "Array",
      "spec": "Array#push",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#push isn't confused by previous shift",
      "group": "Array",
      "spec": "Array#push",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#push properly handles recursive arrays",
      "group": "Array",
      "spec": "Array#push",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#push raises a FrozenError on a frozen array",
      "group": "Array",
      "spec": "Array#push",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#rassoc calls elem == obj on the second element of each contained array",
      "group": "Array",
      "spec": "Array#rassoc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#rassoc does not check the last element in each contained but specifically the second",
      "group": "Array",
      "spec": "Array#rassoc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#rassoc properly handles recursive arrays",
      "group": "Array",
      "spec": "Array#rassoc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#rassoc returns the first contained array whose second element is == object",
      "group": "Array",
      "spec": "Array#rassoc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#replace does not call #to_ary on Array subclasses",
      "group": "Array",
      "spec": "Array#replace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#replace does not make self dependent to the original array",
      "group": "Array",
      "spec": "Array#replace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#replace properly handles recursive arrays",
      "group": "Array",
      "spec": "Array#replace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#replace raises a FrozenError on a frozen array",
      "group": "Array",
      "spec": "Array#replace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#replace replaces the elements with elements from other array",
      "group": "Array",
      "spec": "Array#replace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#replace returns self",
      "group": "Array",
      "spec": "Array#replace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#replace tries to convert the passed argument to an Array using #to_ary",
      "group": "Array",
      "spec": "Array#replace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#reverse does not return subclass instance on Array subclasses",
      "group": "Array",
      "spec": "Array#reverse",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#reverse properly handles recursive arrays",
      "group": "Array",
      "spec": "Array#reverse",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#reverse returns a new array with the elements in reverse order",
      "group": "Array",
      "spec": "Array#reverse",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#reverse! properly handles recursive arrays",
      "group": "Array",
      "spec": "Array#reverse!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#reverse! raises a FrozenError on a frozen array",
      "group": "Array",
      "spec": "Array#reverse!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#reverse! reverses the elements in place",
      "group": "Array",
      "spec": "Array#reverse!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#reverse_each returns an Enumerator if no block given",
      "group": "Array",
      "spec": "Array#reverse_each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#reverse_each returns self",
      "group": "Array",
      "spec": "Array#reverse_each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#reverse_each returns the correct size when no block is given",
      "group": "Array",
      "spec": "Array#reverse_each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#reverse_each traverses array in reverse order and pass each element to block",
      "group": "Array",
      "spec": "Array#reverse_each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#reverse_each when no block is given returned Enumerator size returns the enumerable size",
      "group": "Array",
      "spec": "Array#reverse_each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#reverse_each yields only the top level element of a recursive array",
      "group": "Array",
      "spec": "Array#reverse_each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#reverse_each yields only the top level element of an empty recursive arrays",
      "group": "Array",
      "spec": "Array#reverse_each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#shift passed a number n as an argument does not corrupt the array when shift without arguments is followed by shift with an argument",
      "group": "Array",
      "spec": "Array#shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#shift passed a number n as an argument does not return self even when it returns whole elements",
      "group": "Array",
      "spec": "Array#shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#shift passed a number n as an argument does not return subclass instances with Array subclass",
      "group": "Array",
      "spec": "Array#shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#shift passed a number n as an argument keeps taint status",
      "group": "Array",
      "spec": "Array#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#shift passed a number n as an argument raises a TypeError when the passed n cannot be coerced to Integer",
      "group": "Array",
      "spec": "Array#shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#shift passed a number n as an argument raises an ArgumentError if more arguments are passed",
      "group": "Array",
      "spec": "Array#shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#shift passed a number n as an argument raises an ArgumentError if n is negative",
      "group": "Array",
      "spec": "Array#shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#shift passed a number n as an argument removes and returns an array with the first n element of the array",
      "group": "Array",
      "spec": "Array#shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#shift passed a number n as an argument returns a new empty array if there are no more elements",
      "group": "Array",
      "spec": "Array#shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#shift passed a number n as an argument returns an untainted array even if the array is tainted",
      "group": "Array",
      "spec": "Array#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#shift passed a number n as an argument returns whole elements if n exceeds size of the array",
      "group": "Array",
      "spec": "Array#shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#shift passed a number n as an argument tries to convert n to an Integer using #to_int",
      "group": "Array",
      "spec": "Array#shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#shift properly handles recursive arrays",
      "group": "Array",
      "spec": "Array#shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#shift raises a FrozenError on a frozen array",
      "group": "Array",
      "spec": "Array#shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#shift raises a FrozenError on an empty frozen array",
      "group": "Array",
      "spec": "Array#shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#shift removes and returns the first element",
      "group": "Array",
      "spec": "Array#shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#shift returns nil when the array is empty",
      "group": "Array",
      "spec": "Array#shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#size properly handles recursive arrays",
      "group": "Array",
      "spec": "Array#size",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#size returns the number of elements",
      "group": "Array",
      "spec": "Array#size",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#sort_by! changes nothing when called on a single element array",
      "group": "Array",
      "spec": "Array#sort_by!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#sort_by! completes when supplied a block that always returns the same result",
      "group": "Array",
      "spec": "Array#sort_by!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#sort_by! makes some modification even if finished sorting when it would break in the given block",
      "group": "Array",
      "spec": "Array#sort_by!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#sort_by! raises a FrozenError on a frozen array",
      "group": "Array",
      "spec": "Array#sort_by!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#sort_by! raises a FrozenError on an empty frozen array",
      "group": "Array",
      "spec": "Array#sort_by!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#sort_by! returns an Enumerator if not given a block",
      "group": "Array",
      "spec": "Array#sort_by!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#sort_by! returns the specified value when it would break in the given block",
      "group": "Array",
      "spec": "Array#sort_by!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#sort_by! sorts array in place by passing each element to the given block",
      "group": "Array",
      "spec": "Array#sort_by!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#sort_by! when no block is given returned Enumerator size returns the enumerable size",
      "group": "Array",
      "spec": "Array#sort_by!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Array#to_ary properly handles recursive arrays",
      "group": "Array",
      "spec": "Array#to_ary",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#to_ary returns self",
      "group": "Array",
      "spec": "Array#to_ary",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#unshift prepends object to the original array",
      "group": "Array",
      "spec": "Array#unshift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#unshift properly handles recursive arrays",
      "group": "Array",
      "spec": "Array#unshift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#unshift quietly ignores unshifting nothing",
      "group": "Array",
      "spec": "Array#unshift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#unshift raises a FrozenError on a frozen array when the array is modified",
      "group": "Array",
      "spec": "Array#unshift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array#unshift raises a FrozenError on a frozen array when the array would not be modified",
      "group": "Array",
      "spec": "Array#unshift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array.[] returns a new array populated with the given elements",
      "group": "Array",
      "spec": "Array.[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array.try_convert does not rescue exceptions raised by #to_ary",
      "group": "Array",
      "spec": "Array.try_convert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array.try_convert returns nil when the argument does not respond to #to_ary",
      "group": "Array",
      "spec": "Array.try_convert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array.try_convert returns the argument if it's a kind of Array",
      "group": "Array",
      "spec": "Array.try_convert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array.try_convert returns the argument if it's an Array",
      "group": "Array",
      "spec": "Array.try_convert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array.try_convert sends #to_ary to the argument and raises TypeError if it's not a kind of Array",
      "group": "Array",
      "spec": "Array.try_convert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array.try_convert sends #to_ary to the argument and returns the result if it's a kind of Array",
      "group": "Array",
      "spec": "Array.try_convert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array.try_convert sends #to_ary to the argument and returns the result if it's an Array",
      "group": "Array",
      "spec": "Array.try_convert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array.try_convert sends #to_ary to the argument and returns the result if it's nil",
      "group": "Array",
      "spec": "Array.try_convert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Array[] is a synonym for .[]",
      "group": "Array[]",
      "spec": "Array[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Base64#decode64 returns the Base64-decoded version of the given string",
      "group": "Base64",
      "spec": "Base64#decode64",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Base64#encode64 returns the Base64-encoded version of the given string",
      "group": "Base64",
      "spec": "Base64#encode64",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Base64#encode64 returns the Base64-encoded version of the given string",
      "group": "Base64",
      "spec": "Base64#encode64",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Base64#urlsafe_decode64 does not require padding",
      "group": "Base64",
      "spec": "Base64#urlsafe_decode64",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Base64#urlsafe_decode64 uses '-' instead of '+'",
      "group": "Base64",
      "spec": "Base64#urlsafe_decode64",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Base64#urlsafe_decode64 uses '_' instead of '/'",
      "group": "Base64",
      "spec": "Base64#urlsafe_decode64",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Base64#urlsafe_encode64 makes padding optional",
      "group": "Base64",
      "spec": "Base64#urlsafe_encode64",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Base64#urlsafe_encode64 uses '-' instead of '+'",
      "group": "Base64",
      "spec": "Base64#urlsafe_encode64",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Base64#urlsafe_encode64 uses '_' instead of '/'",
      "group": "Base64",
      "spec": "Base64#urlsafe_encode64",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject does not define built-in constants (according to const_defined?)",
      "group": "BasicObject",
      "spec": "BasicObject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject does not define built-in constants (according to defined?)",
      "group": "BasicObject",
      "spec": "BasicObject",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject includes itself in its list of constants",
      "group": "BasicObject",
      "spec": "BasicObject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject instance metaclass contains methods defined for the BasicObject instance",
      "group": "BasicObject",
      "spec": "BasicObject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject instance metaclass has BasicObject as superclass",
      "group": "BasicObject",
      "spec": "BasicObject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject instance metaclass is an instance of Class",
      "group": "BasicObject",
      "spec": "BasicObject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject is included in Object's list of constants",
      "group": "BasicObject",
      "spec": "BasicObject",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject metaclass contains methods for the BasicObject class",
      "group": "BasicObject",
      "spec": "BasicObject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject metaclass has Class as superclass",
      "group": "BasicObject",
      "spec": "BasicObject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject metaclass is an instance of Class",
      "group": "BasicObject",
      "spec": "BasicObject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject raises NameError when referencing built-in constants",
      "group": "BasicObject",
      "spec": "BasicObject",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject raises NoMethodError for nonexistent methods after #method_missing is removed",
      "group": "BasicObject",
      "spec": "BasicObject",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject subclass BasicObject references can refer to BasicObject from within itself",
      "group": "BasicObject",
      "spec": "BasicObject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject subclass contains Kernel methods when including Kernel",
      "group": "BasicObject",
      "spec": "BasicObject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#! is a public instance method",
      "group": "BasicObject",
      "spec": "BasicObject#!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#! returns false",
      "group": "BasicObject",
      "spec": "BasicObject#!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#!= dispatches to #==",
      "group": "BasicObject",
      "spec": "BasicObject#!=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#!= is a public instance method",
      "group": "BasicObject",
      "spec": "BasicObject#!=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#!= returns false if other is identical to self",
      "group": "BasicObject",
      "spec": "BasicObject#!=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#!= returns true if other is an Object",
      "group": "BasicObject",
      "spec": "BasicObject#!=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#!= returns true if other is not identical to self",
      "group": "BasicObject",
      "spec": "BasicObject#!=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#!= when invoked using Kernel#send dispatches to #==",
      "group": "BasicObject",
      "spec": "BasicObject#!=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#!= when invoked using Kernel#send returns false if other is identical to self",
      "group": "BasicObject",
      "spec": "BasicObject#!=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#!= when invoked using Kernel#send returns true if other is not identical to self",
      "group": "BasicObject",
      "spec": "BasicObject#!=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#== is a public instance method",
      "group": "BasicObject",
      "spec": "BasicObject#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#== returns false for nil and any other object",
      "group": "BasicObject",
      "spec": "BasicObject#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#== returns false for objects of different classes",
      "group": "BasicObject",
      "spec": "BasicObject#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#== returns false if other is not identical to self",
      "group": "BasicObject",
      "spec": "BasicObject#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#== returns true for integers of initially different ranges",
      "group": "BasicObject",
      "spec": "BasicObject#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#== returns true for the same immediate object",
      "group": "BasicObject",
      "spec": "BasicObject#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#== returns true if other is identical to self",
      "group": "BasicObject",
      "spec": "BasicObject#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#== returns true only if self and other are the same boolean",
      "group": "BasicObject",
      "spec": "BasicObject#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#== returns true only if self and other are the same object",
      "group": "BasicObject",
      "spec": "BasicObject#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__id__ returns a different value for an object and its dup",
      "group": "BasicObject",
      "spec": "BasicObject#__id__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__id__ returns a different value for two Bignum literals",
      "group": "BasicObject",
      "spec": "BasicObject#__id__",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__id__ returns a different value for two String literals",
      "group": "BasicObject",
      "spec": "BasicObject#__id__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__id__ returns a different value for two numbers near the 32 bit Fixnum limit",
      "group": "BasicObject",
      "spec": "BasicObject#__id__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__id__ returns a different value for two numbers near the 64 bit Fixnum limit",
      "group": "BasicObject",
      "spec": "BasicObject#__id__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__id__ returns an integer",
      "group": "BasicObject",
      "spec": "BasicObject#__id__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__id__ returns different values for different objects",
      "group": "BasicObject",
      "spec": "BasicObject#__id__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__id__ returns the same value for two Fixnums with the same value",
      "group": "BasicObject",
      "spec": "BasicObject#__id__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__id__ returns the same value for two Symbol literals",
      "group": "BasicObject",
      "spec": "BasicObject#__id__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__id__ returns the same value for two false literals",
      "group": "BasicObject",
      "spec": "BasicObject#__id__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__id__ returns the same value for two nil literals",
      "group": "BasicObject",
      "spec": "BasicObject#__id__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__id__ returns the same value for two true literals",
      "group": "BasicObject",
      "spec": "BasicObject#__id__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__id__ returns the same value on all calls to id for a given object",
      "group": "BasicObject",
      "spec": "BasicObject#__id__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__send__ accepts a String method name",
      "group": "BasicObject",
      "spec": "BasicObject#__send__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__send__ has a negative arity",
      "group": "BasicObject",
      "spec": "BasicObject#__send__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__send__ invokes a class method if called on a class",
      "group": "BasicObject",
      "spec": "BasicObject#__send__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__send__ invokes module methods with super correctly",
      "group": "BasicObject",
      "spec": "BasicObject#__send__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__send__ invokes the named method",
      "group": "BasicObject",
      "spec": "BasicObject#__send__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__send__ is a public instance method",
      "group": "BasicObject",
      "spec": "BasicObject#__send__",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__send__ raises a NameError if the corresponding method can't be found",
      "group": "BasicObject",
      "spec": "BasicObject#__send__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__send__ raises a NameError if the corresponding singleton method can't be found",
      "group": "BasicObject",
      "spec": "BasicObject#__send__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__send__ raises a TypeError if the method name is not a string or symbol",
      "group": "BasicObject",
      "spec": "BasicObject#__send__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__send__ raises an ArgumentError if called with fewer arguments than required parameters",
      "group": "BasicObject",
      "spec": "BasicObject#__send__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__send__ raises an ArgumentError if called with more arguments than available parameters",
      "group": "BasicObject",
      "spec": "BasicObject#__send__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__send__ raises an ArgumentError if no arguments are given",
      "group": "BasicObject",
      "spec": "BasicObject#__send__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__send__ succeeds if passed an arbitrary number of arguments as a splat parameter",
      "group": "BasicObject",
      "spec": "BasicObject#__send__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__send__ succeeds when passing 0 arguments to a method with one parameter with a default",
      "group": "BasicObject",
      "spec": "BasicObject#__send__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#__send__ succeeds when passing 1 or more arguments as a required and a splat parameter",
      "group": "BasicObject",
      "spec": "BasicObject#__send__",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#equal? is a public instance method",
      "group": "BasicObject",
      "spec": "BasicObject#equal?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#equal? is unaffected by overriding ==",
      "group": "BasicObject",
      "spec": "BasicObject#equal?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#equal? is unaffected by overriding __id__",
      "group": "BasicObject",
      "spec": "BasicObject#equal?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#equal? is unaffected by overriding eql?",
      "group": "BasicObject",
      "spec": "BasicObject#equal?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#equal? is unaffected by overriding object_id",
      "group": "BasicObject",
      "spec": "BasicObject#equal?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#equal? returns false for nil and any other object",
      "group": "BasicObject",
      "spec": "BasicObject#equal?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#equal? returns false for objects of different classes",
      "group": "BasicObject",
      "spec": "BasicObject#equal?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#equal? returns false if other is not identical to self",
      "group": "BasicObject",
      "spec": "BasicObject#equal?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#equal? returns true for integers of initially different ranges",
      "group": "BasicObject",
      "spec": "BasicObject#equal?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#equal? returns true for the same immediate object",
      "group": "BasicObject",
      "spec": "BasicObject#equal?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#equal? returns true if other is identical to self",
      "group": "BasicObject",
      "spec": "BasicObject#equal?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#equal? returns true only if self and other are the same boolean",
      "group": "BasicObject",
      "spec": "BasicObject#equal?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#equal? returns true only if self and other are the same object",
      "group": "BasicObject",
      "spec": "BasicObject#equal?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#initialize does not accept arguments",
      "group": "BasicObject",
      "spec": "BasicObject#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#initialize is a private instance method",
      "group": "BasicObject",
      "spec": "BasicObject#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for a Class raises a NoMethodError when a private method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for a Class raises a NoMethodError when a private method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for a Class raises a NoMethodError when a protected method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for a Class raises a NoMethodError when a protected method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for a Class raises a NoMethodError when an undefined method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for a Class raises a NoMethodError when an undefined method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for a Class with #method_missing defined is called when an private method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for a Class with #method_missing defined is called when an protected method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for a Class with #method_missing defined is called when an undefined method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for a Class with #method_missing defined is not called when a defined method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for a Module raises a NoMethodError when a private method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for a Module raises a NoMethodError when a protected method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for a Module raises a NoMethodError when an undefined method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for a Module with #method_missing defined is called when a not defined method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for a Module with #method_missing defined is called when a private method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for a Module with #method_missing defined is called when a protected method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for a Module with #method_missing defined is not called when a defined method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for an instance raises a NoMethodError when a private method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for an instance raises a NoMethodError when a private method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for an instance raises a NoMethodError when a protected method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for an instance raises a NoMethodError when a protected method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for an instance raises a NoMethodError when an undefined method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for an instance raises a NoMethodError when an undefined method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for an instance sets the receiver of the raised NoMethodError",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for an instance sets the receiver of the raised NoMethodError",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for an instance with #method_missing defined is called when an private method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for an instance with #method_missing defined is called when an protected method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for an instance with #method_missing defined is called when an undefined method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing for an instance with #method_missing defined is not called when a defined method is called",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#method_missing is a private method",
      "group": "BasicObject",
      "spec": "BasicObject#method_missing",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#singleton_method_added is a private method",
      "group": "BasicObject",
      "spec": "BasicObject#singleton_method_added",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#singleton_method_added is called when a method is defined in the singleton class",
      "group": "BasicObject",
      "spec": "BasicObject#singleton_method_added",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#singleton_method_added is called when a method is defined with alias_method in the singleton class",
      "group": "BasicObject",
      "spec": "BasicObject#singleton_method_added",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#singleton_method_added is called when a method is defined with syntax alias in the singleton class",
      "group": "BasicObject",
      "spec": "BasicObject#singleton_method_added",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#singleton_method_added is called when a singleton method is defined on a module",
      "group": "BasicObject",
      "spec": "BasicObject#singleton_method_added",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#singleton_method_added is called when a singleton method is defined on an object",
      "group": "BasicObject",
      "spec": "BasicObject#singleton_method_added",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#singleton_method_added is called when define_method is used in the singleton class",
      "group": "BasicObject",
      "spec": "BasicObject#singleton_method_added",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#singleton_method_added is not called for instance methods",
      "group": "BasicObject",
      "spec": "BasicObject#singleton_method_added",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#singleton_method_removed is a private method",
      "group": "BasicObject",
      "spec": "BasicObject#singleton_method_removed",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#singleton_method_removed is called when a method is removed on self",
      "group": "BasicObject",
      "spec": "BasicObject#singleton_method_removed",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#singleton_method_undefined is a private method",
      "group": "BasicObject",
      "spec": "BasicObject#singleton_method_undefined",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:BasicObject#singleton_method_undefined is called when a method is removed on self",
      "group": "BasicObject",
      "spec": "BasicObject#singleton_method_undefined",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#clone is a shallow copy of the Binding object",
      "group": "Binding",
      "spec": "Binding#clone",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#clone returns a copy of the Binding object",
      "group": "Binding",
      "spec": "Binding#clone",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#dup is a shallow copy of the Binding object",
      "group": "Binding",
      "spec": "Binding#dup",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#dup returns a copy of the Binding object",
      "group": "Binding",
      "spec": "Binding#dup",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#eval behaves like Kernel.eval(..., self)",
      "group": "Binding",
      "spec": "Binding#eval",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#eval does not leak variables to cloned bindings",
      "group": "Binding",
      "spec": "Binding#eval",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#eval increments __LINE__ on each line of a multiline eval",
      "group": "Binding",
      "spec": "Binding#eval",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#eval inherits __FILE__ from the enclosing scope",
      "group": "Binding",
      "spec": "Binding#eval",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#eval inherits __LINE__ from the enclosing scope",
      "group": "Binding",
      "spec": "Binding#eval",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#eval inherits __LINE__ from the enclosing scope even if the Binding is created with #send",
      "group": "Binding",
      "spec": "Binding#eval",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#eval preserves __LINE__ across multiple calls to eval",
      "group": "Binding",
      "spec": "Binding#eval",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#eval starts with a __LINE__ from the third argument if passed",
      "group": "Binding",
      "spec": "Binding#eval",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#eval starts with a __LINE__ of 1 if a filename is passed",
      "group": "Binding",
      "spec": "Binding#eval",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#eval uses the __FILE__ that is passed in",
      "group": "Binding",
      "spec": "Binding#eval",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#eval with __method__ returns the method where the Binding was created",
      "group": "Binding",
      "spec": "Binding#eval",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#eval with __method__ returns the method where the Binding was created, ignoring #send",
      "group": "Binding",
      "spec": "Binding#eval",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#eval with a file given does not store the filename permanently",
      "group": "Binding",
      "spec": "Binding#eval",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#irb creates an IRB session with the binding in scope",
      "group": "Binding",
      "spec": "Binding#irb",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_defined? allows usage of a String as the variable name",
      "group": "Binding",
      "spec": "Binding#local_variable_defined?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_defined? allows usage of an object responding to #to_str as the variable name",
      "group": "Binding",
      "spec": "Binding#local_variable_defined?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_defined? returns false when a variable is not defined",
      "group": "Binding",
      "spec": "Binding#local_variable_defined?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_defined? returns true when a local variable is defined in a parent scope",
      "group": "Binding",
      "spec": "Binding#local_variable_defined?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_defined? returns true when a local variable is defined using Binding#local_variable_set",
      "group": "Binding",
      "spec": "Binding#local_variable_defined?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_defined? returns true when a local variable is defined using eval()",
      "group": "Binding",
      "spec": "Binding#local_variable_defined?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_defined? returns true when a regular local variable is defined",
      "group": "Binding",
      "spec": "Binding#local_variable_defined?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_get gets a local variable defined in a parent scope",
      "group": "Binding",
      "spec": "Binding#local_variable_get",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_get gets a local variable defined using eval()",
      "group": "Binding",
      "spec": "Binding#local_variable_get",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_get raises a NameError for missing variables",
      "group": "Binding",
      "spec": "Binding#local_variable_get",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_get raises a NameError on global access",
      "group": "Binding",
      "spec": "Binding#local_variable_get",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_get raises a NameError on special variable access",
      "group": "Binding",
      "spec": "Binding#local_variable_get",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_get reads local variables captured in the binding",
      "group": "Binding",
      "spec": "Binding#local_variable_get",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_get reads variables added later to the binding",
      "group": "Binding",
      "spec": "Binding#local_variable_get",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_set adds nonexistent variables to the binding's eval scope",
      "group": "Binding",
      "spec": "Binding#local_variable_set",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_set overwrites a local variable defined using eval()",
      "group": "Binding",
      "spec": "Binding#local_variable_set",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_set overwrites an existing local variable defined before a Binding",
      "group": "Binding",
      "spec": "Binding#local_variable_set",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_set raises a NameError on global access",
      "group": "Binding",
      "spec": "Binding#local_variable_set",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_set raises a NameError on special variable access",
      "group": "Binding",
      "spec": "Binding#local_variable_set",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_set scopes new local variables to the receiving Binding",
      "group": "Binding",
      "spec": "Binding#local_variable_set",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_set sets a local variable using a String as the variable name",
      "group": "Binding",
      "spec": "Binding#local_variable_set",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_set sets a local variable using an object responding to #to_str as the variable name",
      "group": "Binding",
      "spec": "Binding#local_variable_set",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variable_set sets a new local variable",
      "group": "Binding",
      "spec": "Binding#local_variable_set",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variables includes local variables defined after calling binding.local_variables",
      "group": "Binding",
      "spec": "Binding#local_variables",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variables includes local variables in the current scope",
      "group": "Binding",
      "spec": "Binding#local_variables",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variables includes local variables of inherited scopes and eval'ed context",
      "group": "Binding",
      "spec": "Binding#local_variables",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variables includes new variables defined in the binding",
      "group": "Binding",
      "spec": "Binding#local_variables",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variables includes shadowed local variables only once",
      "group": "Binding",
      "spec": "Binding#local_variables",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#local_variables returns an Array",
      "group": "Binding",
      "spec": "Binding#local_variables",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Binding#receiver returns the object to which binding is bound",
      "group": "Binding",
      "spec": "Binding#receiver",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Class#allocate does not call initialize on the new instance",
      "group": "Class",
      "spec": "Class#allocate",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class#allocate raises TypeError for #superclass",
      "group": "Class",
      "spec": "Class#allocate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Class#allocate returns a fully-formed instance of Module",
      "group": "Class",
      "spec": "Class#allocate",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class#allocate returns an instance of self",
      "group": "Class",
      "spec": "Class#allocate",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class#allocate throws an exception when calling a method on a new instance",
      "group": "Class",
      "spec": "Class#allocate",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class#dup duplicates both the class and the singleton class",
      "group": "Class",
      "spec": "Class#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class#dup retains an included module in the ancestor chain for the singleton class",
      "group": "Class",
      "spec": "Class#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class#dup retains the correct ancestor chain for the singleton class",
      "group": "Class",
      "spec": "Class#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class#dup sets the name from the class to nil if not assigned to a constant",
      "group": "Class",
      "spec": "Class#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class#dup stores the new name if assigned to a constant",
      "group": "Class",
      "spec": "Class#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class#initialize is private",
      "group": "Class",
      "spec": "Class#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class#initialize raises a TypeError when called on BasicObject",
      "group": "Class",
      "spec": "Class#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Class#initialize raises a TypeError when called on already initialized classes",
      "group": "Class",
      "spec": "Class#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Class#initialize when given the Class raises a TypeError",
      "group": "Class",
      "spec": "Class#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Class#new invokes #initialize on the new instance with the given args",
      "group": "Class",
      "spec": "Class#new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class#new passes the block to #initialize",
      "group": "Class",
      "spec": "Class#new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class#new returns a new instance of self",
      "group": "Class",
      "spec": "Class#new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class#new uses the internal allocator and does not call #allocate",
      "group": "Class",
      "spec": "Class#new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Class#superclass for a singleton class of a class returns the singleton class of its superclass",
      "group": "Class",
      "spec": "Class#superclass",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class#superclass for a singleton class of an object returns the class of the object",
      "group": "Class",
      "spec": "Class#superclass",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class#superclass returns the superclass of self",
      "group": "Class",
      "spec": "Class#superclass",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class#to_s regular class returns same name as Module#to_s",
      "group": "Class",
      "spec": "Class#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class#to_s singleton class for classes includes class name",
      "group": "Class",
      "spec": "Class#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class#to_s singleton class for modules includes module name",
      "group": "Class",
      "spec": "Class#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class#to_s singleton class for objects includes class name and object ID",
      "group": "Class",
      "spec": "Class#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class.inherited is called by super even when marked as a private class method",
      "group": "Class",
      "spec": "Class.inherited",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Class.inherited is called by super from a method provided by an included module",
      "group": "Class",
      "spec": "Class.inherited",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class.inherited is called when marked as a private class method",
      "group": "Class",
      "spec": "Class.inherited",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Class.inherited is called when marked as a protected class method",
      "group": "Class",
      "spec": "Class.inherited",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class.inherited is called when marked as a public class method",
      "group": "Class",
      "spec": "Class.inherited",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Class.inherited is invoked only once per subclass",
      "group": "Class",
      "spec": "Class.inherited",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class.inherited is invoked with the child Class when self is subclassed",
      "group": "Class",
      "spec": "Class.inherited",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class.inherited will be invoked by child class regardless of visibility",
      "group": "Class",
      "spec": "Class.inherited",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class.new creates a class that can be given a name by assigning it to a constant",
      "group": "Class",
      "spec": "Class.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Class.new creates a class without a name",
      "group": "Class",
      "spec": "Class.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class.new creates a new anonymous class",
      "group": "Class",
      "spec": "Class.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class.new raises a TypeError if passed a metaclass",
      "group": "Class",
      "spec": "Class.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class.new raises a TypeError when given a non-Class",
      "group": "Class",
      "spec": "Class.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Class.new sets the new class' superclass to Object when no class given",
      "group": "Class",
      "spec": "Class.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class.new sets the new class' superclass to the given class",
      "group": "Class",
      "spec": "Class.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class.new with a block given creates a subclass of the given superclass",
      "group": "Class",
      "spec": "Class.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class.new with a block given runs the inherited hook after yielding the block",
      "group": "Class",
      "spec": "Class.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Class.new with a block given uses the given block as the class' body",
      "group": "Class",
      "spec": "Class.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Class.new with a block given yields the new class as self in the block",
      "group": "Class",
      "spec": "Class.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#< calls #<=> on self with other and returns true if #<=> returns any Integer less than 0",
      "group": "Comparable",
      "spec": "Comparable#<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#< raises an ArgumentError if calling #<=> on self returns nil",
      "group": "Comparable",
      "spec": "Comparable#<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#< returns false if calling #<=> on self returns 0 or any Integer greater than 0",
      "group": "Comparable",
      "spec": "Comparable#<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#<= calls #<=> on self with other and returns true if #<=> returns 0 or any Integer less than 0",
      "group": "Comparable",
      "spec": "Comparable#<=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#<= raises an ArgumentError if calling #<=> on self returns nil",
      "group": "Comparable",
      "spec": "Comparable#<=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#<= returns false if calling #<=> on self returns any Integer greater than 0",
      "group": "Comparable",
      "spec": "Comparable#<=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#== calls #<=> on self with other and returns true if #<=> returns 0",
      "group": "Comparable",
      "spec": "Comparable#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#== calls #<=> on self with other and returns true if #<=> returns 0.0",
      "group": "Comparable",
      "spec": "Comparable#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#== returns false if calling #<=> on self returns a negative Integer",
      "group": "Comparable",
      "spec": "Comparable#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#== returns false if calling #<=> on self returns a positive Integer",
      "group": "Comparable",
      "spec": "Comparable#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#== returns true if other is the same as self",
      "group": "Comparable",
      "spec": "Comparable#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#== when #<=> calls super calls the defined #<=> only once for different objects",
      "group": "Comparable",
      "spec": "Comparable#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#== when #<=> calls super returns true for identical objects",
      "group": "Comparable",
      "spec": "Comparable#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#== when #<=> is not defined returns false and does not recurse infinitely",
      "group": "Comparable",
      "spec": "Comparable#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#== when #<=> is not defined returns true for identical objects",
      "group": "Comparable",
      "spec": "Comparable#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#== when #<=> raises an exception if it is a StandardError lets it go through",
      "group": "Comparable",
      "spec": "Comparable#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#== when #<=> raises an exception if it is a subclass of StandardError lets it go through",
      "group": "Comparable",
      "spec": "Comparable#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#== when #<=> raises an exception lets it go through if it is not a StandardError",
      "group": "Comparable",
      "spec": "Comparable#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#== when #<=> returns nil returns false",
      "group": "Comparable",
      "spec": "Comparable#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#== when #<=> returns nor nil neither an Integer raises an ArgumentError",
      "group": "Comparable",
      "spec": "Comparable#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#> calls #<=> on self with other and returns true if #<=> returns any Integer greater than 0",
      "group": "Comparable",
      "spec": "Comparable#>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#> raises an ArgumentError if calling #<=> on self returns nil",
      "group": "Comparable",
      "spec": "Comparable#>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#> returns false if calling #<=> on self returns 0 or any Integer less than 0",
      "group": "Comparable",
      "spec": "Comparable#>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#>= calls #<=> on self with other and returns true if #<=> returns 0 or any Integer greater than 0",
      "group": "Comparable",
      "spec": "Comparable#>=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#>= raises an ArgumentError if calling #<=> on self returns nil",
      "group": "Comparable",
      "spec": "Comparable#>=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#>= returns false if calling #<=> on self returns any Integer less than 0",
      "group": "Comparable",
      "spec": "Comparable#>=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#between? returns true if self is greater than or equal to the first and less than or equal to the second argument",
      "group": "Comparable",
      "spec": "Comparable#between?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#clamp raises an Argument error unless given 2 parameters",
      "group": "Comparable",
      "spec": "Comparable#clamp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#clamp raises an Argument error unless the 2 parameters are correctly ordered",
      "group": "Comparable",
      "spec": "Comparable#clamp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#clamp returns self if within the given parameters",
      "group": "Comparable",
      "spec": "Comparable#clamp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#clamp returns the max parameter if greater than it",
      "group": "Comparable",
      "spec": "Comparable#clamp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Comparable#clamp returns the min parameter if smaller than it",
      "group": "Comparable",
      "spec": "Comparable#clamp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Complex#* with Complex multiplies according to the usual rule for complex numbers: (a + bi) * (c + di) = ac - bd + (ad + bc)i",
      "group": "Complex",
      "spec": "Complex#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#* with Integer multiplies both parts of self by the given Integer",
      "group": "Complex",
      "spec": "Complex#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#* with Object tries to coerce self into other",
      "group": "Complex",
      "spec": "Complex#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#* with a Numeric which responds to #real? with true multiples both parts of self by other",
      "group": "Complex",
      "spec": "Complex#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#* with a Numeric which responds to #real? with true with a Numeric which responds to #real? with false coerces the passed argument to Complex and multiplies the resulting elements",
      "group": "Complex",
      "spec": "Complex#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#** with Complex returns self raised to the given power",
      "group": "Complex",
      "spec": "Complex#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#** with Fixnum 0 returns Complex(1)",
      "group": "Complex",
      "spec": "Complex#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#** with Float 0.0 returns Complex(1.0, 0.0)",
      "group": "Complex",
      "spec": "Complex#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#** with Integer returns self raised to the given power",
      "group": "Complex",
      "spec": "Complex#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#** with Object tries to coerce self into other",
      "group": "Complex",
      "spec": "Complex#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#** with Rational returns self raised to the given power",
      "group": "Complex",
      "spec": "Complex#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#+ passed Numeric which responds to #real? with false coerces the passed argument to Complex and adds the resulting elements",
      "group": "Complex",
      "spec": "Complex#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#+ passed Numeric which responds to #real? with true coerces the passed argument to the type of the real part and adds the resulting elements",
      "group": "Complex",
      "spec": "Complex#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#+ with Complex adds both the real and imaginary components",
      "group": "Complex",
      "spec": "Complex#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#+ with Integer adds the real number to the real component of self",
      "group": "Complex",
      "spec": "Complex#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#+ with Object tries to coerce self into other",
      "group": "Complex",
      "spec": "Complex#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#- passed Numeric which responds to #real? with false coerces the passed argument to Complex and subtracts the resulting elements",
      "group": "Complex",
      "spec": "Complex#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#- passed Numeric which responds to #real? with true coerces the passed argument to the type of the real part and subtracts the resulting elements",
      "group": "Complex",
      "spec": "Complex#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#- with Complex subtracts both the real and imaginary components",
      "group": "Complex",
      "spec": "Complex#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#- with Integer subtracts the real number from the real component of self",
      "group": "Complex",
      "spec": "Complex#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#- with Object tries to coerce self into other",
      "group": "Complex",
      "spec": "Complex#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#-@ sends #-@ to the real and imaginary parts and returns a Complex with the resulting respective parts",
      "group": "Complex",
      "spec": "Complex#-@",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#/ with Bignum divides both parts of the Complex number",
      "group": "Complex",
      "spec": "Complex#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#/ with Complex divides according to the usual rule for complex numbers",
      "group": "Complex",
      "spec": "Complex#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#/ with Fixnum divides both parts of the Complex number",
      "group": "Complex",
      "spec": "Complex#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#/ with Fixnum produces Rational parts",
      "group": "Complex",
      "spec": "Complex#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#/ with Fixnum raises a ZeroDivisionError when given zero",
      "group": "Complex",
      "spec": "Complex#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#/ with Float divides both parts of the Complex number",
      "group": "Complex",
      "spec": "Complex#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#/ with Float returns Complex(Infinity, Infinity) when given zero",
      "group": "Complex",
      "spec": "Complex#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#/ with Object tries to coerce self into other",
      "group": "Complex",
      "spec": "Complex#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#/ with a Numeric which responds to #real? with false coerces the passed argument to Complex and divides the resulting elements",
      "group": "Complex",
      "spec": "Complex#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#/ with a Numeric which responds to #real? with true returns Complex(real.quo(other), imag.quo(other))",
      "group": "Complex",
      "spec": "Complex#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#== with Complex returns true when self and other have numerical equality",
      "group": "Complex",
      "spec": "Complex#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#== with Numeric returns true when self's imaginary part is 0 and the real part and other have numerical equality",
      "group": "Complex",
      "spec": "Complex#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#== with Object calls other#== with self",
      "group": "Complex",
      "spec": "Complex#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#== with a Numeric which responds to #real? with false returns other == self",
      "group": "Complex",
      "spec": "Complex#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#== with a Numeric which responds to #real? with true returns false when when the imaginary part is not zero",
      "group": "Complex",
      "spec": "Complex#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#== with a Numeric which responds to #real? with true returns real == other when the imaginary part is zero",
      "group": "Complex",
      "spec": "Complex#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#abs returns the modulus: |a + bi| = sqrt((a ^ 2) + (b ^ 2))",
      "group": "Complex",
      "spec": "Complex#abs",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#abs2 returns the sum of the squares of the real and imaginary parts",
      "group": "Complex",
      "spec": "Complex#abs2",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#angle returns the argument -- i.e., the angle from (1, 0) in the complex plane",
      "group": "Complex",
      "spec": "Complex#angle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#arg returns the argument -- i.e., the angle from (1, 0) in the complex plane",
      "group": "Complex",
      "spec": "Complex#arg",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#coerce raises TypeError when other is a Numeric which responds to #real? with false",
      "group": "Complex",
      "spec": "Complex#coerce",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#coerce raises a TypeError when other is a String",
      "group": "Complex",
      "spec": "Complex#coerce",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#coerce raises a TypeError when other is false",
      "group": "Complex",
      "spec": "Complex#coerce",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#coerce raises a TypeError when other is nil",
      "group": "Complex",
      "spec": "Complex#coerce",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#coerce returns an array containing other and self as Complex when other is a Bignum",
      "group": "Complex",
      "spec": "Complex#coerce",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#coerce returns an array containing other and self as Complex when other is a Float",
      "group": "Complex",
      "spec": "Complex#coerce",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#coerce returns an array containing other and self as Complex when other is a Rational",
      "group": "Complex",
      "spec": "Complex#coerce",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#coerce returns an array containing other and self as Complex when other is an Integer",
      "group": "Complex",
      "spec": "Complex#coerce",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#coerce returns an array containing other and self when other is a Complex",
      "group": "Complex",
      "spec": "Complex#coerce",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#coerce returns an array containing other as Complex and self when other is a Numeric which responds to #real? with true",
      "group": "Complex",
      "spec": "Complex#coerce",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#conj returns the complex conjugate: conj a + bi = a - bi",
      "group": "Complex",
      "spec": "Complex#conj",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#conjugate returns the complex conjugate: conj a + bi = a - bi",
      "group": "Complex",
      "spec": "Complex#conjugate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#denominator returns the least common multiple denominator of the real and imaginary parts",
      "group": "Complex",
      "spec": "Complex#denominator",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#eql? does NOT send #eql? to real or imaginary parts",
      "group": "Complex",
      "spec": "Complex#eql?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#eql? returns false if other is not Complex",
      "group": "Complex",
      "spec": "Complex#eql?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#eql? returns false when self == other is false",
      "group": "Complex",
      "spec": "Complex#eql?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#eql? returns false when the imaginary parts are of different classes",
      "group": "Complex",
      "spec": "Complex#eql?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#eql? returns false when the real parts are of different classes",
      "group": "Complex",
      "spec": "Complex#eql?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#eql? returns true when the respective parts are of the same classes and self == other",
      "group": "Complex",
      "spec": "Complex#eql?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#fdiv accepts a negative numeric argument",
      "group": "Complex",
      "spec": "Complex#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#fdiv accepts a numeric argument",
      "group": "Complex",
      "spec": "Complex#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#fdiv raises a TypeError if passed a non-numeric argument",
      "group": "Complex",
      "spec": "Complex#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#fdiv sets the imaginary and real part to Infinity if self's imaginary and real parts are Infinity",
      "group": "Complex",
      "spec": "Complex#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#fdiv sets the imaginary part to Infinity if self's imaginary part is Infinity",
      "group": "Complex",
      "spec": "Complex#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#fdiv sets the imaginary part to NaN if self's imaginary part is NaN",
      "group": "Complex",
      "spec": "Complex#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#fdiv sets the real and imaginary part to NaN if self's real and imaginary parts are NaN",
      "group": "Complex",
      "spec": "Complex#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#fdiv sets the real and imaginary part to NaN if self's real part and the argument are both NaN",
      "group": "Complex",
      "spec": "Complex#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#fdiv sets the real and imaginary part to NaN if self's real part, self's imaginary part, and the argument are NaN",
      "group": "Complex",
      "spec": "Complex#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#fdiv sets the real part to Infinity if self's real part is Infinity",
      "group": "Complex",
      "spec": "Complex#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#fdiv sets the real part to NaN and the imaginary part to NaN if self's imaginary part, self's real part, and the argument are Infinity",
      "group": "Complex",
      "spec": "Complex#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#fdiv sets the real part to NaN if self's real part is NaN",
      "group": "Complex",
      "spec": "Complex#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#fdiv with an imaginary part returns a Complex number",
      "group": "Complex",
      "spec": "Complex#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#fdiv with an imaginary part sets the imaginary part to the imaginary part fdiv'd with the argument",
      "group": "Complex",
      "spec": "Complex#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#fdiv with an imaginary part sets the real part to self's real part fdiv'd with the argument",
      "group": "Complex",
      "spec": "Complex#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#fdiv with no imaginary part returns a Complex number",
      "group": "Complex",
      "spec": "Complex#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#fdiv with no imaginary part sets the imaginary part to 0.0",
      "group": "Complex",
      "spec": "Complex#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#fdiv with no imaginary part sets the real part to self's real part fdiv'd with the argument",
      "group": "Complex",
      "spec": "Complex#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#finite? returns false for NaN",
      "group": "Complex",
      "spec": "Complex#finite?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#finite? returns false for negative complex with infinite imaginary",
      "group": "Complex",
      "spec": "Complex#finite?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#finite? returns false for negative infinity",
      "group": "Complex",
      "spec": "Complex#finite?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#finite? returns false for positive complex with infinite imaginary",
      "group": "Complex",
      "spec": "Complex#finite?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#finite? returns false for positive infinity",
      "group": "Complex",
      "spec": "Complex#finite?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#finite? returns true if magnitude is finite",
      "group": "Complex",
      "spec": "Complex#finite?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#hash is different for different instances",
      "group": "Complex",
      "spec": "Complex#hash",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#hash is static",
      "group": "Complex",
      "spec": "Complex#hash",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#imag returns the imaginary part of self",
      "group": "Complex",
      "spec": "Complex#imag",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#imaginary returns the imaginary part of self",
      "group": "Complex",
      "spec": "Complex#imaginary",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#infinite? returns -1 for negative complex with infinite imaginary",
      "group": "Complex",
      "spec": "Complex#infinite?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#infinite? returns -1 for negative infinity",
      "group": "Complex",
      "spec": "Complex#infinite?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#infinite? returns 1 for positive complex with infinite imaginary",
      "group": "Complex",
      "spec": "Complex#infinite?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#infinite? returns 1 for positive infinity",
      "group": "Complex",
      "spec": "Complex#infinite?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#infinite? returns nil for NaN",
      "group": "Complex",
      "spec": "Complex#infinite?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#infinite? returns nil if magnitude is finite",
      "group": "Complex",
      "spec": "Complex#infinite?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#inspect returns (${real}+${image}i) for positive imaginary parts",
      "group": "Complex",
      "spec": "Complex#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#inspect returns (${real}-${image}i) for negative imaginary parts",
      "group": "Complex",
      "spec": "Complex#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#integer? returns false for a Complex with an imaginary part",
      "group": "Complex",
      "spec": "Complex#integer?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#integer? returns false for a Complex with no imaginary part",
      "group": "Complex",
      "spec": "Complex#integer?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#magnitude returns the modulus: |a + bi| = sqrt((a ^ 2) + (b ^ 2))",
      "group": "Complex",
      "spec": "Complex#magnitude",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#marshal_dump dumps real and imaginary parts",
      "group": "Complex",
      "spec": "Complex#marshal_dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#marshal_dump is a private method",
      "group": "Complex",
      "spec": "Complex#marshal_dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#negative? is undefined",
      "group": "Complex",
      "spec": "Complex#negative?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#numerator returns self's numerator",
      "group": "Complex",
      "spec": "Complex#numerator",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#phase returns the argument -- i.e., the angle from (1, 0) in the complex plane",
      "group": "Complex",
      "spec": "Complex#phase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#polar returns the absolute value and the argument",
      "group": "Complex",
      "spec": "Complex#polar",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#positive? is undefined",
      "group": "Complex",
      "spec": "Complex#positive?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#quo with Bignum divides both parts of the Complex number",
      "group": "Complex",
      "spec": "Complex#quo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#quo with Complex divides according to the usual rule for complex numbers",
      "group": "Complex",
      "spec": "Complex#quo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#quo with Fixnum divides both parts of the Complex number",
      "group": "Complex",
      "spec": "Complex#quo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#quo with Fixnum produces Rational parts",
      "group": "Complex",
      "spec": "Complex#quo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#quo with Fixnum raises a ZeroDivisionError when given zero",
      "group": "Complex",
      "spec": "Complex#quo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#quo with Float divides both parts of the Complex number",
      "group": "Complex",
      "spec": "Complex#quo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#quo with Float returns Complex(Infinity, Infinity) when given zero",
      "group": "Complex",
      "spec": "Complex#quo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#quo with Object tries to coerce self into other",
      "group": "Complex",
      "spec": "Complex#quo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#quo with a Numeric which responds to #real? with false coerces the passed argument to Complex and divides the resulting elements",
      "group": "Complex",
      "spec": "Complex#quo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#quo with a Numeric which responds to #real? with true returns Complex(real.quo(other), imag.quo(other))",
      "group": "Complex",
      "spec": "Complex#quo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#rationalize ignores a single argument",
      "group": "Complex",
      "spec": "Complex#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#rationalize raises ArgumentError when passed more than one argument",
      "group": "Complex",
      "spec": "Complex#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#rationalize raises RangeError if self has 0.0 imaginary part",
      "group": "Complex",
      "spec": "Complex#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#rationalize raises RangeError if self has non-zero imaginary part",
      "group": "Complex",
      "spec": "Complex#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#rationalize returns a Rational if self has zero imaginary part",
      "group": "Complex",
      "spec": "Complex#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#rationalize sends #rationalize to the real part",
      "group": "Complex",
      "spec": "Complex#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#real returns the real part of self",
      "group": "Complex",
      "spec": "Complex#real",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#real? returns false if the real part is Infinity",
      "group": "Complex",
      "spec": "Complex#real?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#real? returns false if the real part is NaN",
      "group": "Complex",
      "spec": "Complex#real?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#real? returns false if there is an imaginary part",
      "group": "Complex",
      "spec": "Complex#real?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#real? returns false if there is not an imaginary part",
      "group": "Complex",
      "spec": "Complex#real?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#rect raises an ArgumentError if given any arguments",
      "group": "Complex",
      "spec": "Complex#rect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#rect returns a two-element Array",
      "group": "Complex",
      "spec": "Complex#rect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#rect returns an Array",
      "group": "Complex",
      "spec": "Complex#rect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#rect returns the imaginary part of self as the last element",
      "group": "Complex",
      "spec": "Complex#rect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#rect returns the real part of self as the first element",
      "group": "Complex",
      "spec": "Complex#rect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#rectangular raises an ArgumentError if given any arguments",
      "group": "Complex",
      "spec": "Complex#rectangular",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#rectangular returns a two-element Array",
      "group": "Complex",
      "spec": "Complex#rectangular",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#rectangular returns an Array",
      "group": "Complex",
      "spec": "Complex#rectangular",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#rectangular returns the imaginary part of self as the last element",
      "group": "Complex",
      "spec": "Complex#rectangular",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#rectangular returns the real part of self as the first element",
      "group": "Complex",
      "spec": "Complex#rectangular",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_f when the imaginary part is Fixnum 0 returns the result of sending #to_f to the real part",
      "group": "Complex",
      "spec": "Complex#to_f",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_f when the imaginary part is Float 0.0 raises RangeError",
      "group": "Complex",
      "spec": "Complex#to_f",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_f when the imaginary part is Rational 0 returns the result of sending #to_f to the real part",
      "group": "Complex",
      "spec": "Complex#to_f",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_f when the imaginary part is non-zero raises RangeError",
      "group": "Complex",
      "spec": "Complex#to_f",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_f when the imaginary part responds to #== 0 with true returns the result of sending #to_f to the real part",
      "group": "Complex",
      "spec": "Complex#to_f",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_i when the imaginary part is Fixnum 0 returns the result of sending #to_i to the real part",
      "group": "Complex",
      "spec": "Complex#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_i when the imaginary part is Float 0.0 raises RangeError",
      "group": "Complex",
      "spec": "Complex#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_i when the imaginary part is Rational 0 returns the result of sending #to_i to the real part",
      "group": "Complex",
      "spec": "Complex#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_i when the imaginary part is non-zero raises RangeError",
      "group": "Complex",
      "spec": "Complex#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_i when the imaginary part responds to #== 0 with true returns the result of sending #to_i to the real part",
      "group": "Complex",
      "spec": "Complex#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_r when the imaginary part is Fixnum 0 returns the result of sending #to_r to the real part",
      "group": "Complex",
      "spec": "Complex#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_r when the imaginary part is Float 0.0 raises RangeError",
      "group": "Complex",
      "spec": "Complex#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_r when the imaginary part is Rational 0 returns the result of sending #to_r to the real part",
      "group": "Complex",
      "spec": "Complex#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_r when the imaginary part is non-zero raises RangeError",
      "group": "Complex",
      "spec": "Complex#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_r when the imaginary part responds to #== 0 with true returns the result of sending #to_r to the real part",
      "group": "Complex",
      "spec": "Complex#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_s returns 1+0.0i for Complex(1, 0.0)",
      "group": "Complex",
      "spec": "Complex#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_s returns 1+Infinity*i for Complex(1, Infinity)",
      "group": "Complex",
      "spec": "Complex#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_s returns 1+NaN*i for Complex(1, NaN)",
      "group": "Complex",
      "spec": "Complex#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_s returns 1-0.0i for Complex(1, -0.0)",
      "group": "Complex",
      "spec": "Complex#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_s returns 1-Infinity*i for Complex(1, -Infinity)",
      "group": "Complex",
      "spec": "Complex#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_s returns self as String",
      "group": "Complex",
      "spec": "Complex#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex#to_s when self's real component is 0 returns both the real and imaginary component even when the real is 0",
      "group": "Complex",
      "spec": "Complex#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex.polar raises a TypeError when given non real arguments",
      "group": "Complex",
      "spec": "Complex.polar",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex.polar returns a complex number in terms of radius and angle",
      "group": "Complex",
      "spec": "Complex.polar",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex.rect passed Numerics n1 and n2 and at least one responds to #real? with false raises TypeError",
      "group": "Complex",
      "spec": "Complex.rect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex.rect passed Numerics n1 and n2 and at least one responds to #real? with false raises TypeError",
      "group": "Complex",
      "spec": "Complex.rect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex.rect passed Numerics n1 and n2 and at least one responds to #real? with false raises TypeError",
      "group": "Complex",
      "spec": "Complex.rect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex.rect passed Numerics n1 and n2 and both respond to #real? with true returns a Complex with real part n1 and imaginary part n2",
      "group": "Complex",
      "spec": "Complex.rect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex.rect passed a Numeric n which responds to #real? with true returns a Complex with real part n and imaginary part 0",
      "group": "Complex",
      "spec": "Complex.rect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex.rect passed a Numeric which responds to #real? with false raises TypeError",
      "group": "Complex",
      "spec": "Complex.rect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex.rect passed a non-Numeric raises TypeError",
      "group": "Complex",
      "spec": "Complex.rect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex.rectangular passed Numerics n1 and n2 and at least one responds to #real? with false raises TypeError",
      "group": "Complex",
      "spec": "Complex.rectangular",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex.rectangular passed Numerics n1 and n2 and at least one responds to #real? with false raises TypeError",
      "group": "Complex",
      "spec": "Complex.rectangular",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex.rectangular passed Numerics n1 and n2 and at least one responds to #real? with false raises TypeError",
      "group": "Complex",
      "spec": "Complex.rectangular",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex.rectangular passed Numerics n1 and n2 and both respond to #real? with true returns a Complex with real part n1 and imaginary part n2",
      "group": "Complex",
      "spec": "Complex.rectangular",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex.rectangular passed a Numeric n which responds to #real? with true returns a Complex with real part n and imaginary part 0",
      "group": "Complex",
      "spec": "Complex.rectangular",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex.rectangular passed a Numeric which responds to #real? with false raises TypeError",
      "group": "Complex",
      "spec": "Complex.rectangular",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex.rectangular passed a non-Numeric raises TypeError",
      "group": "Complex",
      "spec": "Complex.rectangular",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Complex::I is Complex(0, 1)",
      "group": "Complex::I",
      "spec": "Complex::I",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Creating UnboundMethods there is no difference between Method#unbind and Module#instance_method",
      "group": "Creating",
      "spec": "Creating",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Dir includes Enumerable",
      "group": "Dir",
      "spec": "Dir",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir#initialize calls #to_path on non-String arguments",
      "group": "Dir",
      "spec": "Dir#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir#inspect includes the class name",
      "group": "Dir",
      "spec": "Dir#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir#inspect includes the directory name",
      "group": "Dir",
      "spec": "Dir#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir#inspect returns a String",
      "group": "Dir",
      "spec": "Dir#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.[] ignores symlinks",
      "group": "Dir",
      "spec": "Dir.[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.[] matches multiple recursives",
      "group": "Dir",
      "spec": "Dir.[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.glob accepts a block and yields it with each elements",
      "group": "Dir",
      "spec": "Dir.glob",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.glob calls #to_path to convert multiple patterns",
      "group": "Dir",
      "spec": "Dir.glob",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.glob can take an array of patterns",
      "group": "Dir",
      "spec": "Dir.glob",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.glob handles infinite directory wildcards",
      "group": "Dir",
      "spec": "Dir.glob",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.glob handles simple directory patterns",
      "group": "Dir",
      "spec": "Dir.glob",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.glob handles simple directory patterns applied to non-directories",
      "group": "Dir",
      "spec": "Dir.glob",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.glob handles simple filename patterns",
      "group": "Dir",
      "spec": "Dir.glob",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.glob ignores non-dirs when traversing recursively",
      "group": "Dir",
      "spec": "Dir.glob",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.glob ignores symlinks",
      "group": "Dir",
      "spec": "Dir.glob",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.glob matches a list of paths by concatenating their individual results",
      "group": "Dir",
      "spec": "Dir.glob",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.glob matches any files in the current directory with '**' and option File::FNM_DOTMATCH",
      "group": "Dir",
      "spec": "Dir.glob",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.glob matches both dot and non-dotfiles with '*' and option File::FNM_DOTMATCH",
      "group": "Dir",
      "spec": "Dir.glob",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.glob matches files with any beginning with '*<non-special characters>' and option File::FNM_DOTMATCH",
      "group": "Dir",
      "spec": "Dir.glob",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.glob matches multiple recursives",
      "group": "Dir",
      "spec": "Dir.glob",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.glob matches nothing when given an empty list of paths",
      "group": "Dir",
      "spec": "Dir.glob",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.glob matches the literal character '\\' with option File::FNM_NOESCAPE",
      "group": "Dir",
      "spec": "Dir.glob",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.glob recursively matches any subdirectories except './' or '../' with '**/' and option File::FNM_DOTMATCH",
      "group": "Dir",
      "spec": "Dir.glob",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.glob recursively matches any subdirectories except './' or '../' with '**/' from the current directory and option File::FNM_DOTMATCH",
      "group": "Dir",
      "spec": "Dir.glob",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.glob returns nil for directories current user has no permission to read",
      "group": "Dir",
      "spec": "Dir.glob",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.home raises an ArgumentError if the named user doesn't exist",
      "group": "Dir",
      "spec": "Dir.home",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.home when called with the current user name returns a non-frozen string",
      "group": "Dir",
      "spec": "Dir.home",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.home when called with the current user name returns the named user's home directory, from the user database",
      "group": "Dir",
      "spec": "Dir.home",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.home when called without arguments returns a non-frozen string",
      "group": "Dir",
      "spec": "Dir.home",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.home when called without arguments returns the current user's home directory, reading $HOME first",
      "group": "Dir",
      "spec": "Dir.home",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Dir.pwd correctly handles dirs with unicode characters in them",
      "group": "Dir",
      "spec": "Dir.pwd",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.[] returns nil if the variable isn't found",
      "group": "ENV",
      "spec": "ENV.[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.[] returns only frozen values",
      "group": "ENV",
      "spec": "ENV.[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.[] transcodes from the locale encoding to Encoding.default_internal if set",
      "group": "ENV",
      "spec": "ENV.[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.[] uses the locale encoding if Encoding.default_internal is nil",
      "group": "ENV",
      "spec": "ENV.[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.[]= coerces the key argument with #to_str",
      "group": "ENV",
      "spec": "ENV.[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.[]= coerces the value argument with #to_str",
      "group": "ENV",
      "spec": "ENV.[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.[]= deletes the environment variable when the value is nil",
      "group": "ENV",
      "spec": "ENV.[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.[]= does nothing when the key is not a valid environment variable key and the value is nil",
      "group": "ENV",
      "spec": "ENV.[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.[]= raises Errno::EINVAL when the key contains the '=' character",
      "group": "ENV",
      "spec": "ENV.[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.[]= raises Errno::EINVAL when the key is an empty string",
      "group": "ENV",
      "spec": "ENV.[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.[]= raises TypeError when the key is not coercible to String",
      "group": "ENV",
      "spec": "ENV.[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.[]= raises TypeError when the value is not coercible to String",
      "group": "ENV",
      "spec": "ENV.[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.[]= returns the value",
      "group": "ENV",
      "spec": "ENV.[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.[]= sets the environment variable to the given value",
      "group": "ENV",
      "spec": "ENV.[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.assoc returns an array of the key and value of the environment variable with the given key",
      "group": "ENV",
      "spec": "ENV.assoc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.assoc returns nil if no environment variable with the given key exists",
      "group": "ENV",
      "spec": "ENV.assoc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.assoc returns the key element coerced with #to_str",
      "group": "ENV",
      "spec": "ENV.assoc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.clear deletes all environment variables",
      "group": "ENV",
      "spec": "ENV.clear",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.delete removes the variable from the environment",
      "group": "ENV",
      "spec": "ENV.delete",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.delete returns the previous value",
      "group": "ENV",
      "spec": "ENV.delete",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.delete yields the name to the given block if the named environment variable does not exist",
      "group": "ENV",
      "spec": "ENV.delete",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.delete_if deletes pairs if the block returns true",
      "group": "ENV",
      "spec": "ENV.delete_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.delete_if deletes pairs through enumerator",
      "group": "ENV",
      "spec": "ENV.delete_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.delete_if returns ENV even if nothing deleted",
      "group": "ENV",
      "spec": "ENV.delete_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.delete_if returns an Enumerator if no block given",
      "group": "ENV",
      "spec": "ENV.delete_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.delete_if when no block is given returned Enumerator size returns the enumerable size",
      "group": "ENV",
      "spec": "ENV.delete_if",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.each returns an Enumerator if called without a block",
      "group": "ENV",
      "spec": "ENV.each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.each returns each pair",
      "group": "ENV",
      "spec": "ENV.each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.each when no block is given returned Enumerator size returns the enumerable size",
      "group": "ENV",
      "spec": "ENV.each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.each with encoding transcodes from the locale encoding to Encoding.default_internal if set",
      "group": "ENV",
      "spec": "ENV.each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.each with encoding uses the locale encoding when Encoding.default_internal is nil",
      "group": "ENV",
      "spec": "ENV.each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.each_key returns an Enumerator if called without a block",
      "group": "ENV",
      "spec": "ENV.each_key",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.each_key returns each key",
      "group": "ENV",
      "spec": "ENV.each_key",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.each_key returns keys in the locale encoding",
      "group": "ENV",
      "spec": "ENV.each_key",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.each_key when no block is given returned Enumerator size returns the enumerable size",
      "group": "ENV",
      "spec": "ENV.each_key",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.each_pair returns an Enumerator if called without a block",
      "group": "ENV",
      "spec": "ENV.each_pair",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.each_pair returns each pair",
      "group": "ENV",
      "spec": "ENV.each_pair",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.each_pair when no block is given returned Enumerator size returns the enumerable size",
      "group": "ENV",
      "spec": "ENV.each_pair",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.each_pair with encoding transcodes from the locale encoding to Encoding.default_internal if set",
      "group": "ENV",
      "spec": "ENV.each_pair",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.each_pair with encoding uses the locale encoding when Encoding.default_internal is nil",
      "group": "ENV",
      "spec": "ENV.each_pair",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.each_value returns an Enumerator if called without a block",
      "group": "ENV",
      "spec": "ENV.each_value",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.each_value returns each value",
      "group": "ENV",
      "spec": "ENV.each_value",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.each_value uses the locale encoding",
      "group": "ENV",
      "spec": "ENV.each_value",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.each_value when no block is given returned Enumerator size returns the enumerable size",
      "group": "ENV",
      "spec": "ENV.each_value",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.empty? returns false if not empty",
      "group": "ENV",
      "spec": "ENV.empty?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.empty? returns true if the Environment is empty",
      "group": "ENV",
      "spec": "ENV.empty?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.fetch provides a default value from a block",
      "group": "ENV",
      "spec": "ENV.fetch",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.fetch provides the given default parameter",
      "group": "ENV",
      "spec": "ENV.fetch",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.fetch raises a TypeError if the key is not a String",
      "group": "ENV",
      "spec": "ENV.fetch",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.fetch returns a value",
      "group": "ENV",
      "spec": "ENV.fetch",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.fetch uses the locale encoding",
      "group": "ENV",
      "spec": "ENV.fetch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.fetch warns on block and default parameter given",
      "group": "ENV",
      "spec": "ENV.fetch",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.fetch when the key is not found formats the object with #inspect in the KeyError message",
      "group": "ENV",
      "spec": "ENV.fetch",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.fetch when the key is not found raises a KeyError",
      "group": "ENV",
      "spec": "ENV.fetch",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.fetch when the key is not found sets the Hash as the receiver of KeyError",
      "group": "ENV",
      "spec": "ENV.fetch",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.fetch when the key is not found sets the unmatched key as the key of KeyError",
      "group": "ENV",
      "spec": "ENV.fetch",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.filter returns a Hash of names and values for which block return true",
      "group": "ENV",
      "spec": "ENV.filter",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.filter returns an Enumerator when no block is given",
      "group": "ENV",
      "spec": "ENV.filter",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.filter when no block is given returned Enumerator size returns the enumerable size",
      "group": "ENV",
      "spec": "ENV.filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.filter! removes environment variables for which the block returns true",
      "group": "ENV",
      "spec": "ENV.filter!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.filter! returns an Enumerator if called without a block",
      "group": "ENV",
      "spec": "ENV.filter!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.filter! returns nil if no changes were made",
      "group": "ENV",
      "spec": "ENV.filter!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.filter! returns self if any changes were made",
      "group": "ENV",
      "spec": "ENV.filter!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.filter! when no block is given returned Enumerator size returns the enumerable size",
      "group": "ENV",
      "spec": "ENV.filter!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.has_key? returns false if ENV doesn't include the key",
      "group": "ENV",
      "spec": "ENV.has_key?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.has_key? returns true if ENV has the key",
      "group": "ENV",
      "spec": "ENV.has_key?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.has_value? returns false if ENV doesn't have the value",
      "group": "ENV",
      "spec": "ENV.has_value?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.has_value? returns true if ENV has the value",
      "group": "ENV",
      "spec": "ENV.has_value?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.include? returns false if ENV doesn't include the key",
      "group": "ENV",
      "spec": "ENV.include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.include? returns true if ENV has the key",
      "group": "ENV",
      "spec": "ENV.include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.index returns nil if the passed value is not found",
      "group": "ENV",
      "spec": "ENV.index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.index returns the index associated with the passed value",
      "group": "ENV",
      "spec": "ENV.index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.inspect returns a String that looks like a Hash with real data",
      "group": "ENV",
      "spec": "ENV.inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.invert returns a hash with ENV.keys as the values and vice versa",
      "group": "ENV",
      "spec": "ENV.invert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.keep_if deletes pairs if the block returns false",
      "group": "ENV",
      "spec": "ENV.keep_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.keep_if deletes pairs through enumerator",
      "group": "ENV",
      "spec": "ENV.keep_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.keep_if returns ENV even if nothing deleted",
      "group": "ENV",
      "spec": "ENV.keep_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.keep_if returns an Enumerator if no block given",
      "group": "ENV",
      "spec": "ENV.keep_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.keep_if when no block is given returned Enumerator size returns the enumerable size",
      "group": "ENV",
      "spec": "ENV.keep_if",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.key returns nil if the passed value is not found",
      "group": "ENV",
      "spec": "ENV.key",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.key returns the index associated with the passed value",
      "group": "ENV",
      "spec": "ENV.key",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.key? returns false if ENV doesn't include the key",
      "group": "ENV",
      "spec": "ENV.key?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.key? returns true if ENV has the key",
      "group": "ENV",
      "spec": "ENV.key?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.keys returns all the keys",
      "group": "ENV",
      "spec": "ENV.keys",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.keys returns the keys in the locale encoding",
      "group": "ENV",
      "spec": "ENV.keys",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.length returns the number of ENV entries",
      "group": "ENV",
      "spec": "ENV.length",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.member? returns false if ENV doesn't include the key",
      "group": "ENV",
      "spec": "ENV.member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.member? returns true if ENV has the key",
      "group": "ENV",
      "spec": "ENV.member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.rassoc returns an array of the key and value of the environment variable with the given value",
      "group": "ENV",
      "spec": "ENV.rassoc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.rassoc returns nil if no environment variable with the given value exists",
      "group": "ENV",
      "spec": "ENV.rassoc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.rassoc returns the value element coerced with #to_str",
      "group": "ENV",
      "spec": "ENV.rassoc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.reject doesn't raise if empty",
      "group": "ENV",
      "spec": "ENV.reject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.reject rejects entries based on key",
      "group": "ENV",
      "spec": "ENV.reject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.reject rejects entries based on value",
      "group": "ENV",
      "spec": "ENV.reject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.reject returns a Hash",
      "group": "ENV",
      "spec": "ENV.reject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.reject returns an Enumerator if called without a block",
      "group": "ENV",
      "spec": "ENV.reject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.reject when no block is given returned Enumerator size returns the enumerable size",
      "group": "ENV",
      "spec": "ENV.reject",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.reject! doesn't raise if empty",
      "group": "ENV",
      "spec": "ENV.reject!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.reject! rejects entries based on key",
      "group": "ENV",
      "spec": "ENV.reject!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.reject! rejects entries based on value",
      "group": "ENV",
      "spec": "ENV.reject!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.reject! returns an Enumerator if called without a block",
      "group": "ENV",
      "spec": "ENV.reject!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.reject! returns itself or nil",
      "group": "ENV",
      "spec": "ENV.reject!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.reject! when no block is given returned Enumerator size returns the enumerable size",
      "group": "ENV",
      "spec": "ENV.reject!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.replace replaces ENV with a Hash",
      "group": "ENV",
      "spec": "ENV.replace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.select returns a Hash of names and values for which block return true",
      "group": "ENV",
      "spec": "ENV.select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.select returns an Enumerator when no block is given",
      "group": "ENV",
      "spec": "ENV.select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.select when no block is given returned Enumerator size returns the enumerable size",
      "group": "ENV",
      "spec": "ENV.select",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.select! removes environment variables for which the block returns true",
      "group": "ENV",
      "spec": "ENV.select!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.select! returns an Enumerator if called without a block",
      "group": "ENV",
      "spec": "ENV.select!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.select! returns nil if no changes were made",
      "group": "ENV",
      "spec": "ENV.select!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.select! returns self if any changes were made",
      "group": "ENV",
      "spec": "ENV.select!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.select! when no block is given returned Enumerator size returns the enumerable size",
      "group": "ENV",
      "spec": "ENV.select!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.shift returns a pair and deletes it",
      "group": "ENV",
      "spec": "ENV.shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.shift returns nil if ENV.empty?",
      "group": "ENV",
      "spec": "ENV.shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.shift transcodes from the locale encoding to Encoding.default_internal if set",
      "group": "ENV",
      "spec": "ENV.shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.shift uses the locale encoding if Encoding.default_internal is nil",
      "group": "ENV",
      "spec": "ENV.shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.size returns the number of ENV entries",
      "group": "ENV",
      "spec": "ENV.size",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.store coerces the key argument with #to_str",
      "group": "ENV",
      "spec": "ENV.store",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.store coerces the value argument with #to_str",
      "group": "ENV",
      "spec": "ENV.store",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.store deletes the environment variable when the value is nil",
      "group": "ENV",
      "spec": "ENV.store",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.store does nothing when the key is not a valid environment variable key and the value is nil",
      "group": "ENV",
      "spec": "ENV.store",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.store raises Errno::EINVAL when the key contains the '=' character",
      "group": "ENV",
      "spec": "ENV.store",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.store raises Errno::EINVAL when the key is an empty string",
      "group": "ENV",
      "spec": "ENV.store",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.store raises TypeError when the key is not coercible to String",
      "group": "ENV",
      "spec": "ENV.store",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.store raises TypeError when the value is not coercible to String",
      "group": "ENV",
      "spec": "ENV.store",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.store returns the value",
      "group": "ENV",
      "spec": "ENV.store",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.store sets the environment variable to the given value",
      "group": "ENV",
      "spec": "ENV.store",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.to_a returns the ENV as an array",
      "group": "ENV",
      "spec": "ENV.to_a",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.to_a returns the entries in the locale encoding",
      "group": "ENV",
      "spec": "ENV.to_a",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.to_h duplicates the ENV when converting to a Hash",
      "group": "ENV",
      "spec": "ENV.to_h",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.to_h returns the ENV as a hash",
      "group": "ENV",
      "spec": "ENV.to_h",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.to_h uses the locale encoding for keys",
      "group": "ENV",
      "spec": "ENV.to_h",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.to_h uses the locale encoding for values",
      "group": "ENV",
      "spec": "ENV.to_h",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.to_h with block coerces returned pair to Array with #to_ary",
      "group": "ENV",
      "spec": "ENV.to_h",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.to_h with block converts [key, value] pairs returned by the block to a hash",
      "group": "ENV",
      "spec": "ENV.to_h",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.to_h with block does not coerce returned pair to Array with #to_a",
      "group": "ENV",
      "spec": "ENV.to_h",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.to_h with block raises ArgumentError if block returns longer or shorter array",
      "group": "ENV",
      "spec": "ENV.to_h",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.to_h with block raises TypeError if block returns something other than Array",
      "group": "ENV",
      "spec": "ENV.to_h",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.to_hash duplicates the ENV when converting to a Hash",
      "group": "ENV",
      "spec": "ENV.to_hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.to_hash returns the ENV as a hash",
      "group": "ENV",
      "spec": "ENV.to_hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.to_hash uses the locale encoding for keys",
      "group": "ENV",
      "spec": "ENV.to_hash",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.to_hash uses the locale encoding for values",
      "group": "ENV",
      "spec": "ENV.to_hash",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.to_s returns \"ENV\"",
      "group": "ENV",
      "spec": "ENV.to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.update adds the parameter hash to ENV",
      "group": "ENV",
      "spec": "ENV.update",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.update yields key, the old value and the new value when replacing entries",
      "group": "ENV",
      "spec": "ENV.update",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.value? returns false if ENV doesn't have the value",
      "group": "ENV",
      "spec": "ENV.value?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.value? returns true if ENV has the value",
      "group": "ENV",
      "spec": "ENV.value?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.values returns an array of the values",
      "group": "ENV",
      "spec": "ENV.values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ENV.values uses the locale encoding",
      "group": "ENV",
      "spec": "ENV.values",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.values_at returns an array of the values referenced by the parameters as keys",
      "group": "ENV",
      "spec": "ENV.values_at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:ENV.values_at uses the locale encoding",
      "group": "ENV",
      "spec": "ENV.values_at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding#_dump needs to be reviewed for spec completeness",
      "group": "Encoding",
      "spec": "Encoding#_dump",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Encoding#ascii_compatible? returns false if self does not represent an ASCII-compatible encoding",
      "group": "Encoding",
      "spec": "Encoding#ascii_compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding#ascii_compatible? returns true if self represents an ASCII-compatible encoding",
      "group": "Encoding",
      "spec": "Encoding#ascii_compatible?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Encoding#dummy? returns false for proper encodings",
      "group": "Encoding",
      "spec": "Encoding#dummy?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding#dummy? returns true for dummy encodings",
      "group": "Encoding",
      "spec": "Encoding#dummy?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding#inspect returns #<Encoding:name (dummy)> for a dummy encoding named 'name'",
      "group": "Encoding",
      "spec": "Encoding#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding#inspect returns #<Encoding:name> for a non-dummy encoding named 'name'",
      "group": "Encoding",
      "spec": "Encoding#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding#inspect returns a String",
      "group": "Encoding",
      "spec": "Encoding#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Encoding#name returns a String",
      "group": "Encoding",
      "spec": "Encoding#name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding#name uniquely identifies an encoding",
      "group": "Encoding",
      "spec": "Encoding#name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding#names includes any aliases the encoding has",
      "group": "Encoding",
      "spec": "Encoding#names",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding#names returns #name as the first value",
      "group": "Encoding",
      "spec": "Encoding#names",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding#names returns an Array",
      "group": "Encoding",
      "spec": "Encoding#names",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding#names returns names as Strings",
      "group": "Encoding",
      "spec": "Encoding#names",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding#replicate returns a replica of ASCII",
      "group": "Encoding",
      "spec": "Encoding#replicate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding#replicate returns a replica of ISO-2022-JP",
      "group": "Encoding",
      "spec": "Encoding#replicate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding#replicate returns a replica of UTF-16BE",
      "group": "Encoding",
      "spec": "Encoding#replicate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding#replicate returns a replica of UTF-8",
      "group": "Encoding",
      "spec": "Encoding#replicate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding#to_s returns a String",
      "group": "Encoding",
      "spec": "Encoding#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding#to_s uniquely identifies an encoding",
      "group": "Encoding",
      "spec": "Encoding#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding._load needs to be reviewed for spec completeness",
      "group": "Encoding",
      "spec": "Encoding._load",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Encoding.aliases has Strings as keys",
      "group": "Encoding",
      "spec": "Encoding.aliases",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.aliases has Strings as values",
      "group": "Encoding",
      "spec": "Encoding.aliases",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.aliases has a 'locale' key and its value equals the name of the encoding found by the locale charmap",
      "group": "Encoding",
      "spec": "Encoding.aliases",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.aliases has alias names as its keys",
      "group": "Encoding",
      "spec": "Encoding.aliases",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.aliases has an 'external' key with the external default encoding as its value",
      "group": "Encoding",
      "spec": "Encoding.aliases",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.aliases has the names of the aliased encoding as its values",
      "group": "Encoding",
      "spec": "Encoding.aliases",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.aliases only contains valid aliased encodings",
      "group": "Encoding",
      "spec": "Encoding.aliases",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.aliases returns a Hash",
      "group": "Encoding",
      "spec": "Encoding.aliases",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? Encoding, Encoding returns nil if one of the encodings is a dummy encoding",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? Encoding, Encoding returns nil if one of the encodings is not US-ASCII",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? Encoding, Encoding returns the Encoding if both are the same",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? Encoding, Encoding returns the first if the second is US-ASCII",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? Object, Object returns nil for Object, Regexp",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? Object, Object returns nil for Object, String",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? Object, Object returns nil for Object, Symbol",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? Object, Object returns nil for Regexp, Object",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? Object, Object returns nil for String, Object",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? Object, Object returns nil for Symbol, Object",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? Regexp, Regexp returns US-ASCII if both are US-ASCII",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? Regexp, Regexp returns the first's Encoding if it is not US-ASCII and not ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? Regexp, String returns US-ASCII if both are US-ASCII",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? Regexp, Symbol returns US-ASCII if both are US-ASCII",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? Regexp, Symbol returns the first's Encoding if it is not US-ASCII and not ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, Encoding returns nil if the Encoding is not ASCII compatible",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, Encoding returns nil if the String's encoding is ASCII compatible but the string is not ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, Encoding returns nil if the String's encoding is not ASCII compatible",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, Encoding returns the Encoding if the String's encoding is ASCII compatible and the String is ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, Encoding returns the String's encoding if the Encoding is US-ASCII",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, Regexp returns US-ASCII if both are US-ASCII",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, Regexp returns the String's Encoding if it is not US-ASCII but both are ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, Regexp returns the String's Encoding if the String is not ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first String is empty and the second is not and the first's Encoding is ASCII compatible returns the first's encoding when the second String is ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first String is empty and the second is not and the first's Encoding is ASCII compatible returns the second's encoding when the second String is not ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first String is empty and the second is not when the first's Encoding is not ASCII compatible returns the second string's encoding",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is ASCII compatible and ASCII only returns nil if the second's Encoding is not ASCII compatible",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is ASCII compatible and ASCII only returns the first's Encoding if the second is ASCII compatible and ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is ASCII compatible and ASCII only returns the first's Encoding if the second is ASCII compatible and ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is ASCII compatible and ASCII only returns the second's Encoding if the second is ASCII compatible but not ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is ASCII compatible but not ASCII only returns nil if the second encoding is ASCII compatible but neither String's encoding is ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is ASCII compatible but not ASCII only returns the first's Encoding if the second's is UTF-8 and ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is ASCII compatible but not ASCII only returns the first's Encoding if the second's is valid US-ASCII",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is invalid returns nil when the second's Encoding is BINARY but not ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is invalid returns nil when the second's Encoding is invalid and ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is invalid returns nil when the second's Encoding is invalid and not ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is invalid returns the Encoding when the second's Encoding is invalid but the same as the first",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is invalid returns the first's Encoding when the second String is ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is invalid returns the first's Encoding when the second's Encoding is US-ASCII",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is not ASCII compatible returns nil when the second String is BINARY and ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is not ASCII compatible returns nil when the second String is BINARY but not ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is not ASCII compatible returns nil when the second String is US-ASCII",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is not ASCII compatible returns the Encoding when the second's Encoding is not ASCII compatible but the same as the first's Encoding",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is valid US-ASCII returns BINARY if the second String is BINARY but not ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is valid US-ASCII returns US-ASCII if the second String is BINARY and ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is valid US-ASCII returns US-ASCII if the second String is UTF-8 and ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is valid US-ASCII returns US-ASCII when the second's is US-ASCII",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the first's Encoding is valid US-ASCII returns UTF-8 if the second String is UTF-8 but not ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, String when the second String is empty returns the first Encoding",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, Symbol returns US-ASCII if both are ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, Symbol returns the String's Encoding if it is not US-ASCII but both are ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? String, Symbol returns the String's Encoding if the String is not ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? Symbol, Regexp returns US-ASCII if both are US-ASCII",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? Symbol, Regexp returns the Regexp's Encoding if it is not US-ASCII and not ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? Symbol, String returns US-ASCII if both are ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? Symbol, Symbol returns US-ASCII if both are US-ASCII",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.compatible? Symbol, Symbol returns the first's Encoding if it is not ASCII only",
      "group": "Encoding",
      "spec": "Encoding.compatible?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.default_external returns an Encoding object",
      "group": "Encoding",
      "spec": "Encoding.default_external",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Encoding.default_external returns the default external encoding",
      "group": "Encoding",
      "spec": "Encoding.default_external",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.default_external= also sets the filesystem encoding",
      "group": "Encoding",
      "spec": "Encoding.default_external=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.default_external= calls #to_s on arguments that are neither Strings nor Encodings",
      "group": "Encoding",
      "spec": "Encoding.default_external=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.default_external= can accept a name of an encoding as a String",
      "group": "Encoding",
      "spec": "Encoding.default_external=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.default_external= raises a TypeError unless the argument is an Encoding or convertible to a String",
      "group": "Encoding",
      "spec": "Encoding.default_external=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.default_external= raises an ArgumentError if the argument is nil",
      "group": "Encoding",
      "spec": "Encoding.default_external=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.default_external= sets the default external encoding",
      "group": "Encoding",
      "spec": "Encoding.default_external=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.default_internal is nil by default",
      "group": "Encoding",
      "spec": "Encoding.default_internal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.default_internal returns an Encoding object if a default internal encoding is set",
      "group": "Encoding",
      "spec": "Encoding.default_internal",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Encoding.default_internal returns nil if no default internal encoding is set",
      "group": "Encoding",
      "spec": "Encoding.default_internal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.default_internal returns the default internal encoding",
      "group": "Encoding",
      "spec": "Encoding.default_internal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.default_internal= accepts an argument of nil to unset the default internal encoding",
      "group": "Encoding",
      "spec": "Encoding.default_internal=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.default_internal= calls #to_str to convert an object to a String",
      "group": "Encoding",
      "spec": "Encoding.default_internal=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.default_internal= can accept a name of an encoding as a String",
      "group": "Encoding",
      "spec": "Encoding.default_internal=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.default_internal= raises a TypeError if #to_str does not return a String",
      "group": "Encoding",
      "spec": "Encoding.default_internal=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.default_internal= raises a TypeError when passed an object not providing #to_str",
      "group": "Encoding",
      "spec": "Encoding.default_internal=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.default_internal= sets the default internal encoding",
      "group": "Encoding",
      "spec": "Encoding.default_internal=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.list does not include any alias names",
      "group": "Encoding",
      "spec": "Encoding.list",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.list includes all aliased encodings",
      "group": "Encoding",
      "spec": "Encoding.list",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.list includes dummy encodings",
      "group": "Encoding",
      "spec": "Encoding.list",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.list includes the default external encoding",
      "group": "Encoding",
      "spec": "Encoding.list",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.list returns an Array",
      "group": "Encoding",
      "spec": "Encoding.list",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.list returns an Array of Encoding objects",
      "group": "Encoding",
      "spec": "Encoding.list",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.list returns each encoding only once",
      "group": "Encoding",
      "spec": "Encoding.list",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.list updates the list when #find is used to load a new encoding",
      "group": "Encoding",
      "spec": "Encoding.list",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Encoding.locale_charmap is unaffected by assigning to ENV['LC_ALL'] in the same process",
      "group": "Encoding",
      "spec": "Encoding.locale_charmap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.locale_charmap returns a String",
      "group": "Encoding",
      "spec": "Encoding.locale_charmap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.locale_charmap returns a value based on the LC_ALL environment variable",
      "group": "Encoding",
      "spec": "Encoding.locale_charmap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.name_list includes all aliases",
      "group": "Encoding",
      "spec": "Encoding.name_list",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.name_list includes all non-dummy encodings",
      "group": "Encoding",
      "spec": "Encoding.name_list",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.name_list returns an Array",
      "group": "Encoding",
      "spec": "Encoding.name_list",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding.name_list returns encoding names as Strings",
      "group": "Encoding",
      "spec": "Encoding.name_list",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#convert allows Strings of different encodings to the source encoding",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#convert raises UndefinedConversionError if the String contains characters invalid for the target encoding",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#convert raises an ArgumentError if called on a finished stream",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#convert returns a String",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#convert reuses the given encoding pair if called multiple times",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#convert sets the encoding of the result to the target encoding",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#convert transcodes the given String to the target encoding",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#convpath indicates if crlf_newline conversion would occur",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#convpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#convpath returns an Array with a single element if there is a direct converter",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#convpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#convpath returns multiple encoding pairs when direct conversion is impossible",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#convpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#destination_encoding returns the destination encoding as an Encoding object",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#destination_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#finish returns a String",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#finish",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#finish returns a String in the destination encoding",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#finish",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#finish returns an empty String if self was not given anything to convert",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#finish",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#finish returns an empty String if there is nothing more to convert",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#finish",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#finish returns an empty String on subsequent invocations",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#finish",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#finish returns the last part of the converted String if it hasn't already",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#finish",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#insert_output needs to be reviewed for spec completeness",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#insert_output",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#inspect includes the source and destination encodings in the return value",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#last_error returns an Encoding::InvalidByteSequenceError when #primitive_convert last returned :incomplete_input",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#last_error",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#last_error returns an Encoding::InvalidByteSequenceError when #primitive_convert last returned :invalid_byte_sequence",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#last_error",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#last_error returns an Encoding::InvalidByteSequenceError when the last call to #convert produced one",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#last_error",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#last_error returns an Encoding::UndefinedConversionError when #primitive_convert last returned :undefined_conversion",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#last_error",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#last_error returns an Encoding::UndefinedConversionError when the last call to #convert produced one",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#last_error",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#last_error returns nil if the last conversion succeeded but the penultimate failed",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#last_error",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#last_error returns nil when #primitive_convert last returned :destination_buffer_full",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#last_error",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#last_error returns nil when #primitive_convert last returned :finished",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#last_error",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#last_error returns nil when the last conversion did not produce an error",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#last_error",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#last_error returns nil when the no conversion has been attempted",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#last_error",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#last_error returns the last error of #convert with a message showing the transcoding path",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#last_error",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert accepts a String as the source buffer",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert accepts a nil source buffer",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert accepts an integer for the destination byte offset",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert accepts an integer for the destination bytesize",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert accepts an options hash",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert accepts nil for the destination byte offset",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert accepts nil for the destination bytesize",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert allows a destination buffer of unlimited size if destination bytesize is nil",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert allows a destination bytesize value greater than the bytesize of the source buffer",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert allows a destination bytesize value less than the bytesize of the source buffer",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert calls #to_int to convert the destination byte offset",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert calls #to_int to convert the destination byte size",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert clears the source buffer when returning :destination_buffer_full",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert clears the source buffer when returning :finished",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert clears the source buffer when returning :incomplete_input",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert clears the source buffer when returning :source_buffer_empty",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert keeps removing invalid bytes from the source buffer",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert raises an ArgumentError if the destination byte offset is greater than the bytesize of the destination buffer",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert removes consumed and erroneous bytes from the source buffer when returning :invalid_byte_sequence",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert removes the undefined part from the source buffer when returning :undefined_conversion",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert returns :destination_buffer_full when the destination buffer is too small",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert returns :finished when the conversion succeeded",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert returns :incomplete_input when source buffer ends unexpectedly and :partial_input isn't specified",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert returns :invalid_byte_sequence when an invalid byte sequence was found in the source buffer",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert returns :source_buffer_empty when source buffer ends unexpectedly and :partial_input is true",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert returns :undefined_conversion when a character in the source buffer is not representable in the output encoding",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert reuses read-again bytes after the first error",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert sets the destination buffer's encoding to the destination encoding if the conversion failed",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert sets the destination buffer's encoding to the destination encoding if the conversion succeeded",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert uses destination bytesize as the maximum bytesize of the destination buffer",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_convert uses the destination byte offset to determine where to write the result in the destination buffer",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_errinfo returns [:destination_buffer_full,nil,nil,nil,nil] when #primitive_convert last returned :destination_buffer_full",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_errinfo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_errinfo returns [:finished,nil,nil,nil,nil] when #primitive_convert last returned :finished",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_errinfo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_errinfo returns [:source_buffer_empty,nil,nil,nil, nil] when #convert last succeeded",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_errinfo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_errinfo returns [:source_buffer_empty,nil,nil,nil,nil] when no conversion has been attempted",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_errinfo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_errinfo returns the state, source encoding, target encoding, and erroneous bytes when #primitive_convert last returned :incomplete_input",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_errinfo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_errinfo returns the state, source encoding, target encoding, and the erroneous bytes when #primitive_convert last returned :undefined_conversion",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_errinfo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_errinfo returns the state, source encoding, target encoding, erroneous bytes, and the read-again bytes when #convert last raised InvalidByteSequenceError",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_errinfo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_errinfo returns the state, source encoding, target encoding, erroneous bytes, and the read-again bytes when #finish last raised InvalidByteSequenceError",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_errinfo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_errinfo returns the state, source encoding, target encoding, erroneous bytes, and the read-again bytes when #primitive_convert last returned :invalid_byte_sequence",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_errinfo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#primitive_errinfo returns the status of the last primitive conversion, even if it was successful and the previous one wasn't",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#primitive_errinfo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#putback accepts an integer argument corresponding to the number of bytes to be put back",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#putback",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#putback allows conversion to be resumed after an :invalid_byte_sequence",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#putback",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#putback returns a String",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#putback",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#putback returns a String in the source encoding",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#putback",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#putback returns an empty String when there are no more bytes to put back",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#putback",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#putback returns the bytes buffered due to an :invalid_byte_sequence error",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#putback",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#replacement returns '?' in US-ASCII when the destination encoding is not UTF-8",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#replacement",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#replacement returns \\uFFFD when the destination encoding is UTF-8",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#replacement",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#replacement= accepts a String argument",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#replacement=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#replacement= accepts a String argument of arbitrary length",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#replacement=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#replacement= does not change the replacement character if the argument cannot be converted into the destination encoding",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#replacement=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#replacement= raises a TypeError if assigned a non-String argument",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#replacement=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#replacement= raises an UndefinedConversionError is the argument cannot be converted into the destination encoding",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#replacement=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#replacement= sets #replacement",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#replacement=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#replacement= uses the replacement character",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#replacement=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter#source_encoding returns the source encoding as an Encoding object",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter#source_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.asciicompat_encoding accepts an Encoding object as an argument",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.asciicompat_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.asciicompat_encoding accepts an encoding name as a String argument",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.asciicompat_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.asciicompat_encoding coerces non-String/Encoding objects with #to_str",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.asciicompat_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.asciicompat_encoding handles encoding names who resolve to nil encodings",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.asciicompat_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.asciicompat_encoding returns a corresponding ASCII compatible encoding for ASCII-incompatible encodings",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.asciicompat_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.asciicompat_encoding returns nil when the given encoding is ASCII compatible",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.asciicompat_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.new accepts a String for the destination encoding",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.new accepts a String for the source encoding",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.new accepts an Encoding object for the destination encoding",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.new accepts an Encoding object for the source encoding",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.new accepts an empty String for the replacement object",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.new calls #to_hash to convert the options argument to a Hash if not a Fixnum",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.new calls #to_str to convert the destination encoding argument to an encoding name",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.new calls #to_str to convert the replacement object to a String",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.new calls #to_str to convert the source encoding argument to an encoding name",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.new raises a TypeError if #to_str does not return a String",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.new raises a TypeError if passed a Fixnum for the replacement object",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.new raises a TypeError if passed false for the replacement object",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.new raises a TypeError if passed true for the replacement object",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.new raises an Encoding::ConverterNotFoundError if both encodings are the same",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.new sets replacement from the options Hash",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.new when passed nil for the replacement object when the destination encoding is not UTF-8 sets the replacement String encoding to US-ASCII",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.new when passed nil for the replacement object when the destination encoding is not UTF-8 sets the replacement String encoding to UTF-8",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.new when passed nil for the replacement object when the destination encoding is not UTF-8 sets the replacement String to '?'",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.new when passed nil for the replacement object when the destination encoding is not UTF-8 sets the replacement String to '\\uFFFD'",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.search_convpath indicates if crlf_newline conversion would occur",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.search_convpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.search_convpath raises an Encoding::ConverterNotFoundError if no conversion path exists",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.search_convpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.search_convpath returns an Array with a single element if there is a direct converter",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.search_convpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter.search_convpath returns multiple encoding pairs when direct conversion is impossible",
      "group": "Encoding::Converter",
      "spec": "Encoding::Converter.search_convpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::AFTER_OUTPUT exists",
      "group": "Encoding::Converter::AFTER_OUTPUT",
      "spec": "Encoding::Converter::AFTER_OUTPUT",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::AFTER_OUTPUT has a Fixnum value",
      "group": "Encoding::Converter::AFTER_OUTPUT",
      "spec": "Encoding::Converter::AFTER_OUTPUT",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::CRLF_NEWLINE_DECORATOR exists",
      "group": "Encoding::Converter::CRLF_NEWLINE_DECORATOR",
      "spec": "Encoding::Converter::CRLF_NEWLINE_DECORATOR",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::CRLF_NEWLINE_DECORATOR has a Fixnum value",
      "group": "Encoding::Converter::CRLF_NEWLINE_DECORATOR",
      "spec": "Encoding::Converter::CRLF_NEWLINE_DECORATOR",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::CR_NEWLINE_DECORATOR exists",
      "group": "Encoding::Converter::CR_NEWLINE_DECORATOR",
      "spec": "Encoding::Converter::CR_NEWLINE_DECORATOR",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::CR_NEWLINE_DECORATOR has a Fixnum value",
      "group": "Encoding::Converter::CR_NEWLINE_DECORATOR",
      "spec": "Encoding::Converter::CR_NEWLINE_DECORATOR",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::INVALID_MASK exists",
      "group": "Encoding::Converter::INVALID_MASK",
      "spec": "Encoding::Converter::INVALID_MASK",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::INVALID_MASK has a Fixnum value",
      "group": "Encoding::Converter::INVALID_MASK",
      "spec": "Encoding::Converter::INVALID_MASK",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::INVALID_REPLACE exists",
      "group": "Encoding::Converter::INVALID_REPLACE",
      "spec": "Encoding::Converter::INVALID_REPLACE",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::INVALID_REPLACE has a Fixnum value",
      "group": "Encoding::Converter::INVALID_REPLACE",
      "spec": "Encoding::Converter::INVALID_REPLACE",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::PARTIAL_INPUT exists",
      "group": "Encoding::Converter::PARTIAL_INPUT",
      "spec": "Encoding::Converter::PARTIAL_INPUT",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::PARTIAL_INPUT has a Fixnum value",
      "group": "Encoding::Converter::PARTIAL_INPUT",
      "spec": "Encoding::Converter::PARTIAL_INPUT",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::UNDEF_HEX_CHARREF exists",
      "group": "Encoding::Converter::UNDEF_HEX_CHARREF",
      "spec": "Encoding::Converter::UNDEF_HEX_CHARREF",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::UNDEF_HEX_CHARREF has a Fixnum value",
      "group": "Encoding::Converter::UNDEF_HEX_CHARREF",
      "spec": "Encoding::Converter::UNDEF_HEX_CHARREF",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::UNDEF_MASK exists",
      "group": "Encoding::Converter::UNDEF_MASK",
      "spec": "Encoding::Converter::UNDEF_MASK",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::UNDEF_MASK has a Fixnum value",
      "group": "Encoding::Converter::UNDEF_MASK",
      "spec": "Encoding::Converter::UNDEF_MASK",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::UNDEF_REPLACE exists",
      "group": "Encoding::Converter::UNDEF_REPLACE",
      "spec": "Encoding::Converter::UNDEF_REPLACE",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::UNDEF_REPLACE has a Fixnum value",
      "group": "Encoding::Converter::UNDEF_REPLACE",
      "spec": "Encoding::Converter::UNDEF_REPLACE",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::UNIVERSAL_NEWLINE_DECORATOR exists",
      "group": "Encoding::Converter::UNIVERSAL_NEWLINE_DECORATOR",
      "spec": "Encoding::Converter::UNIVERSAL_NEWLINE_DECORATOR",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::UNIVERSAL_NEWLINE_DECORATOR has a Fixnum value",
      "group": "Encoding::Converter::UNIVERSAL_NEWLINE_DECORATOR",
      "spec": "Encoding::Converter::UNIVERSAL_NEWLINE_DECORATOR",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::XML_ATTR_CONTENT_DECORATOR exists",
      "group": "Encoding::Converter::XML_ATTR_CONTENT_DECORATOR",
      "spec": "Encoding::Converter::XML_ATTR_CONTENT_DECORATOR",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::XML_ATTR_CONTENT_DECORATOR has a Fixnum value",
      "group": "Encoding::Converter::XML_ATTR_CONTENT_DECORATOR",
      "spec": "Encoding::Converter::XML_ATTR_CONTENT_DECORATOR",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::XML_ATTR_QUOTE_DECORATOR exists",
      "group": "Encoding::Converter::XML_ATTR_QUOTE_DECORATOR",
      "spec": "Encoding::Converter::XML_ATTR_QUOTE_DECORATOR",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::XML_ATTR_QUOTE_DECORATOR has a Fixnum value",
      "group": "Encoding::Converter::XML_ATTR_QUOTE_DECORATOR",
      "spec": "Encoding::Converter::XML_ATTR_QUOTE_DECORATOR",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::XML_TEXT_DECORATOR exists",
      "group": "Encoding::Converter::XML_TEXT_DECORATOR",
      "spec": "Encoding::Converter::XML_TEXT_DECORATOR",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::Converter::XML_TEXT_DECORATOR has a Fixnum value",
      "group": "Encoding::Converter::XML_TEXT_DECORATOR",
      "spec": "Encoding::Converter::XML_TEXT_DECORATOR",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#destination_encoding is equal to the destination encoding of the object that raised it",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#destination_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#destination_encoding needs to be reviewed for spec completeness",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#destination_encoding",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#destination_encoding returns an Encoding object",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#destination_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#destination_encoding_name is equal to the destination encoding name of the object that raised it",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#destination_encoding_name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#destination_encoding_name needs to be reviewed for spec completeness",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#destination_encoding_name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#destination_encoding_name returns a String",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#destination_encoding_name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#error_bytes needs to be reviewed for spec completeness",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#error_bytes",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#error_bytes returns a String",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#error_bytes",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#error_bytes returns the bytes that caused the exception",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#error_bytes",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#error_bytes uses BINARY as the encoding",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#error_bytes",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#incomplete_input? needs to be reviewed for spec completeness",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#incomplete_input?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#incomplete_input? returns false if #primitive_convert returned :invalid_byte_sequence for the same data",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#incomplete_input?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#incomplete_input? returns nil by default",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#incomplete_input?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#incomplete_input? returns true if #primitive_convert returned :incomplete_input for the same data",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#incomplete_input?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#readagain_bytes needs to be reviewed for spec completeness",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#readagain_bytes",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#readagain_bytes returns a String",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#readagain_bytes",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#readagain_bytes returns the bytes to be read again",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#readagain_bytes",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#readagain_bytes uses BINARY as the encoding",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#readagain_bytes",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#source_encoding is equal to the source encoding at the stage of the conversion path where the error occurred",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#source_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#source_encoding is equal to the source encoding of the object that raised it",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#source_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#source_encoding needs to be reviewed for spec completeness",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#source_encoding",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#source_encoding returns an Encoding object",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#source_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::InvalidByteSequenceError#source_encoding_name needs to be reviewed for spec completeness",
      "group": "Encoding::InvalidByteSequenceError",
      "spec": "Encoding::InvalidByteSequenceError#source_encoding_name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Encoding::UndefinedConversionError#destination_encoding is equal to the destination encoding of the object that raised it",
      "group": "Encoding::UndefinedConversionError",
      "spec": "Encoding::UndefinedConversionError#destination_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::UndefinedConversionError#destination_encoding needs to be reviewed for spec completeness",
      "group": "Encoding::UndefinedConversionError",
      "spec": "Encoding::UndefinedConversionError#destination_encoding",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Encoding::UndefinedConversionError#destination_encoding returns an Encoding object",
      "group": "Encoding::UndefinedConversionError",
      "spec": "Encoding::UndefinedConversionError#destination_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::UndefinedConversionError#destination_encoding_name is equal to the destination encoding name of the object that raised it",
      "group": "Encoding::UndefinedConversionError",
      "spec": "Encoding::UndefinedConversionError#destination_encoding_name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::UndefinedConversionError#destination_encoding_name needs to be reviewed for spec completeness",
      "group": "Encoding::UndefinedConversionError",
      "spec": "Encoding::UndefinedConversionError#destination_encoding_name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Encoding::UndefinedConversionError#destination_encoding_name returns a String",
      "group": "Encoding::UndefinedConversionError",
      "spec": "Encoding::UndefinedConversionError#destination_encoding_name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::UndefinedConversionError#error_char needs to be reviewed for spec completeness",
      "group": "Encoding::UndefinedConversionError",
      "spec": "Encoding::UndefinedConversionError#error_char",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Encoding::UndefinedConversionError#error_char returns a String",
      "group": "Encoding::UndefinedConversionError",
      "spec": "Encoding::UndefinedConversionError#error_char",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::UndefinedConversionError#error_char returns the one-character String that caused the exception",
      "group": "Encoding::UndefinedConversionError",
      "spec": "Encoding::UndefinedConversionError#error_char",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::UndefinedConversionError#error_char uses the source encoding",
      "group": "Encoding::UndefinedConversionError",
      "spec": "Encoding::UndefinedConversionError#error_char",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::UndefinedConversionError#source_encoding is equal to the source encoding at the stage of the conversion path where the error occurred",
      "group": "Encoding::UndefinedConversionError",
      "spec": "Encoding::UndefinedConversionError#source_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::UndefinedConversionError#source_encoding is equal to the source encoding of the object that raised it",
      "group": "Encoding::UndefinedConversionError",
      "spec": "Encoding::UndefinedConversionError#source_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::UndefinedConversionError#source_encoding needs to be reviewed for spec completeness",
      "group": "Encoding::UndefinedConversionError",
      "spec": "Encoding::UndefinedConversionError#source_encoding",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Encoding::UndefinedConversionError#source_encoding returns an Encoding object",
      "group": "Encoding::UndefinedConversionError",
      "spec": "Encoding::UndefinedConversionError#source_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::UndefinedConversionError#source_encoding_name is equal to the source encoding at the stage of the conversion path where the error occurred",
      "group": "Encoding::UndefinedConversionError",
      "spec": "Encoding::UndefinedConversionError#source_encoding_name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::UndefinedConversionError#source_encoding_name is equal to the source encoding at the stage of the conversion path where the error occurred",
      "group": "Encoding::UndefinedConversionError",
      "spec": "Encoding::UndefinedConversionError#source_encoding_name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::UndefinedConversionError#source_encoding_name is equal to the source encoding name of the object that raised it",
      "group": "Encoding::UndefinedConversionError",
      "spec": "Encoding::UndefinedConversionError#source_encoding_name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::UndefinedConversionError#source_encoding_name is equal to the source encoding name of the object that raised it",
      "group": "Encoding::UndefinedConversionError",
      "spec": "Encoding::UndefinedConversionError#source_encoding_name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::UndefinedConversionError#source_encoding_name needs to be reviewed for spec completeness",
      "group": "Encoding::UndefinedConversionError",
      "spec": "Encoding::UndefinedConversionError#source_encoding_name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Encoding::UndefinedConversionError#source_encoding_name returns a String",
      "group": "Encoding::UndefinedConversionError",
      "spec": "Encoding::UndefinedConversionError#source_encoding_name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Encoding::UndefinedConversionError#source_encoding_name returns a String",
      "group": "Encoding::UndefinedConversionError",
      "spec": "Encoding::UndefinedConversionError#source_encoding_name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#all? always returns true on empty enumeration",
      "group": "Enumerable",
      "spec": "Enumerable#all?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#all? does not hide exceptions out of #each",
      "group": "Enumerable",
      "spec": "Enumerable#all?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#all? raises an ArgumentError when more than 1 argument is provided",
      "group": "Enumerable",
      "spec": "Enumerable#all?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#all? when given a pattern argument always returns true on empty enumeration",
      "group": "Enumerable",
      "spec": "Enumerable#all?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#all? when given a pattern argument calls `===` on the pattern the return value ",
      "group": "Enumerable",
      "spec": "Enumerable#all?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#all? when given a pattern argument calls the pattern with gathered array when yielded with multiple arguments",
      "group": "Enumerable",
      "spec": "Enumerable#all?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#all? when given a pattern argument does not hide exceptions out of #each",
      "group": "Enumerable",
      "spec": "Enumerable#all?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#all? when given a pattern argument does not hide exceptions out of pattern#===",
      "group": "Enumerable",
      "spec": "Enumerable#all?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#all? when given a pattern argument returns false if the pattern ever returns false or nil",
      "group": "Enumerable",
      "spec": "Enumerable#all?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#all? when given a pattern argument returns true if the pattern never returns false or nil",
      "group": "Enumerable",
      "spec": "Enumerable#all?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#all? with block does not hide exceptions out of the block",
      "group": "Enumerable",
      "spec": "Enumerable#all?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#all? with block gathers initial args as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#all?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#all? with block returns false if the block ever returns false or nil",
      "group": "Enumerable",
      "spec": "Enumerable#all?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#all? with block returns true if the block never returns false or nil",
      "group": "Enumerable",
      "spec": "Enumerable#all?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#all? with block stops iterating once the return value is determined",
      "group": "Enumerable",
      "spec": "Enumerable#all?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#all? with block yields multiple arguments when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#all?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#all? with no block gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#all?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#all? with no block returns false if there are false or nil elements",
      "group": "Enumerable",
      "spec": "Enumerable#all?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#all? with no block returns true if no elements are false or nil",
      "group": "Enumerable",
      "spec": "Enumerable#all?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#any? always returns false on empty enumeration",
      "group": "Enumerable",
      "spec": "Enumerable#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#any? does not hide exceptions out of #each",
      "group": "Enumerable",
      "spec": "Enumerable#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#any? raises an ArgumentError when more than 1 argument is provided",
      "group": "Enumerable",
      "spec": "Enumerable#any?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#any? when given a pattern argument always returns false on empty enumeration",
      "group": "Enumerable",
      "spec": "Enumerable#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#any? when given a pattern argument calls `===` on the pattern the return value ",
      "group": "Enumerable",
      "spec": "Enumerable#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#any? when given a pattern argument calls the pattern with gathered array when yielded with multiple arguments",
      "group": "Enumerable",
      "spec": "Enumerable#any?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#any? when given a pattern argument does not hide exceptions out of #each",
      "group": "Enumerable",
      "spec": "Enumerable#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#any? when given a pattern argument does not hide exceptions out of pattern#===",
      "group": "Enumerable",
      "spec": "Enumerable#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#any? when given a pattern argument returns false if the block never returns other than false or nil",
      "group": "Enumerable",
      "spec": "Enumerable#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#any? when given a pattern argument returns true if the pattern ever returns a truthy value",
      "group": "Enumerable",
      "spec": "Enumerable#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#any? with block does not hide exceptions out of the block",
      "group": "Enumerable",
      "spec": "Enumerable#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#any? with block gathers initial args as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#any? with block returns false if the block never returns other than false or nil",
      "group": "Enumerable",
      "spec": "Enumerable#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#any? with block returns true if the block ever returns other than false or nil",
      "group": "Enumerable",
      "spec": "Enumerable#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#any? with block stops iterating once the return value is determined",
      "group": "Enumerable",
      "spec": "Enumerable#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#any? with block yields multiple arguments when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#any?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#any? with no block gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#any?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#any? with no block returns false if all elements are false or nil",
      "group": "Enumerable",
      "spec": "Enumerable#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#any? with no block returns true if any element is not false or nil",
      "group": "Enumerable",
      "spec": "Enumerable#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#chain returns a chain of self and provided enumerables",
      "group": "Enumerable",
      "spec": "Enumerable#chain",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#chain returns an Enumerator::Chain if given a block",
      "group": "Enumerable",
      "spec": "Enumerable#chain",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#chunk does not accept arguments",
      "group": "Enumerable",
      "spec": "Enumerable#chunk",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#chunk does not return elements for which the block returns :_separator",
      "group": "Enumerable",
      "spec": "Enumerable#chunk",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#chunk does not return elements for which the block returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#chunk",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#chunk raises a RuntimeError if the block returns a Symbol starting with an underscore other than :_alone or :_separator",
      "group": "Enumerable",
      "spec": "Enumerable#chunk",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#chunk returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#chunk",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#chunk returns an Enumerator if called without a block",
      "group": "Enumerable",
      "spec": "Enumerable#chunk",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#chunk returns an Enumerator if given a block",
      "group": "Enumerable",
      "spec": "Enumerable#chunk",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#chunk returns elements for which the block returns :_alone in separate Arrays",
      "group": "Enumerable",
      "spec": "Enumerable#chunk",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#chunk returns elements of the Enumerable in an Array of Arrays, [v, ary], where 'ary' contains the consecutive elements for which the block returned the value 'v'",
      "group": "Enumerable",
      "spec": "Enumerable#chunk",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#chunk yields the current element and the current chunk to the block",
      "group": "Enumerable",
      "spec": "Enumerable#chunk",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#chunk_while on a single-element array ignores the block and returns an enumerator that yields [element]",
      "group": "Enumerable",
      "spec": "Enumerable#chunk_while",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#chunk_while when given a block calls the block for length of the receiver enumerable minus one times",
      "group": "Enumerable",
      "spec": "Enumerable#chunk_while",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#chunk_while when given a block returns an enumerator",
      "group": "Enumerable",
      "spec": "Enumerable#chunk_while",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#chunk_while when given a block splits chunks between adjacent elements i and j where the block returns false",
      "group": "Enumerable",
      "spec": "Enumerable#chunk_while",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#chunk_while when not given a block raises an ArgumentError",
      "group": "Enumerable",
      "spec": "Enumerable#chunk_while",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#collect Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#collect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#collect Enumerable with size when no block is given returned Enumerator size returns the enumerable size",
      "group": "Enumerable",
      "spec": "Enumerable#collect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#collect gathers initial args as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#collect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#collect passes through the values yielded by #each_with_index",
      "group": "Enumerable",
      "spec": "Enumerable#collect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#collect returns a new array with the results of passing each element to block",
      "group": "Enumerable",
      "spec": "Enumerable#collect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#collect returns an enumerator when no block given",
      "group": "Enumerable",
      "spec": "Enumerable#collect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#collect_concat Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#collect_concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#collect_concat Enumerable with size when no block is given returned Enumerator size returns the enumerable size",
      "group": "Enumerable",
      "spec": "Enumerable#collect_concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#collect_concat appends an element that defines #to_ary that returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#collect_concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#collect_concat appends non-Array elements that do not define #to_ary",
      "group": "Enumerable",
      "spec": "Enumerable#collect_concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#collect_concat concatenates the result of calling #to_ary if it returns an Array",
      "group": "Enumerable",
      "spec": "Enumerable#collect_concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#collect_concat does not call #to_a",
      "group": "Enumerable",
      "spec": "Enumerable#collect_concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#collect_concat raises a TypeError if an element defining #to_ary does not return an Array or nil",
      "group": "Enumerable",
      "spec": "Enumerable#collect_concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#collect_concat returns an enumerator when no block given",
      "group": "Enumerable",
      "spec": "Enumerable#collect_concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#collect_concat yields elements to the block and flattens one level",
      "group": "Enumerable",
      "spec": "Enumerable#collect_concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#count accepts an argument for comparison using ==",
      "group": "Enumerable",
      "spec": "Enumerable#count",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#count counts nils if given nil as an argument",
      "group": "Enumerable",
      "spec": "Enumerable#count",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#count ignores the block when given an argument",
      "group": "Enumerable",
      "spec": "Enumerable#count",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#count uses a block for comparison",
      "group": "Enumerable",
      "spec": "Enumerable#count",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#count when each yields multiple values accepts an argument for comparison using ==",
      "group": "Enumerable",
      "spec": "Enumerable#count",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#count when each yields multiple values gathers initial args as elements",
      "group": "Enumerable",
      "spec": "Enumerable#count",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#count when no argument or a block returns size",
      "group": "Enumerable",
      "spec": "Enumerable#count",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#count when no argument or a block with a custom size method ignores the custom size method",
      "group": "Enumerable",
      "spec": "Enumerable#count",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#cycle Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#cycle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#cycle Enumerable with size when no block is given returned Enumerator size should be Float::INFINITY when no argument is passed",
      "group": "Enumerable",
      "spec": "Enumerable#cycle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#cycle Enumerable with size when no block is given returned Enumerator size should be the result of multiplying the enumerable size by the argument passed",
      "group": "Enumerable",
      "spec": "Enumerable#cycle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#cycle Enumerable with size when no block is given returned Enumerator size should be zero when the argument passed is 0 or less",
      "group": "Enumerable",
      "spec": "Enumerable#cycle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#cycle passed a number n as an argument calls each at most once",
      "group": "Enumerable",
      "spec": "Enumerable#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#cycle passed a number n as an argument gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#cycle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#cycle passed a number n as an argument raises a TypeError when the passed n cannot be coerced to Integer",
      "group": "Enumerable",
      "spec": "Enumerable#cycle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#cycle passed a number n as an argument raises an ArgumentError if more arguments are passed",
      "group": "Enumerable",
      "spec": "Enumerable#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#cycle passed a number n as an argument returns nil and does nothing for non positive n",
      "group": "Enumerable",
      "spec": "Enumerable#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#cycle passed a number n as an argument tries to convert n to an Integer using #to_int",
      "group": "Enumerable",
      "spec": "Enumerable#cycle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#cycle passed a number n as an argument yields only when necessary",
      "group": "Enumerable",
      "spec": "Enumerable#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#cycle passed no argument or nil calls each at most once",
      "group": "Enumerable",
      "spec": "Enumerable#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#cycle passed no argument or nil loops indefinitely",
      "group": "Enumerable",
      "spec": "Enumerable#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#cycle passed no argument or nil returns nil if there are no elements",
      "group": "Enumerable",
      "spec": "Enumerable#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#cycle passed no argument or nil yields only when necessary",
      "group": "Enumerable",
      "spec": "Enumerable#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#cycle passed no argument or nil yields successive elements of the array repeatedly",
      "group": "Enumerable",
      "spec": "Enumerable#cycle",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#detect Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#detect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#detect Enumerable with size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#detect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#detect calls the ifnone proc only once when the block is false",
      "group": "Enumerable",
      "spec": "Enumerable#detect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#detect calls the ifnone proc when there are no elements",
      "group": "Enumerable",
      "spec": "Enumerable#detect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#detect doesn't call the ifnone proc if an element is found",
      "group": "Enumerable",
      "spec": "Enumerable#detect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#detect gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#detect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#detect ignores the ifnone argument when nil",
      "group": "Enumerable",
      "spec": "Enumerable#detect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#detect passes each entry in enum to block while block when block is false",
      "group": "Enumerable",
      "spec": "Enumerable#detect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#detect passes the ifnone proc to the enumerator",
      "group": "Enumerable",
      "spec": "Enumerable#detect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#detect passes through the values yielded by #each_with_index",
      "group": "Enumerable",
      "spec": "Enumerable#detect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#detect returns an enumerator when no block given",
      "group": "Enumerable",
      "spec": "Enumerable#detect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#detect returns nil when the block is false and there is no ifnone proc given",
      "group": "Enumerable",
      "spec": "Enumerable#detect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#detect returns the first element for which the block is not false",
      "group": "Enumerable",
      "spec": "Enumerable#detect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#detect returns the value of the ifnone proc if the block is false",
      "group": "Enumerable",
      "spec": "Enumerable#detect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#drop passed a number n as an argument raises ArgumentError if n < 0",
      "group": "Enumerable",
      "spec": "Enumerable#drop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#drop passed a number n as an argument raises a TypeError when the passed n cannot be coerced to Integer",
      "group": "Enumerable",
      "spec": "Enumerable#drop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#drop passed a number n as an argument returns [] for empty enumerables",
      "group": "Enumerable",
      "spec": "Enumerable#drop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#drop passed a number n as an argument returns [] if dropping all",
      "group": "Enumerable",
      "spec": "Enumerable#drop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#drop passed a number n as an argument tries to convert n to an Integer using #to_int",
      "group": "Enumerable",
      "spec": "Enumerable#drop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#drop requires exactly one argument",
      "group": "Enumerable",
      "spec": "Enumerable#drop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#drop_while Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#drop_while",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#drop_while Enumerable with size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#drop_while",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#drop_while accepts returns other than true/false",
      "group": "Enumerable",
      "spec": "Enumerable#drop_while",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#drop_while doesn't return self when it could",
      "group": "Enumerable",
      "spec": "Enumerable#drop_while",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#drop_while gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#drop_while",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#drop_while passes elements to the block until the first false",
      "group": "Enumerable",
      "spec": "Enumerable#drop_while",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#drop_while returns an Enumerator if no block given",
      "group": "Enumerable",
      "spec": "Enumerable#drop_while",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#drop_while returns no/all elements for {true/false} block",
      "group": "Enumerable",
      "spec": "Enumerable#drop_while",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#drop_while will only go through what's needed",
      "group": "Enumerable",
      "spec": "Enumerable#drop_while",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_cons gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#each_cons",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_cons passes element groups to the block",
      "group": "Enumerable",
      "spec": "Enumerable#each_cons",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_cons raises an ArgumentError if there is not a single parameter > 0",
      "group": "Enumerable",
      "spec": "Enumerable#each_cons",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_cons tries to convert n to an Integer using #to_int",
      "group": "Enumerable",
      "spec": "Enumerable#each_cons",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_cons when no block is given Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#each_cons",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_cons when no block is given Enumerable with size returned Enumerator size returns 0 when the argument is larger than self",
      "group": "Enumerable",
      "spec": "Enumerable#each_cons",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_cons when no block is given Enumerable with size returned Enumerator size returns 0 when the enum is empty",
      "group": "Enumerable",
      "spec": "Enumerable#each_cons",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_cons when no block is given Enumerable with size returned Enumerator size returns enum size - each_cons argument + 1",
      "group": "Enumerable",
      "spec": "Enumerable#each_cons",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_cons when no block is given returns an enumerator",
      "group": "Enumerable",
      "spec": "Enumerable#each_cons",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_cons works when n is >= full length",
      "group": "Enumerable",
      "spec": "Enumerable#each_cons",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_cons yields only as much as needed",
      "group": "Enumerable",
      "spec": "Enumerable#each_cons",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_entry Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#each_entry",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_entry Enumerable with size when no block is given returned Enumerator size returns the enumerable size",
      "group": "Enumerable",
      "spec": "Enumerable#each_entry",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_entry passes extra arguments to #each",
      "group": "Enumerable",
      "spec": "Enumerable#each_entry",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_entry passes through the values yielded by #each_with_index",
      "group": "Enumerable",
      "spec": "Enumerable#each_entry",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_entry raises an ArgumentError when extra arguments",
      "group": "Enumerable",
      "spec": "Enumerable#each_entry",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_entry returns an enumerator if no block",
      "group": "Enumerable",
      "spec": "Enumerable#each_entry",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_entry yields multiple arguments as an array",
      "group": "Enumerable",
      "spec": "Enumerable#each_entry",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_slice gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#each_slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_slice passes element groups to the block",
      "group": "Enumerable",
      "spec": "Enumerable#each_slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_slice raises an ArgumentError if there is not a single parameter > 0",
      "group": "Enumerable",
      "spec": "Enumerable#each_slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_slice returns an enumerator if no block",
      "group": "Enumerable",
      "spec": "Enumerable#each_slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_slice tries to convert n to an Integer using #to_int",
      "group": "Enumerable",
      "spec": "Enumerable#each_slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_slice when no block is given Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#each_slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_slice when no block is given Enumerable with size returned Enumerator size returns 0 when the Enumerable is empty",
      "group": "Enumerable",
      "spec": "Enumerable#each_slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_slice when no block is given Enumerable with size returned Enumerator size returns the ceil of Enumerable size divided by the argument value",
      "group": "Enumerable",
      "spec": "Enumerable#each_slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_slice when no block is given returns an enumerator",
      "group": "Enumerable",
      "spec": "Enumerable#each_slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_slice works when n is >= full length",
      "group": "Enumerable",
      "spec": "Enumerable#each_slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_slice yields only as much as needed",
      "group": "Enumerable",
      "spec": "Enumerable#each_slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_with_index Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#each_with_index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_with_index Enumerable with size when no block is given returned Enumerator size returns the enumerable size",
      "group": "Enumerable",
      "spec": "Enumerable#each_with_index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_with_index binds splat arguments properly",
      "group": "Enumerable",
      "spec": "Enumerable#each_with_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_with_index passes each element and its index to block",
      "group": "Enumerable",
      "spec": "Enumerable#each_with_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_with_index passes extra parameters to each",
      "group": "Enumerable",
      "spec": "Enumerable#each_with_index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_with_index provides each element to the block",
      "group": "Enumerable",
      "spec": "Enumerable#each_with_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_with_index provides each element to the block and its index",
      "group": "Enumerable",
      "spec": "Enumerable#each_with_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_with_index returns an enumerator if no block",
      "group": "Enumerable",
      "spec": "Enumerable#each_with_index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_with_object Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#each_with_object",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_with_object Enumerable with size when no block is given returned Enumerator size returns the enumerable size",
      "group": "Enumerable",
      "spec": "Enumerable#each_with_object",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_with_object gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#each_with_object",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_with_object passes each element and its argument to the block",
      "group": "Enumerable",
      "spec": "Enumerable#each_with_object",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#each_with_object returns an enumerator if no block",
      "group": "Enumerable",
      "spec": "Enumerable#each_with_object",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#entries passes arguments to each",
      "group": "Enumerable",
      "spec": "Enumerable#entries",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#entries passes through the values yielded by #each_with_index",
      "group": "Enumerable",
      "spec": "Enumerable#entries",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#entries returns a tainted array if self is tainted",
      "group": "Enumerable",
      "spec": "Enumerable#entries",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#entries returns an array containing the elements",
      "group": "Enumerable",
      "spec": "Enumerable#entries",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#entries returns an untrusted array if self is untrusted",
      "group": "Enumerable",
      "spec": "Enumerable#entries",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#filter Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#filter Enumerable with size when no block is given returned Enumerator size returns the enumerable size",
      "group": "Enumerable",
      "spec": "Enumerable#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#filter gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#filter passes through the values yielded by #each_with_index",
      "group": "Enumerable",
      "spec": "Enumerable#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#filter returns all elements for which the block is not false",
      "group": "Enumerable",
      "spec": "Enumerable#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#filter returns an enumerator when no block given",
      "group": "Enumerable",
      "spec": "Enumerable#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#find",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find Enumerable with size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#find",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find calls the ifnone proc only once when the block is false",
      "group": "Enumerable",
      "spec": "Enumerable#find",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find calls the ifnone proc when there are no elements",
      "group": "Enumerable",
      "spec": "Enumerable#find",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find doesn't call the ifnone proc if an element is found",
      "group": "Enumerable",
      "spec": "Enumerable#find",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#find",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find ignores the ifnone argument when nil",
      "group": "Enumerable",
      "spec": "Enumerable#find",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find passes each entry in enum to block while block when block is false",
      "group": "Enumerable",
      "spec": "Enumerable#find",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find passes the ifnone proc to the enumerator",
      "group": "Enumerable",
      "spec": "Enumerable#find",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find passes through the values yielded by #each_with_index",
      "group": "Enumerable",
      "spec": "Enumerable#find",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find returns an enumerator when no block given",
      "group": "Enumerable",
      "spec": "Enumerable#find",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find returns nil when the block is false and there is no ifnone proc given",
      "group": "Enumerable",
      "spec": "Enumerable#find",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find returns the first element for which the block is not false",
      "group": "Enumerable",
      "spec": "Enumerable#find",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find returns the value of the ifnone proc if the block is false",
      "group": "Enumerable",
      "spec": "Enumerable#find",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find_all Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#find_all",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find_all Enumerable with size when no block is given returned Enumerator size returns the enumerable size",
      "group": "Enumerable",
      "spec": "Enumerable#find_all",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find_all gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#find_all",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find_all passes through the values yielded by #each_with_index",
      "group": "Enumerable",
      "spec": "Enumerable#find_all",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find_all returns all elements for which the block is not false",
      "group": "Enumerable",
      "spec": "Enumerable#find_all",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find_all returns an enumerator when no block given",
      "group": "Enumerable",
      "spec": "Enumerable#find_all",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find_index Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#find_index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find_index Enumerable with size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#find_index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find_index ignores the block if an argument is given",
      "group": "Enumerable",
      "spec": "Enumerable#find_index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find_index passes each entry in enum to block while block when block is false",
      "group": "Enumerable",
      "spec": "Enumerable#find_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find_index returns an Enumerator if no block given",
      "group": "Enumerable",
      "spec": "Enumerable#find_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find_index returns nil when the block is false",
      "group": "Enumerable",
      "spec": "Enumerable#find_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find_index returns nil when the element not found",
      "group": "Enumerable",
      "spec": "Enumerable#find_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find_index returns the first index for which the block is not false",
      "group": "Enumerable",
      "spec": "Enumerable#find_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find_index returns the first index found",
      "group": "Enumerable",
      "spec": "Enumerable#find_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find_index uses #== for testing equality",
      "group": "Enumerable",
      "spec": "Enumerable#find_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find_index with block given a greedy yield parameter passes a gathered array to the parameter",
      "group": "Enumerable",
      "spec": "Enumerable#find_index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find_index with block given a single yield parameter passes first element to the parameter",
      "group": "Enumerable",
      "spec": "Enumerable#find_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#find_index without block gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#find_index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#first raises a RangeError when passed a Bignum",
      "group": "Enumerable",
      "spec": "Enumerable#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#first returns a gathered array from yield parameters",
      "group": "Enumerable",
      "spec": "Enumerable#first",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#first returns nil if self is empty",
      "group": "Enumerable",
      "spec": "Enumerable#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#first returns the first element",
      "group": "Enumerable",
      "spec": "Enumerable#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#first when passed an argument consumes only what is needed",
      "group": "Enumerable",
      "spec": "Enumerable#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#first when passed an argument gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#first",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#first when passed an argument raises a TypeError if the passed argument is not numeric",
      "group": "Enumerable",
      "spec": "Enumerable#first",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#first when passed an argument raises an ArgumentError when count is negative",
      "group": "Enumerable",
      "spec": "Enumerable#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#first when passed an argument returns an array containing the first element when passed count == 1",
      "group": "Enumerable",
      "spec": "Enumerable#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#first when passed an argument returns an empty array when passed count == 0",
      "group": "Enumerable",
      "spec": "Enumerable#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#first when passed an argument returns an empty array when passed count on an empty array",
      "group": "Enumerable",
      "spec": "Enumerable#first",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#first when passed an argument returns the entire array when count > length",
      "group": "Enumerable",
      "spec": "Enumerable#first",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#first when passed an argument returns the first count elements if given a count",
      "group": "Enumerable",
      "spec": "Enumerable#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#first when passed an argument tries to convert the passed argument to an Integer using #to_int",
      "group": "Enumerable",
      "spec": "Enumerable#first",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#flat_map Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#flat_map",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#flat_map Enumerable with size when no block is given returned Enumerator size returns the enumerable size",
      "group": "Enumerable",
      "spec": "Enumerable#flat_map",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#flat_map appends an element that defines #to_ary that returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#flat_map",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#flat_map appends non-Array elements that do not define #to_ary",
      "group": "Enumerable",
      "spec": "Enumerable#flat_map",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#flat_map concatenates the result of calling #to_ary if it returns an Array",
      "group": "Enumerable",
      "spec": "Enumerable#flat_map",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#flat_map does not call #to_a",
      "group": "Enumerable",
      "spec": "Enumerable#flat_map",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#flat_map raises a TypeError if an element defining #to_ary does not return an Array or nil",
      "group": "Enumerable",
      "spec": "Enumerable#flat_map",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#flat_map returns an enumerator when no block given",
      "group": "Enumerable",
      "spec": "Enumerable#flat_map",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#flat_map yields elements to the block and flattens one level",
      "group": "Enumerable",
      "spec": "Enumerable#flat_map",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#grep can use $~ in the block when used with a Regexp",
      "group": "Enumerable",
      "spec": "Enumerable#grep",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#grep grep the enumerable (rubycon legacy)",
      "group": "Enumerable",
      "spec": "Enumerable#grep",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#grep grep with a block should return an array of elements === pattern passed through block",
      "group": "Enumerable",
      "spec": "Enumerable#grep",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#grep grep without a block should return an array of all elements === pattern",
      "group": "Enumerable",
      "spec": "Enumerable#grep",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#grep sets $~ in the block",
      "group": "Enumerable",
      "spec": "Enumerable#grep",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#grep sets $~ to the last match when given no block",
      "group": "Enumerable",
      "spec": "Enumerable#grep",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#grep with a block calls the block with gathered array when yielded with multiple arguments",
      "group": "Enumerable",
      "spec": "Enumerable#grep",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#grep with a block raises an ArgumentError when not given a pattern",
      "group": "Enumerable",
      "spec": "Enumerable#grep",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#grep with a block returns an Array of matched elements that mapped by the block",
      "group": "Enumerable",
      "spec": "Enumerable#grep",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#grep_v sets $~ in the block",
      "group": "Enumerable",
      "spec": "Enumerable#grep_v",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#grep_v sets $~ to the last match when given no block",
      "group": "Enumerable",
      "spec": "Enumerable#grep_v",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#grep_v with block calls the block with gathered array when yielded with multiple arguments",
      "group": "Enumerable",
      "spec": "Enumerable#grep_v",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#grep_v with block raises an ArgumentError when not given a pattern",
      "group": "Enumerable",
      "spec": "Enumerable#grep_v",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#grep_v with block returns an Array of matched elements that mapped by the block",
      "group": "Enumerable",
      "spec": "Enumerable#grep_v",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#grep_v without block compares pattern with gathered array when yielded with multiple arguments",
      "group": "Enumerable",
      "spec": "Enumerable#grep_v",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#grep_v without block raises an ArgumentError when not given a pattern",
      "group": "Enumerable",
      "spec": "Enumerable#grep_v",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#grep_v without block returns an Array of matched elements",
      "group": "Enumerable",
      "spec": "Enumerable#grep_v",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#group_by Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#group_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#group_by Enumerable with size when no block is given returned Enumerator size returns the enumerable size",
      "group": "Enumerable",
      "spec": "Enumerable#group_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#group_by gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#group_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#group_by returns a hash with values grouped according to the block",
      "group": "Enumerable",
      "spec": "Enumerable#group_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#group_by returns a hash without default_proc",
      "group": "Enumerable",
      "spec": "Enumerable#group_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#group_by returns a tainted hash if self is tainted",
      "group": "Enumerable",
      "spec": "Enumerable#group_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#group_by returns an Enumerator if called without a block",
      "group": "Enumerable",
      "spec": "Enumerable#group_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#group_by returns an empty hash for empty enumerables",
      "group": "Enumerable",
      "spec": "Enumerable#group_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#group_by returns an untrusted hash if self is untrusted",
      "group": "Enumerable",
      "spec": "Enumerable#group_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#include? gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#include?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#include? returns true if any element == argument for numbers",
      "group": "Enumerable",
      "spec": "Enumerable#include?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#include? returns true if any element == argument for other objects",
      "group": "Enumerable",
      "spec": "Enumerable#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#include? returns true if any member of enum equals obj when == compare different classes (legacy rubycon)",
      "group": "Enumerable",
      "spec": "Enumerable#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#inject can take a symbol argument",
      "group": "Enumerable",
      "spec": "Enumerable#inject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#inject can take two argument",
      "group": "Enumerable",
      "spec": "Enumerable#inject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#inject gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#inject",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#inject ignores the block if two arguments",
      "group": "Enumerable",
      "spec": "Enumerable#inject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#inject produces an array of the accumulator and the argument when given a block with a *arg",
      "group": "Enumerable",
      "spec": "Enumerable#inject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#inject returns nil when fails(legacy rubycon)",
      "group": "Enumerable",
      "spec": "Enumerable#inject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#inject with argument takes a block with an accumulator (with argument as initial value) and the current element. Value of block becomes new accumulator",
      "group": "Enumerable",
      "spec": "Enumerable#inject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#inject with inject arguments(legacy rubycon)",
      "group": "Enumerable",
      "spec": "Enumerable#inject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#inject without argument takes a block with an accumulator (with first element as initial value) and the current element. Value of block becomes new accumulator",
      "group": "Enumerable",
      "spec": "Enumerable#inject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#inject without inject arguments(legacy rubycon)",
      "group": "Enumerable",
      "spec": "Enumerable#inject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#lazy returns an instance of Enumerator::Lazy",
      "group": "Enumerable",
      "spec": "Enumerable#lazy",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#map Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#map",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#map Enumerable with size when no block is given returned Enumerator size returns the enumerable size",
      "group": "Enumerable",
      "spec": "Enumerable#map",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#map gathers initial args as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#map",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#map passes through the values yielded by #each_with_index",
      "group": "Enumerable",
      "spec": "Enumerable#map",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#map returns a new array with the results of passing each element to block",
      "group": "Enumerable",
      "spec": "Enumerable#map",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#map returns an enumerator when no block given",
      "group": "Enumerable",
      "spec": "Enumerable#map",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#max",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max raises a NoMethodError for elements without #<=>",
      "group": "Enumerable",
      "spec": "Enumerable#max",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max raises an ArgumentError for incomparable elements",
      "group": "Enumerable",
      "spec": "Enumerable#max",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max returns nil for an empty Enumerable",
      "group": "Enumerable",
      "spec": "Enumerable#max",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max returns the maximum element",
      "group": "Enumerable",
      "spec": "Enumerable#max",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max returns the maximum element (basics cases)",
      "group": "Enumerable",
      "spec": "Enumerable#max",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max returns the maximum for enumerables that contain nils",
      "group": "Enumerable",
      "spec": "Enumerable#max",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max that is nil returns the maximum element",
      "group": "Enumerable",
      "spec": "Enumerable#max",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max when called with an argument n on a enumerable of length x where x < n returns an array containing the maximum n elements of length x",
      "group": "Enumerable",
      "spec": "Enumerable#max",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max when called with an argument n that is negative raises an ArgumentError",
      "group": "Enumerable",
      "spec": "Enumerable#max",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max when called with an argument n with a block returns an array containing the maximum n elements",
      "group": "Enumerable",
      "spec": "Enumerable#max",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max when called with an argument n without a block returns an array containing the maximum n elements",
      "group": "Enumerable",
      "spec": "Enumerable#max",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max when passed a block returns the maximum element",
      "group": "Enumerable",
      "spec": "Enumerable#max",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max_by Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#max_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max_by Enumerable with size when no block is given returned Enumerator size returns the enumerable size",
      "group": "Enumerable",
      "spec": "Enumerable#max_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max_by gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#max_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max_by is able to return the maximum for enums that contain nils",
      "group": "Enumerable",
      "spec": "Enumerable#max_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max_by returns an enumerator if no block",
      "group": "Enumerable",
      "spec": "Enumerable#max_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max_by returns nil if #each yields no objects",
      "group": "Enumerable",
      "spec": "Enumerable#max_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max_by returns the object for whom the value returned by block is the largest",
      "group": "Enumerable",
      "spec": "Enumerable#max_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max_by returns the object that appears first in #each in case of a tie",
      "group": "Enumerable",
      "spec": "Enumerable#max_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max_by uses max.<=>(current) to determine order",
      "group": "Enumerable",
      "spec": "Enumerable#max_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max_by when called with an argument n when n is nil returns the maximum element",
      "group": "Enumerable",
      "spec": "Enumerable#max_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max_by when called with an argument n with a block on a enumerable of length x where x < n returns an array containing the maximum n elements of length n",
      "group": "Enumerable",
      "spec": "Enumerable#max_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max_by when called with an argument n with a block returns an array containing the maximum n elements based on the block's value",
      "group": "Enumerable",
      "spec": "Enumerable#max_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max_by when called with an argument n with a block when n is negative raises an ArgumentError",
      "group": "Enumerable",
      "spec": "Enumerable#max_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#max_by when called with an argument n without a block returns an enumerator",
      "group": "Enumerable",
      "spec": "Enumerable#max_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#member? gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#member?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#member? returns true if any element == argument for numbers",
      "group": "Enumerable",
      "spec": "Enumerable#member?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#member? returns true if any element == argument for other objects",
      "group": "Enumerable",
      "spec": "Enumerable#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#member? returns true if any member of enum equals obj when == compare different classes (legacy rubycon)",
      "group": "Enumerable",
      "spec": "Enumerable#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#min",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min min should return the minimum element",
      "group": "Enumerable",
      "spec": "Enumerable#min",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min raises a NoMethodError for elements without #<=>",
      "group": "Enumerable",
      "spec": "Enumerable#min",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min raises an ArgumentError for incomparable elements",
      "group": "Enumerable",
      "spec": "Enumerable#min",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min returns nil for an empty Enumerable",
      "group": "Enumerable",
      "spec": "Enumerable#min",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min returns the minimum (basic cases)",
      "group": "Enumerable",
      "spec": "Enumerable#min",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min returns the minimum for enumerables that contain nils",
      "group": "Enumerable",
      "spec": "Enumerable#min",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min returns the minimum when using a block rule",
      "group": "Enumerable",
      "spec": "Enumerable#min",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min that is nil returns the minimum element",
      "group": "Enumerable",
      "spec": "Enumerable#min",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min when called with an argument n on a enumerable of length x where x < n returns an array containing the minimum n elements of length x",
      "group": "Enumerable",
      "spec": "Enumerable#min",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min when called with an argument n that is negative raises an ArgumentError",
      "group": "Enumerable",
      "spec": "Enumerable#min",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min when called with an argument n with a block returns an array containing the minimum n elements",
      "group": "Enumerable",
      "spec": "Enumerable#min",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min when called with an argument n without a block returns an array containing the minimum n elements",
      "group": "Enumerable",
      "spec": "Enumerable#min",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min_by Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#min_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min_by Enumerable with size when no block is given returned Enumerator size returns the enumerable size",
      "group": "Enumerable",
      "spec": "Enumerable#min_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min_by gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#min_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min_by is able to return the minimum for enums that contain nils",
      "group": "Enumerable",
      "spec": "Enumerable#min_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min_by returns an enumerator if no block",
      "group": "Enumerable",
      "spec": "Enumerable#min_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min_by returns nil if #each yields no objects",
      "group": "Enumerable",
      "spec": "Enumerable#min_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min_by returns the object for whom the value returned by block is the smallest",
      "group": "Enumerable",
      "spec": "Enumerable#min_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min_by returns the object that appears first in #each in case of a tie",
      "group": "Enumerable",
      "spec": "Enumerable#min_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min_by uses min.<=>(current) to determine order",
      "group": "Enumerable",
      "spec": "Enumerable#min_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min_by when called with an argument n when n is nil returns the minimum element",
      "group": "Enumerable",
      "spec": "Enumerable#min_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min_by when called with an argument n with a block on a enumerable of length x where x < n returns an array containing the minimum n elements of length n",
      "group": "Enumerable",
      "spec": "Enumerable#min_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min_by when called with an argument n with a block returns an array containing the minimum n elements based on the block's value",
      "group": "Enumerable",
      "spec": "Enumerable#min_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min_by when called with an argument n with a block when n is negative raises an ArgumentError",
      "group": "Enumerable",
      "spec": "Enumerable#min_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#min_by when called with an argument n without a block returns an enumerator",
      "group": "Enumerable",
      "spec": "Enumerable#min_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#minmax gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#minmax",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#minmax min should return the minimum element",
      "group": "Enumerable",
      "spec": "Enumerable#minmax",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#minmax raises a NoMethodError for elements without #<=>",
      "group": "Enumerable",
      "spec": "Enumerable#minmax",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#minmax raises an ArgumentError when elements are incomparable",
      "group": "Enumerable",
      "spec": "Enumerable#minmax",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#minmax returns [nil, nil] for an empty Enumerable",
      "group": "Enumerable",
      "spec": "Enumerable#minmax",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#minmax returns the minimum when using a block rule",
      "group": "Enumerable",
      "spec": "Enumerable#minmax",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#minmax_by Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#minmax_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#minmax_by Enumerable with size when no block is given returned Enumerator size returns the enumerable size",
      "group": "Enumerable",
      "spec": "Enumerable#minmax_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#minmax_by gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#minmax_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#minmax_by is able to return the maximum for enums that contain nils",
      "group": "Enumerable",
      "spec": "Enumerable#minmax_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#minmax_by returns an enumerator if no block",
      "group": "Enumerable",
      "spec": "Enumerable#minmax_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#minmax_by returns nil if #each yields no objects",
      "group": "Enumerable",
      "spec": "Enumerable#minmax_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#minmax_by returns the object for whom the value returned by block is the largest",
      "group": "Enumerable",
      "spec": "Enumerable#minmax_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#minmax_by returns the object that appears first in #each in case of a tie",
      "group": "Enumerable",
      "spec": "Enumerable#minmax_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#minmax_by uses min/max.<=>(current) to determine order",
      "group": "Enumerable",
      "spec": "Enumerable#minmax_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#none? always returns true on empty enumeration",
      "group": "Enumerable",
      "spec": "Enumerable#none?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#none? does not hide exceptions out of #each",
      "group": "Enumerable",
      "spec": "Enumerable#none?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#none? raises an ArgumentError when more than 1 argument is provided",
      "group": "Enumerable",
      "spec": "Enumerable#none?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#none? when given a pattern argument always returns true on empty enumeration",
      "group": "Enumerable",
      "spec": "Enumerable#none?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#none? when given a pattern argument calls `===` on the pattern the return value ",
      "group": "Enumerable",
      "spec": "Enumerable#none?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#none? when given a pattern argument calls the pattern with gathered array when yielded with multiple arguments",
      "group": "Enumerable",
      "spec": "Enumerable#none?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#none? when given a pattern argument does not hide exceptions out of #each",
      "group": "Enumerable",
      "spec": "Enumerable#none?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#none? when given a pattern argument does not hide exceptions out of pattern#===",
      "group": "Enumerable",
      "spec": "Enumerable#none?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#none? when given a pattern argument returns false if the pattern ever returns other than false or nil",
      "group": "Enumerable",
      "spec": "Enumerable#none?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#none? when given a pattern argument returns true if the pattern never returns a truthy value",
      "group": "Enumerable",
      "spec": "Enumerable#none?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#none? with a block does not hide exceptions out of the block",
      "group": "Enumerable",
      "spec": "Enumerable#none?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#none? with a block gathers initial args as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#none?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#none? with a block passes each element to the block in turn until it returns true",
      "group": "Enumerable",
      "spec": "Enumerable#none?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#none? with a block returns false if the block ever returns true",
      "group": "Enumerable",
      "spec": "Enumerable#none?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#none? with a block returns true if the block never returns true",
      "group": "Enumerable",
      "spec": "Enumerable#none?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#none? with a block stops passing elements to the block when it returns true",
      "group": "Enumerable",
      "spec": "Enumerable#none?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#none? with a block yields multiple arguments when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#none?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#none? with no block gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#none?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#none? with no block returns false if at least one of the elements in self are true",
      "group": "Enumerable",
      "spec": "Enumerable#none?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#none? with no block returns true if none of the elements in self are true",
      "group": "Enumerable",
      "spec": "Enumerable#none?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#one? always returns false on empty enumeration",
      "group": "Enumerable",
      "spec": "Enumerable#one?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#one? does not hide exceptions out of #each",
      "group": "Enumerable",
      "spec": "Enumerable#one?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#one? raises an ArgumentError when more than 1 argument is provided",
      "group": "Enumerable",
      "spec": "Enumerable#one?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#one? when given a pattern argument always returns false on empty enumeration",
      "group": "Enumerable",
      "spec": "Enumerable#one?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#one? when given a pattern argument calls `===` on the pattern the return value ",
      "group": "Enumerable",
      "spec": "Enumerable#one?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#one? when given a pattern argument calls the pattern with gathered array when yielded with multiple arguments",
      "group": "Enumerable",
      "spec": "Enumerable#one?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#one? when given a pattern argument does not hide exceptions out of #each",
      "group": "Enumerable",
      "spec": "Enumerable#one?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#one? when given a pattern argument does not hide exceptions out of pattern#===",
      "group": "Enumerable",
      "spec": "Enumerable#one?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#one? when given a pattern argument returns false if the pattern never returns a truthy value",
      "group": "Enumerable",
      "spec": "Enumerable#one?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#one? when given a pattern argument returns false if the pattern returns a truthy value more than once",
      "group": "Enumerable",
      "spec": "Enumerable#one?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#one? when given a pattern argument returns true if the pattern returns a truthy value only once",
      "group": "Enumerable",
      "spec": "Enumerable#one?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#one? with a block does not hide exceptions out of the block",
      "group": "Enumerable",
      "spec": "Enumerable#one?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#one? with a block gathers initial args as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#one?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#one? with a block returns false if the block only returns false",
      "group": "Enumerable",
      "spec": "Enumerable#one?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#one? with a block returns false if the block returns true more than once",
      "group": "Enumerable",
      "spec": "Enumerable#one?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#one? with a block returns true if block returns true once",
      "group": "Enumerable",
      "spec": "Enumerable#one?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#one? with a block yields multiple arguments when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#one?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#one? with no block gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#one?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#one? with no block returns false if all elements evaluate to false",
      "group": "Enumerable",
      "spec": "Enumerable#one?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#one? with no block returns false if two elements evaluate to true",
      "group": "Enumerable",
      "spec": "Enumerable#one?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#one? with no block returns true if only one element evaluates to true",
      "group": "Enumerable",
      "spec": "Enumerable#one?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#partition Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#partition",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#partition Enumerable with size when no block is given returned Enumerator size returns the enumerable size",
      "group": "Enumerable",
      "spec": "Enumerable#partition",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#partition gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#partition",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#partition returns an Enumerator if called without a block",
      "group": "Enumerable",
      "spec": "Enumerable#partition",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#partition returns two arrays, the first containing elements for which the block is true, the second containing the rest",
      "group": "Enumerable",
      "spec": "Enumerable#partition",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#reduce can take a symbol argument",
      "group": "Enumerable",
      "spec": "Enumerable#reduce",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#reduce can take two argument",
      "group": "Enumerable",
      "spec": "Enumerable#reduce",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#reduce gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#reduce",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#reduce ignores the block if two arguments",
      "group": "Enumerable",
      "spec": "Enumerable#reduce",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#reduce produces an array of the accumulator and the argument when given a block with a *arg",
      "group": "Enumerable",
      "spec": "Enumerable#reduce",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#reduce returns nil when fails(legacy rubycon)",
      "group": "Enumerable",
      "spec": "Enumerable#reduce",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#reduce with argument takes a block with an accumulator (with argument as initial value) and the current element. Value of block becomes new accumulator",
      "group": "Enumerable",
      "spec": "Enumerable#reduce",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#reduce with inject arguments(legacy rubycon)",
      "group": "Enumerable",
      "spec": "Enumerable#reduce",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#reduce without argument takes a block with an accumulator (with first element as initial value) and the current element. Value of block becomes new accumulator",
      "group": "Enumerable",
      "spec": "Enumerable#reduce",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#reduce without inject arguments(legacy rubycon)",
      "group": "Enumerable",
      "spec": "Enumerable#reduce",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#reject Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#reject",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#reject Enumerable with size when no block is given returned Enumerator size returns the enumerable size",
      "group": "Enumerable",
      "spec": "Enumerable#reject",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#reject gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#reject",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#reject returns an Enumerator if called without a block",
      "group": "Enumerable",
      "spec": "Enumerable#reject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#reject returns an array of the elements for which block is false",
      "group": "Enumerable",
      "spec": "Enumerable#reject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#reverse_each Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#reverse_each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#reverse_each Enumerable with size when no block is given returned Enumerator size returns the enumerable size",
      "group": "Enumerable",
      "spec": "Enumerable#reverse_each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#reverse_each gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#reverse_each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#reverse_each returns an Enumerator if no block given",
      "group": "Enumerable",
      "spec": "Enumerable#reverse_each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#reverse_each traverses enum in reverse order and pass each element to block",
      "group": "Enumerable",
      "spec": "Enumerable#reverse_each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#select Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#select",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#select Enumerable with size when no block is given returned Enumerator size returns the enumerable size",
      "group": "Enumerable",
      "spec": "Enumerable#select",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#select gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#select",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#select passes through the values yielded by #each_with_index",
      "group": "Enumerable",
      "spec": "Enumerable#select",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#select returns all elements for which the block is not false",
      "group": "Enumerable",
      "spec": "Enumerable#select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#select returns an enumerator when no block given",
      "group": "Enumerable",
      "spec": "Enumerable#select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_after raises an ArgumentError when given an incorrect number of arguments",
      "group": "Enumerable",
      "spec": "Enumerable#slice_after",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_after when given a block and an argument raises an ArgumentError",
      "group": "Enumerable",
      "spec": "Enumerable#slice_after",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_after when given a block and no argument calls the block to determine when to yield",
      "group": "Enumerable",
      "spec": "Enumerable#slice_after",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_after when given an argument and no block calls === on the argument to determine when to yield",
      "group": "Enumerable",
      "spec": "Enumerable#slice_after",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_after when given an argument and no block doesn't yield an empty array if the filter matches the first entry or the last entry",
      "group": "Enumerable",
      "spec": "Enumerable#slice_after",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_after when given an argument and no block uses standard boolean as a test",
      "group": "Enumerable",
      "spec": "Enumerable#slice_after",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:when an iterator method yields more than one value processes all yielded values",
      "group": "Enumerable",
      "spec": "Enumerable#slice_after",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_before Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#slice_before",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_before Enumerable with size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#slice_before",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_before raises an ArgumentError when given an incorrect number of arguments",
      "group": "Enumerable",
      "spec": "Enumerable#slice_before",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_before when an iterator method yields more than one value processes all yielded values",
      "group": "Enumerable",
      "spec": "Enumerable#slice_before",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_before when given a block and no argument calls the block to determine when to yield",
      "group": "Enumerable",
      "spec": "Enumerable#slice_before",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_before when given a block does not accept arguments",
      "group": "Enumerable",
      "spec": "Enumerable#slice_before",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_before when given an argument and no block calls === on the argument to determine when to yield",
      "group": "Enumerable",
      "spec": "Enumerable#slice_before",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_before when given an argument and no block doesn't yield an empty array if the filter matches the first entry or the last entry",
      "group": "Enumerable",
      "spec": "Enumerable#slice_before",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_before when given an argument and no block uses standard boolean as a test",
      "group": "Enumerable",
      "spec": "Enumerable#slice_before",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_when when an iterator method yields more than one value processes all yielded values",
      "group": "Enumerable",
      "spec": "Enumerable#slice_when",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_when when given a block calls the block for length of the receiver enumerable minus one times",
      "group": "Enumerable",
      "spec": "Enumerable#slice_when",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_when when given a block doesn't yield an empty array if the block matches the first or the last time",
      "group": "Enumerable",
      "spec": "Enumerable#slice_when",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_when when given a block doesn't yield an empty array on a small enumerable",
      "group": "Enumerable",
      "spec": "Enumerable#slice_when",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_when when given a block returns an enumerator",
      "group": "Enumerable",
      "spec": "Enumerable#slice_when",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_when when given a block splits chunks between adjacent elements i and j where the block returns true",
      "group": "Enumerable",
      "spec": "Enumerable#slice_when",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#slice_when when not given a block raises an ArgumentError",
      "group": "Enumerable",
      "spec": "Enumerable#slice_when",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#sort compare values returned by block with 0",
      "group": "Enumerable",
      "spec": "Enumerable#sort",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#sort doesn't raise an error if #to_a returns a frozen Array",
      "group": "Enumerable",
      "spec": "Enumerable#sort",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#sort gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#sort",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#sort raises a NoMethodError if elements do not define <=>",
      "group": "Enumerable",
      "spec": "Enumerable#sort",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#sort raises an error if objects can't be compared",
      "group": "Enumerable",
      "spec": "Enumerable#sort",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#sort sorts by the natural order as defined by <=>",
      "group": "Enumerable",
      "spec": "Enumerable#sort",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#sort sorts enumerables that contain nils",
      "group": "Enumerable",
      "spec": "Enumerable#sort",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#sort yields elements to the provided block",
      "group": "Enumerable",
      "spec": "Enumerable#sort",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#sort_by Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#sort_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#sort_by Enumerable with size when no block is given returned Enumerator size returns the enumerable size",
      "group": "Enumerable",
      "spec": "Enumerable#sort_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#sort_by calls #each to iterate over the elements to be sorted",
      "group": "Enumerable",
      "spec": "Enumerable#sort_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#sort_by gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#sort_by",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#sort_by returns an Enumerator when a block is not supplied",
      "group": "Enumerable",
      "spec": "Enumerable#sort_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#sort_by returns an array of elements ordered by the result of block",
      "group": "Enumerable",
      "spec": "Enumerable#sort_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#sort_by returns an array of elements when a block is supplied and #map returns an enumerable",
      "group": "Enumerable",
      "spec": "Enumerable#sort_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#sort_by sorts the object by the given attribute",
      "group": "Enumerable",
      "spec": "Enumerable#sort_by",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#sum gives 0 as a default argument",
      "group": "Enumerable",
      "spec": "Enumerable#sum",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#sum returns amount of the elements with taking an argument as the initial value",
      "group": "Enumerable",
      "spec": "Enumerable#sum",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#sum takes a block to transform the elements",
      "group": "Enumerable",
      "spec": "Enumerable#sum",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#take requires an argument",
      "group": "Enumerable",
      "spec": "Enumerable#take",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#take when passed an argument consumes only what is needed",
      "group": "Enumerable",
      "spec": "Enumerable#take",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#take when passed an argument gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#take",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#take when passed an argument raises a TypeError if the passed argument is not numeric",
      "group": "Enumerable",
      "spec": "Enumerable#take",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#take when passed an argument raises an ArgumentError when count is negative",
      "group": "Enumerable",
      "spec": "Enumerable#take",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#take when passed an argument returns an array containing the first element when passed count == 1",
      "group": "Enumerable",
      "spec": "Enumerable#take",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#take when passed an argument returns an empty array when passed count == 0",
      "group": "Enumerable",
      "spec": "Enumerable#take",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#take when passed an argument returns an empty array when passed count on an empty array",
      "group": "Enumerable",
      "spec": "Enumerable#take",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#take when passed an argument returns the entire array when count > length",
      "group": "Enumerable",
      "spec": "Enumerable#take",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#take when passed an argument returns the first count elements if given a count",
      "group": "Enumerable",
      "spec": "Enumerable#take",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#take when passed an argument tries to convert the passed argument to an Integer using #to_int",
      "group": "Enumerable",
      "spec": "Enumerable#take",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#take_while Enumerable with no size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#take_while",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#take_while Enumerable with size when no block is given returned Enumerator size returns nil",
      "group": "Enumerable",
      "spec": "Enumerable#take_while",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#take_while accepts returns other than true/false",
      "group": "Enumerable",
      "spec": "Enumerable#take_while",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#take_while calls the block with initial args when yielded with multiple arguments",
      "group": "Enumerable",
      "spec": "Enumerable#take_while",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#take_while doesn't return self when it could",
      "group": "Enumerable",
      "spec": "Enumerable#take_while",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#take_while passes elements to the block until the first false",
      "group": "Enumerable",
      "spec": "Enumerable#take_while",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#take_while returns an Enumerator if no block given",
      "group": "Enumerable",
      "spec": "Enumerable#take_while",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#take_while returns no/all elements for {true/false} block",
      "group": "Enumerable",
      "spec": "Enumerable#take_while",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#take_while will only go through what's needed",
      "group": "Enumerable",
      "spec": "Enumerable#take_while",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#to_a passes arguments to each",
      "group": "Enumerable",
      "spec": "Enumerable#to_a",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#to_a passes through the values yielded by #each_with_index",
      "group": "Enumerable",
      "spec": "Enumerable#to_a",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#to_a returns a tainted array if self is tainted",
      "group": "Enumerable",
      "spec": "Enumerable#to_a",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#to_a returns an array containing the elements",
      "group": "Enumerable",
      "spec": "Enumerable#to_a",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#to_a returns an untrusted array if self is untrusted",
      "group": "Enumerable",
      "spec": "Enumerable#to_a",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#to_h calls #to_ary on contents",
      "group": "Enumerable",
      "spec": "Enumerable#to_h",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#to_h converts empty enumerable to empty hash",
      "group": "Enumerable",
      "spec": "Enumerable#to_h",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#to_h converts yielded [key, value] pairs to a hash",
      "group": "Enumerable",
      "spec": "Enumerable#to_h",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#to_h forwards arguments to #each",
      "group": "Enumerable",
      "spec": "Enumerable#to_h",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#to_h raises ArgumentError if an element is not a [key, value] pair",
      "group": "Enumerable",
      "spec": "Enumerable#to_h",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#to_h raises TypeError if an element is not an array",
      "group": "Enumerable",
      "spec": "Enumerable#to_h",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#to_h uses the last value of a duplicated key",
      "group": "Enumerable",
      "spec": "Enumerable#to_h",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#to_h with block coerces returned pair to Array with #to_ary",
      "group": "Enumerable",
      "spec": "Enumerable#to_h",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#to_h with block converts [key, value] pairs returned by the block to a hash",
      "group": "Enumerable",
      "spec": "Enumerable#to_h",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#to_h with block does not coerce returned pair to Array with #to_a",
      "group": "Enumerable",
      "spec": "Enumerable#to_h",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#to_h with block raises ArgumentError if block returns longer or shorter array",
      "group": "Enumerable",
      "spec": "Enumerable#to_h",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#to_h with block raises TypeError if block returns something other than Array",
      "group": "Enumerable",
      "spec": "Enumerable#to_h",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#uniq compares elements first with hash",
      "group": "Enumerable",
      "spec": "Enumerable#uniq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#uniq compares elements with matching hash codes with #eql?",
      "group": "Enumerable",
      "spec": "Enumerable#uniq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#uniq does not compare elements with different hash codes via eql?",
      "group": "Enumerable",
      "spec": "Enumerable#uniq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#uniq returns an array that contains only unique elements",
      "group": "Enumerable",
      "spec": "Enumerable#uniq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#uniq uses eql? semantics",
      "group": "Enumerable",
      "spec": "Enumerable#uniq",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#uniq when yielded with multiple arguments returns all yield arguments as an array",
      "group": "Enumerable",
      "spec": "Enumerable#uniq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#zip combines each element of the receiver with the element of the same index in arrays given as arguments",
      "group": "Enumerable",
      "spec": "Enumerable#zip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#zip converts arguments to arrays using #to_ary",
      "group": "Enumerable",
      "spec": "Enumerable#zip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#zip converts arguments to enums using #to_enum",
      "group": "Enumerable",
      "spec": "Enumerable#zip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#zip fills resulting array with nils if an argument array is too short",
      "group": "Enumerable",
      "spec": "Enumerable#zip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#zip gathers whole arrays as elements when each yields multiple",
      "group": "Enumerable",
      "spec": "Enumerable#zip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerable#zip passes each element of the result array to a block and return nil if a block is given",
      "group": "Enumerable",
      "spec": "Enumerable#zip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator includes Enumerable",
      "group": "Enumerator",
      "spec": "Enumerator",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#+ calls #each on each argument",
      "group": "Enumerator",
      "spec": "Enumerator#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#+ returns a chain of self and provided enumerators",
      "group": "Enumerator",
      "spec": "Enumerator#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each appends given arguments to receiver.each",
      "group": "Enumerator",
      "spec": "Enumerator#each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each calls #each on the object given in the constructor by default",
      "group": "Enumerator",
      "spec": "Enumerator#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each calls #each on the underlying object until it's exhausted",
      "group": "Enumerator",
      "spec": "Enumerator#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each calls the method given in the constructor instead of #each",
      "group": "Enumerator",
      "spec": "Enumerator#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each calls the method given in the constructor until it's exhausted",
      "group": "Enumerator",
      "spec": "Enumerator#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each passes given arguments at initialized to receiver.each",
      "group": "Enumerator",
      "spec": "Enumerator#each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each raises a NoMethodError if the object doesn't respond to #each",
      "group": "Enumerator",
      "spec": "Enumerator#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each requires multiple arguments",
      "group": "Enumerator",
      "spec": "Enumerator#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each returns new Enumerator if given arguments but not given a block",
      "group": "Enumerator",
      "spec": "Enumerator#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each returns self if not given arguments and not given a block",
      "group": "Enumerator",
      "spec": "Enumerator#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each returns the same value from receiver.each if block and arguments are given",
      "group": "Enumerator",
      "spec": "Enumerator#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each returns the same value from receiver.each if block is given",
      "group": "Enumerator",
      "spec": "Enumerator#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each yields each element of self to the given block",
      "group": "Enumerator",
      "spec": "Enumerator#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each_with_index binds splat arguments properly",
      "group": "Enumerator",
      "spec": "Enumerator#each_with_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each_with_index passes each element and its index to block",
      "group": "Enumerator",
      "spec": "Enumerator#each_with_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each_with_index passes on the given block's return value",
      "group": "Enumerator",
      "spec": "Enumerator#each_with_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each_with_index raises an ArgumentError if passed extra arguments",
      "group": "Enumerator",
      "spec": "Enumerator#each_with_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each_with_index returns a new Enumerator when no block is given",
      "group": "Enumerator",
      "spec": "Enumerator#each_with_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each_with_index returns an enumerator if no block is supplied",
      "group": "Enumerator",
      "spec": "Enumerator#each_with_index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each_with_index returns the correct value if chained with itself",
      "group": "Enumerator",
      "spec": "Enumerator#each_with_index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each_with_index returns the iterator's return value",
      "group": "Enumerator",
      "spec": "Enumerator#each_with_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each_with_index returns the object being enumerated when given a block",
      "group": "Enumerator",
      "spec": "Enumerator#each_with_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each_with_index when no block is given returned Enumerator size returns the enumerable size",
      "group": "Enumerator",
      "spec": "Enumerator#each_with_index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each_with_object receives an argument",
      "group": "Enumerator",
      "spec": "Enumerator#each_with_object",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each_with_object with block returns the given object",
      "group": "Enumerator",
      "spec": "Enumerator#each_with_object",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each_with_object with block the block parameter passes each element to first parameter",
      "group": "Enumerator",
      "spec": "Enumerator#each_with_object",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each_with_object with block the block parameter passes the given object to last parameter",
      "group": "Enumerator",
      "spec": "Enumerator#each_with_object",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#each_with_object without block returns new Enumerator",
      "group": "Enumerator",
      "spec": "Enumerator#each_with_object",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#enum_for defaults the first argument to :each",
      "group": "Enumerator",
      "spec": "Enumerator#enum_for",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#enum_for defers the evaluation of the passed block until #size is called",
      "group": "Enumerator",
      "spec": "Enumerator#enum_for",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#enum_for exposes multi-arg yields as an array",
      "group": "Enumerator",
      "spec": "Enumerator#enum_for",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#enum_for is defined in Kernel",
      "group": "Enumerator",
      "spec": "Enumerator#enum_for",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#enum_for returns a new enumerator",
      "group": "Enumerator",
      "spec": "Enumerator#enum_for",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#enum_for uses the passed block's value to calculate the size of the enumerator",
      "group": "Enumerator",
      "spec": "Enumerator#enum_for",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#feed can be called for each iteration",
      "group": "Enumerator",
      "spec": "Enumerator#feed",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#feed causes yield to return the value if called during iteration",
      "group": "Enumerator",
      "spec": "Enumerator#feed",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#feed raises a TypeError if called more than once without advancing the enumerator",
      "group": "Enumerator",
      "spec": "Enumerator#feed",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#feed returns nil",
      "group": "Enumerator",
      "spec": "Enumerator#feed",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#feed sets the future return value of yield if called before advancing the iterator",
      "group": "Enumerator",
      "spec": "Enumerator#feed",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#feed sets the return value of Yielder#yield",
      "group": "Enumerator",
      "spec": "Enumerator#feed",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#first returns arrays correctly when calling #first (2376)",
      "group": "Enumerator",
      "spec": "Enumerator#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#initialize accepts a block",
      "group": "Enumerator",
      "spec": "Enumerator#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#initialize is a private method",
      "group": "Enumerator",
      "spec": "Enumerator#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#initialize on frozen instance raises a RuntimeError",
      "group": "Enumerator",
      "spec": "Enumerator#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#initialize returns self when given a block",
      "group": "Enumerator",
      "spec": "Enumerator#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#initialize returns self when given an object",
      "group": "Enumerator",
      "spec": "Enumerator#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#initialize sets size to nil if size is not given",
      "group": "Enumerator",
      "spec": "Enumerator#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#initialize sets size to nil if the given size is nil",
      "group": "Enumerator",
      "spec": "Enumerator#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#initialize sets size to the given size if the given size is Float::INFINITY",
      "group": "Enumerator",
      "spec": "Enumerator#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#initialize sets size to the given size if the given size is a Fixnum",
      "group": "Enumerator",
      "spec": "Enumerator#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#initialize sets size to the given size if the given size is a Proc",
      "group": "Enumerator",
      "spec": "Enumerator#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#inspect shows a representation of the Enumerator including receiver and method",
      "group": "Enumerator",
      "spec": "Enumerator#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#inspect shows a representation of the Enumerator including receiver and method and arguments",
      "group": "Enumerator",
      "spec": "Enumerator#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#inspect shows a representation of the Enumerator including the nested Enumerator",
      "group": "Enumerator",
      "spec": "Enumerator#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#next cannot be called again until the enumerator is rewound",
      "group": "Enumerator",
      "spec": "Enumerator#next",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#next raises a StopIteration exception at the end of the stream",
      "group": "Enumerator",
      "spec": "Enumerator#next",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#next returns the next element of the enumeration",
      "group": "Enumerator",
      "spec": "Enumerator#next",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#next_values advances the position of the current element",
      "group": "Enumerator",
      "spec": "Enumerator#next_values",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#next_values advances the position of the enumerator each time when called multiple times",
      "group": "Enumerator",
      "spec": "Enumerator#next_values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#next_values raises StopIteration if called on a finished enumerator",
      "group": "Enumerator",
      "spec": "Enumerator#next_values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#next_values returns an array with only nil if yield is called with nil",
      "group": "Enumerator",
      "spec": "Enumerator#next_values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#next_values returns an empty array if yield is called without arguments",
      "group": "Enumerator",
      "spec": "Enumerator#next_values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#next_values returns the next element in self",
      "group": "Enumerator",
      "spec": "Enumerator#next_values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#next_values works in concert with #rewind",
      "group": "Enumerator",
      "spec": "Enumerator#next_values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#peek can be called repeatedly without advancing the position of the current element",
      "group": "Enumerator",
      "spec": "Enumerator#peek",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#peek does not advance the position of the current element",
      "group": "Enumerator",
      "spec": "Enumerator#peek",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#peek raises StopIteration if called on a finished enumerator",
      "group": "Enumerator",
      "spec": "Enumerator#peek",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#peek returns the next element in self",
      "group": "Enumerator",
      "spec": "Enumerator#peek",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#peek works in concert with #rewind",
      "group": "Enumerator",
      "spec": "Enumerator#peek",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#peek_values can be called repeatedly without advancing the position of the current element",
      "group": "Enumerator",
      "spec": "Enumerator#peek_values",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#peek_values does not advance the position of the current element",
      "group": "Enumerator",
      "spec": "Enumerator#peek_values",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#peek_values raises StopIteration if called on a finished enumerator",
      "group": "Enumerator",
      "spec": "Enumerator#peek_values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#peek_values returns an array with only nil if yield is called with nil",
      "group": "Enumerator",
      "spec": "Enumerator#peek_values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#peek_values returns an empty array if yield is called without arguments",
      "group": "Enumerator",
      "spec": "Enumerator#peek_values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#peek_values returns the next element in self",
      "group": "Enumerator",
      "spec": "Enumerator#peek_values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#peek_values works in concert with #rewind",
      "group": "Enumerator",
      "spec": "Enumerator#peek_values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#rewind calls the enclosed object's rewind method if one exists",
      "group": "Enumerator",
      "spec": "Enumerator#rewind",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#rewind clears a pending #feed value",
      "group": "Enumerator",
      "spec": "Enumerator#rewind",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#rewind does nothing if the object doesn't have a #rewind method",
      "group": "Enumerator",
      "spec": "Enumerator#rewind",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#rewind has no effect if called multiple, consecutive times",
      "group": "Enumerator",
      "spec": "Enumerator#rewind",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#rewind has no effect on a new enumerator",
      "group": "Enumerator",
      "spec": "Enumerator#rewind",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#rewind resets the enumerator to its initial state",
      "group": "Enumerator",
      "spec": "Enumerator#rewind",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#rewind returns self",
      "group": "Enumerator",
      "spec": "Enumerator#rewind",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#rewind works with peek to reset the position",
      "group": "Enumerator",
      "spec": "Enumerator#rewind",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#size returns nil if set size is nil",
      "group": "Enumerator",
      "spec": "Enumerator#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#size returns returning value from size.call if set size is a Proc",
      "group": "Enumerator",
      "spec": "Enumerator#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#size returns same value if set size is an Integer",
      "group": "Enumerator",
      "spec": "Enumerator#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#size returns the result from size.call if the size respond to call",
      "group": "Enumerator",
      "spec": "Enumerator#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#to_enum defaults the first argument to :each",
      "group": "Enumerator",
      "spec": "Enumerator#to_enum",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#to_enum defers the evaluation of the passed block until #size is called",
      "group": "Enumerator",
      "spec": "Enumerator#to_enum",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#to_enum exposes multi-arg yields as an array",
      "group": "Enumerator",
      "spec": "Enumerator#to_enum",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#to_enum is defined in Kernel",
      "group": "Enumerator",
      "spec": "Enumerator#to_enum",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#to_enum returns a new enumerator",
      "group": "Enumerator",
      "spec": "Enumerator#to_enum",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#to_enum uses the passed block's value to calculate the size of the enumerator",
      "group": "Enumerator",
      "spec": "Enumerator#to_enum",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#with_index accepts an optional argument when given a block",
      "group": "Enumerator",
      "spec": "Enumerator#with_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#with_index accepts an optional argument when not given a block",
      "group": "Enumerator",
      "spec": "Enumerator#with_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#with_index accepts negative argument",
      "group": "Enumerator",
      "spec": "Enumerator#with_index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#with_index binds splat arguments properly",
      "group": "Enumerator",
      "spec": "Enumerator#with_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#with_index coerces the given numeric argument to an Integer",
      "group": "Enumerator",
      "spec": "Enumerator#with_index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#with_index converts non-numeric arguments to Integer via #to_int",
      "group": "Enumerator",
      "spec": "Enumerator#with_index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#with_index numbers indices from the given index when given an offset and block",
      "group": "Enumerator",
      "spec": "Enumerator#with_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#with_index numbers indices from the given index when given an offset but no block",
      "group": "Enumerator",
      "spec": "Enumerator#with_index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#with_index passes each element and its index to block",
      "group": "Enumerator",
      "spec": "Enumerator#with_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#with_index raises a TypeError when the argument cannot be converted to numeric",
      "group": "Enumerator",
      "spec": "Enumerator#with_index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#with_index returns a new Enumerator when no block is given",
      "group": "Enumerator",
      "spec": "Enumerator#with_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#with_index returns an enumerator if no block is supplied",
      "group": "Enumerator",
      "spec": "Enumerator#with_index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#with_index returns the object being enumerated when given a block",
      "group": "Enumerator",
      "spec": "Enumerator#with_index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#with_index treats nil argument as no argument",
      "group": "Enumerator",
      "spec": "Enumerator#with_index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#with_index when no block is given returned Enumerator size returns the enumerable size",
      "group": "Enumerator",
      "spec": "Enumerator#with_index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#with_object receives an argument",
      "group": "Enumerator",
      "spec": "Enumerator#with_object",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#with_object with block returns the given object",
      "group": "Enumerator",
      "spec": "Enumerator#with_object",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#with_object with block the block parameter passes each element to first parameter",
      "group": "Enumerator",
      "spec": "Enumerator#with_object",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#with_object with block the block parameter passes the given object to last parameter",
      "group": "Enumerator",
      "spec": "Enumerator#with_object",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator#with_object without block returns new Enumerator",
      "group": "Enumerator",
      "spec": "Enumerator#with_object",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator.new aliases the second argument to :each",
      "group": "Enumerator",
      "spec": "Enumerator.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator.new creates a new custom enumerator that responds to #each",
      "group": "Enumerator",
      "spec": "Enumerator.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator.new creates a new custom enumerator that runs correctly",
      "group": "Enumerator",
      "spec": "Enumerator.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator.new creates a new custom enumerator with the given object, iterator and arguments",
      "group": "Enumerator",
      "spec": "Enumerator.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator.new doesn't check for the presence of the iterator method",
      "group": "Enumerator",
      "spec": "Enumerator.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator.new uses the latest define iterator method",
      "group": "Enumerator",
      "spec": "Enumerator.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::ArithmeticSequence#== returns true if begin, end, step and exclude_end? are equal",
      "group": "Enumerator::ArithmeticSequence",
      "spec": "Enumerator::ArithmeticSequence#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::ArithmeticSequence#begin returns the begin of the sequence",
      "group": "Enumerator::ArithmeticSequence",
      "spec": "Enumerator::ArithmeticSequence#begin",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::ArithmeticSequence#each calls given block on each item of the sequence",
      "group": "Enumerator::ArithmeticSequence",
      "spec": "Enumerator::ArithmeticSequence#each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::ArithmeticSequence#each returns self",
      "group": "Enumerator::ArithmeticSequence",
      "spec": "Enumerator::ArithmeticSequence#each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::ArithmeticSequence#end returns the end of the sequence",
      "group": "Enumerator::ArithmeticSequence",
      "spec": "Enumerator::ArithmeticSequence#end",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::ArithmeticSequence#exclude_end? when created using Numeric#step always returns false",
      "group": "Enumerator::ArithmeticSequence",
      "spec": "Enumerator::ArithmeticSequence#exclude_end?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::ArithmeticSequence#exclude_end? when created using Range#step mirrors range.exclude_end?",
      "group": "Enumerator::ArithmeticSequence",
      "spec": "Enumerator::ArithmeticSequence#exclude_end?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::ArithmeticSequence#first returns the first element of the sequence",
      "group": "Enumerator::ArithmeticSequence",
      "spec": "Enumerator::ArithmeticSequence#first",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::ArithmeticSequence#hash is based on begin, end, step and exclude_end?",
      "group": "Enumerator::ArithmeticSequence",
      "spec": "Enumerator::ArithmeticSequence#hash",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::ArithmeticSequence#inspect when Numeric#step is used returns '(begin.step(end{, step}))'",
      "group": "Enumerator::ArithmeticSequence",
      "spec": "Enumerator::ArithmeticSequence#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::ArithmeticSequence#inspect when Range#step is used returns '((range).step{(step)})'",
      "group": "Enumerator::ArithmeticSequence",
      "spec": "Enumerator::ArithmeticSequence#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::ArithmeticSequence#last returns the last element of the sequence",
      "group": "Enumerator::ArithmeticSequence",
      "spec": "Enumerator::ArithmeticSequence#last",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::ArithmeticSequence#size for finite sequence returns the number of elements in this arithmetic sequence",
      "group": "Enumerator::ArithmeticSequence",
      "spec": "Enumerator::ArithmeticSequence#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::ArithmeticSequence#size for infinite sequence returns Infinity",
      "group": "Enumerator::ArithmeticSequence",
      "spec": "Enumerator::ArithmeticSequence#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::ArithmeticSequence#step returns the original value given to step method",
      "group": "Enumerator::ArithmeticSequence",
      "spec": "Enumerator::ArithmeticSequence#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::ArithmeticSequence.allocate is not defined",
      "group": "Enumerator::ArithmeticSequence",
      "spec": "Enumerator::ArithmeticSequence.allocate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::ArithmeticSequence.new is not defined",
      "group": "Enumerator::ArithmeticSequence",
      "spec": "Enumerator::ArithmeticSequence.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Chain#each calls each on its constituents as needed",
      "group": "Enumerator::Chain",
      "spec": "Enumerator::Chain#each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Chain#initialize accepts arguments that are not Enumerable nor responding to :each",
      "group": "Enumerator::Chain",
      "spec": "Enumerator::Chain#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Chain#initialize accepts many arguments",
      "group": "Enumerator::Chain",
      "spec": "Enumerator::Chain#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Chain#initialize is a private method",
      "group": "Enumerator::Chain",
      "spec": "Enumerator::Chain#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Chain#initialize on frozen instance raises a RuntimeError",
      "group": "Enumerator::Chain",
      "spec": "Enumerator::Chain#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Chain#initialize returns self",
      "group": "Enumerator::Chain",
      "spec": "Enumerator::Chain#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Chain#inspect calls inspect on its chain elements",
      "group": "Enumerator::Chain",
      "spec": "Enumerator::Chain#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Chain#inspect shows a representation of the Enumerator",
      "group": "Enumerator::Chain",
      "spec": "Enumerator::Chain#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Chain#rewind calls rewind only for objects that have actually been iterated on",
      "group": "Enumerator::Chain",
      "spec": "Enumerator::Chain#rewind",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Chain#rewind calls_rewind in reverse order",
      "group": "Enumerator::Chain",
      "spec": "Enumerator::Chain#rewind",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Chain#rewind calls_rewind its objects",
      "group": "Enumerator::Chain",
      "spec": "Enumerator::Chain#rewind",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Chain#rewind does nothing if receiver has not been iterated",
      "group": "Enumerator::Chain",
      "spec": "Enumerator::Chain#rewind",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Chain#rewind does nothing on objects that don't respond_to rewind",
      "group": "Enumerator::Chain",
      "spec": "Enumerator::Chain#rewind",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Chain#rewind returns self",
      "group": "Enumerator::Chain",
      "spec": "Enumerator::Chain#rewind",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Chain#size returns nil or Infinity for the first element of such a size",
      "group": "Enumerator::Chain",
      "spec": "Enumerator::Chain#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Chain#size returns the sum of the sizes of the elements",
      "group": "Enumerator::Chain",
      "spec": "Enumerator::Chain#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Generator#each appends given arguments to receiver.each",
      "group": "Enumerator::Generator",
      "spec": "Enumerator::Generator#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Generator#each is an enumerable",
      "group": "Enumerator::Generator",
      "spec": "Enumerator::Generator#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Generator#each raises a LocalJumpError if no block given",
      "group": "Enumerator::Generator",
      "spec": "Enumerator::Generator#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Generator#each requires multiple arguments",
      "group": "Enumerator::Generator",
      "spec": "Enumerator::Generator#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Generator#each returns the block returned value",
      "group": "Enumerator::Generator",
      "spec": "Enumerator::Generator#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Generator#each supports enumeration with a block",
      "group": "Enumerator::Generator",
      "spec": "Enumerator::Generator#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Generator#initialize is a private method",
      "group": "Enumerator::Generator",
      "spec": "Enumerator::Generator#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Generator#initialize on frozen instance raises a RuntimeError",
      "group": "Enumerator::Generator",
      "spec": "Enumerator::Generator#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Generator#initialize returns self when given a block",
      "group": "Enumerator::Generator",
      "spec": "Enumerator::Generator#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy defines lazy versions of a whitelist of Enumerator methods",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy is a subclass of Enumerator",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#chunk calls the block with gathered values when yield with multiple arguments",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#chunk",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#chunk on a nested Lazy sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#chunk",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#chunk on a nested Lazy when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#chunk",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#chunk returns a new instance of Enumerator::Lazy",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#chunk",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#chunk returns an Enumerator if called without a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#chunk",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#chunk sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#chunk",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#chunk when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#chunk",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#chunk works with an infinite enumerable",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#chunk",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#chunk_while works with an infinite enumerable",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#chunk_while",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#collect calls the block with initial values when yield with multiple arguments",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#collect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#collect keeps size",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#collect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#collect on a nested Lazy keeps size",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#collect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#collect on a nested Lazy when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#collect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#collect returns a new instance of Enumerator::Lazy",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#collect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#collect when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#collect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#collect works with an infinite enumerable",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#collect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#collect_concat calls the block with initial values when yield with multiple arguments",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#collect_concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#collect_concat on a nested Lazy sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#collect_concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#collect_concat on a nested Lazy when the returned lazy enumerator is evaluated by Enumerable#first flattens elements when the given block returned an array or responding to .each and .force",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#collect_concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#collect_concat on a nested Lazy when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#collect_concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#collect_concat raises an ArgumentError when not given a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#collect_concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#collect_concat returns a new instance of Enumerator::Lazy",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#collect_concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#collect_concat sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#collect_concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#collect_concat when the returned lazy enumerator is evaluated by Enumerable#first flattens elements when the given block returned an array or responding to .each and .force",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#collect_concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#collect_concat when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#collect_concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#collect_concat works with an infinite enumerable",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#collect_concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#drop on a nested Lazy sets difference of given count with old size to new size",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#drop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#drop on a nested Lazy when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#drop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#drop returns a new instance of Enumerator::Lazy",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#drop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#drop sets difference of given count with old size to new size",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#drop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#drop when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#drop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#drop works with an infinite enumerable",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#drop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#drop_while calls the block with initial values when yield with multiple arguments",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#drop_while",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#drop_while on a nested Lazy sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#drop_while",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#drop_while on a nested Lazy when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#drop_while",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#drop_while raises an ArgumentError when not given a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#drop_while",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#drop_while returns a new instance of Enumerator::Lazy",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#drop_while",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#drop_while sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#drop_while",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#drop_while when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#drop_while",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#drop_while works with an infinite enumerable",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#drop_while",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#enum_for generates a lazy enumerator from the given name",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#enum_for",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#enum_for passes given arguments to wrapped method",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#enum_for",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#enum_for requires multiple arguments",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#enum_for",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#enum_for returns a new instance of Enumerator::Lazy",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#enum_for",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#enum_for sets #size to nil when not given a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#enum_for",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#enum_for sets given block to size when given a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#enum_for",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#enum_for used by some parent's methods though returning Lazy",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#enum_for",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#enum_for works with an infinite enumerable",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#enum_for",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#filter calls the block with a gathered array when yield with multiple arguments",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#filter on a nested Lazy sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#filter on a nested Lazy when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#filter raises an ArgumentError when not given a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#filter returns a new instance of Enumerator::Lazy",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#filter sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#filter when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#filter works with an infinite enumerable",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#find_all calls the block with a gathered array when yield with multiple arguments",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#find_all",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#find_all on a nested Lazy sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#find_all",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#find_all on a nested Lazy when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#find_all",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#find_all raises an ArgumentError when not given a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#find_all",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#find_all returns a new instance of Enumerator::Lazy",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#find_all",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#find_all sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#find_all",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#find_all when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#find_all",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#find_all works with an infinite enumerable",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#find_all",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#flat_map calls the block with initial values when yield with multiple arguments",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#flat_map",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#flat_map on a nested Lazy sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#flat_map",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#flat_map on a nested Lazy when the returned lazy enumerator is evaluated by Enumerable#first flattens elements when the given block returned an array or responding to .each and .force",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#flat_map",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#flat_map on a nested Lazy when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#flat_map",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#flat_map raises an ArgumentError when not given a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#flat_map",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#flat_map returns a new instance of Enumerator::Lazy",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#flat_map",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#flat_map sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#flat_map",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#flat_map when the returned lazy enumerator is evaluated by Enumerable#first flattens elements when the given block returned an array or responding to .each and .force",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#flat_map",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#flat_map when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#flat_map",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#flat_map works with an infinite enumerable",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#flat_map",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#force on a nested Lazy calls all block and returns an Array",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#force",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#force passes given arguments to receiver.each",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#force",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#force works with an infinite enumerable",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#force",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep calls the block with a gathered array when yield with multiple arguments",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep on a nested Lazy sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep on a nested Lazy when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times when given a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep on a nested Lazy when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times when not given a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep requires an argument",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep returns a new instance of Enumerator::Lazy",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep sets $~ in the block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep sets $~ in the next block with each",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep sets $~ in the next block with map",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times when given a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times when not given a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep works with an infinite enumerable",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep_v calls the block with a gathered array when yield with multiple arguments",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep_v",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep_v on a nested Lazy sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep_v",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep_v on a nested Lazy when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times when given a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep_v",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep_v on a nested Lazy when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times when not given a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep_v",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep_v requires an argument",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep_v",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep_v returns a new instance of Enumerator::Lazy",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep_v",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep_v sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep_v",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep_v sets $~ in the block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep_v",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep_v sets $~ in the next block with each",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep_v",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep_v sets $~ in the next block with map",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep_v",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep_v when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times when given a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep_v",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep_v when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times when not given a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep_v",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#grep_v works with an infinite enumerable",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#grep_v",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#initialize is a private method",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#initialize on frozen instance raises a RuntimeError",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#initialize raises an ArgumentError when block is not given",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#initialize returns self",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#initialize sets #size to nil if given size is nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#initialize sets #size to nil if not given a size",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#initialize sets given size to own size if the given size is Float::INFINITY",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#initialize sets given size to own size if the given size is a Fixnum",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#initialize sets given size to own size if the given size is a Proc",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#initialize when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#lazy returns self",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#lazy",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#map calls the block with initial values when yield with multiple arguments",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#map",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#map doesn't unwrap Arrays",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#map",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#map keeps size",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#map",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#map on a nested Lazy keeps size",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#map",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#map on a nested Lazy when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#map",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#map returns a new instance of Enumerator::Lazy",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#map",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#map when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#map",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#map works with an infinite enumerable",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#map",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#reject calls the block with a gathered array when yield with multiple arguments",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#reject",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#reject lets exceptions raised in the block go through",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#reject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#reject on a nested Lazy sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#reject",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#reject on a nested Lazy when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#reject",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#reject raises an ArgumentError when not given a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#reject",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#reject returns a new instance of Enumerator::Lazy",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#reject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#reject sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#reject",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#reject when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#reject",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#reject works with an infinite enumerable",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#reject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#select calls the block with a gathered array when yield with multiple arguments",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#select",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#select doesn't over-evaluate when peeked",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#select doesn't pre-evaluate the next element",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#select doesn't re-evaluate after peek",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#select on a nested Lazy sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#select",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#select on a nested Lazy when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#select",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#select raises an ArgumentError when not given a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#select",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#select returns a new instance of Enumerator::Lazy",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#select sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#select",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#select when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#select",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#select works with an infinite enumerable",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#slice_after works with an infinite enumerable",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#slice_after",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#slice_before works with an infinite enumerable",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#slice_before",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#slice_when works with an infinite enumerable",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#slice_when",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#take on a nested Lazy sets given count to size if the given count is less than old size",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#take",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#take on a nested Lazy when the returned lazy enumerator is evaluated by .force stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#take",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#take on a nested Lazy when the returned lazy enumerator is evaluated by .force stops without iterations if the given argument is 0",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#take",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#take returns a new instance of Enumerator::Lazy",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#take",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#take sets given count to size if the given count is less than old size",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#take",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#take sets given count to size if the old size is Infinity",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#take",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#take when the returned lazy enumerator is evaluated by .force stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#take",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#take when the returned lazy enumerator is evaluated by .force stops without iterations if the given argument is 0",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#take",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#take_while calls the block with initial values when yield with multiple arguments",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#take_while",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#take_while on a nested Lazy sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#take_while",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#take_while on a nested Lazy when the returned lazy enumerator is evaluated by .force stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#take_while",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#take_while raises an ArgumentError when not given a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#take_while",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#take_while returns a new instance of Enumerator::Lazy",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#take_while",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#take_while sets #size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#take_while",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#take_while when the returned lazy enumerator is evaluated by .force stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#take_while",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#to_enum generates a lazy enumerator from the given name",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#to_enum",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#to_enum passes given arguments to wrapped method",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#to_enum",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#to_enum requires multiple arguments",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#to_enum",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#to_enum returns a new instance of Enumerator::Lazy",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#to_enum",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#to_enum sets #size to nil when not given a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#to_enum",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#to_enum sets given block to size when given a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#to_enum",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#to_enum used by some parent's methods though returning Lazy",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#to_enum",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#to_enum works with an infinite enumerable",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#to_enum",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#uniq when yielded with an argument return same value after rewind",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#uniq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#uniq when yielded with an argument returns a lazy enumerator",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#uniq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#uniq when yielded with an argument sets the size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#uniq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#uniq when yielded with multiple arguments return same value after rewind",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#uniq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#uniq when yielded with multiple arguments returns all yield arguments as an array",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#uniq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#uniq without block return same value after rewind",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#uniq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#uniq without block returns a lazy enumerator",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#uniq",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#uniq without block sets the size to nil",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#uniq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#uniq works with an infinite enumerable",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#uniq",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#zip calls the block with a gathered array when yield with multiple arguments",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#zip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#zip keeps size",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#zip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#zip on a nested Lazy behaves as Enumerable#zip when given a block",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#zip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#zip on a nested Lazy keeps size",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#zip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#zip on a nested Lazy when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#zip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#zip raises a TypeError if arguments contain non-list object",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#zip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#zip returns a Lazy when no arguments given",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#zip",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#zip returns a new instance of Enumerator::Lazy",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#zip",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#zip when the returned lazy enumerator is evaluated by Enumerable#first stops after specified times",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#zip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#zip works with an infinite enumerable and an array",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#zip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Lazy#zip works with two infinite enumerables",
      "group": "Enumerator::Lazy",
      "spec": "Enumerator::Lazy#zip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Yielder#<< doesn't double-wrap Arrays",
      "group": "Enumerator::Yielder",
      "spec": "Enumerator::Yielder#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Yielder#<< returns self",
      "group": "Enumerator::Yielder",
      "spec": "Enumerator::Yielder#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Yielder#<< yields the value to the block",
      "group": "Enumerator::Yielder",
      "spec": "Enumerator::Yielder#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Yielder#initialize is a private method",
      "group": "Enumerator::Yielder",
      "spec": "Enumerator::Yielder#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Yielder#initialize returns self when given a block",
      "group": "Enumerator::Yielder",
      "spec": "Enumerator::Yielder#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Yielder#yield returns the result of the block for the given value",
      "group": "Enumerator::Yielder",
      "spec": "Enumerator::Yielder#yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Yielder#yield yields the value to the block",
      "group": "Enumerator::Yielder",
      "spec": "Enumerator::Yielder#yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Enumerator::Yielder#yield yields with passed arguments",
      "group": "Enumerator::Yielder",
      "spec": "Enumerator::Yielder#yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Errno::EAGAIN is the same class as Errno::EWOULDBLOCK if they represent the same errno value",
      "group": "Errno::EAGAIN",
      "spec": "Errno::EAGAIN",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Errno::EINVAL.new accepts an optional custom message",
      "group": "Errno::EINVAL",
      "spec": "Errno::EINVAL.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Errno::EINVAL.new accepts an optional custom message and location",
      "group": "Errno::EINVAL",
      "spec": "Errno::EINVAL.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Errno::EINVAL.new can be called with no arguments",
      "group": "Errno::EINVAL",
      "spec": "Errno::EINVAL.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Errno::EMFILE can be subclassed",
      "group": "Errno::EMFILE",
      "spec": "Errno::EMFILE",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception is a Class",
      "group": "Exception",
      "spec": "Exception",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception is a superclass of EncodingError",
      "group": "Exception",
      "spec": "Exception",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception is a superclass of Interrupt",
      "group": "Exception",
      "spec": "Exception",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception is a superclass of NoMemoryError",
      "group": "Exception",
      "spec": "Exception",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception is a superclass of ScriptError",
      "group": "Exception",
      "spec": "Exception",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception is a superclass of SecurityError",
      "group": "Exception",
      "spec": "Exception",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception is a superclass of SignalException",
      "group": "Exception",
      "spec": "Exception",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception is a superclass of StandardError",
      "group": "Exception",
      "spec": "Exception",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception is a superclass of SystemExit",
      "group": "Exception",
      "spec": "Exception",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception is a superclass of SystemStackError",
      "group": "Exception",
      "spec": "Exception",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#== returns false if the argument is not an Exception",
      "group": "Exception",
      "spec": "Exception#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#== returns false if the two exceptions differ only in their backtrace",
      "group": "Exception",
      "spec": "Exception#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#== returns false if the two exceptions differ only in their message",
      "group": "Exception",
      "spec": "Exception#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#== returns false if the two exceptions inherit from Exception but have different classes",
      "group": "Exception",
      "spec": "Exception#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#== returns true if both exceptions are the same object",
      "group": "Exception",
      "spec": "Exception#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#== returns true if both exceptions have the same class, no message, and no backtrace",
      "group": "Exception",
      "spec": "Exception#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#== returns true if both exceptions have the same class, the same message, and no backtrace",
      "group": "Exception",
      "spec": "Exception#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#== returns true if both exceptions have the same class, the same message, and the same backtrace",
      "group": "Exception",
      "spec": "Exception#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#== returns true if one exception is the dup'd copy of the other",
      "group": "Exception",
      "spec": "Exception#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#== returns true if the two objects subclass Exception and have the same message and backtrace",
      "group": "Exception",
      "spec": "Exception#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#backtrace contains lines of the same format for each prior position in the stack",
      "group": "Exception",
      "spec": "Exception#backtrace",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#backtrace includes the filename of the location immediately prior to where self raised in the second element",
      "group": "Exception",
      "spec": "Exception#backtrace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#backtrace includes the filename of the location where self raised in the first element",
      "group": "Exception",
      "spec": "Exception#backtrace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#backtrace includes the line number of the location immediately prior to where self raised in the second element",
      "group": "Exception",
      "spec": "Exception#backtrace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#backtrace includes the line number of the location where self raised in the first element",
      "group": "Exception",
      "spec": "Exception#backtrace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#backtrace includes the name of the method from where self raised in the first element",
      "group": "Exception",
      "spec": "Exception#backtrace",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#backtrace produces a backtrace for an exception captured using $!",
      "group": "Exception",
      "spec": "Exception#backtrace",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#backtrace returns an Array",
      "group": "Exception",
      "spec": "Exception#backtrace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#backtrace returns an Array that can be updated",
      "group": "Exception",
      "spec": "Exception#backtrace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#backtrace returns nil if no backtrace was set",
      "group": "Exception",
      "spec": "Exception#backtrace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#backtrace returns the same array after duping",
      "group": "Exception",
      "spec": "Exception#backtrace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#backtrace sets each element to a String",
      "group": "Exception",
      "spec": "Exception#backtrace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#backtrace_locations produces a backtrace for an exception captured using $!",
      "group": "Exception",
      "spec": "Exception#backtrace_locations",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#backtrace_locations returns an Array",
      "group": "Exception",
      "spec": "Exception#backtrace_locations",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#backtrace_locations returns an Array that can be updated",
      "group": "Exception",
      "spec": "Exception#backtrace_locations",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#backtrace_locations returns nil if no backtrace was set",
      "group": "Exception",
      "spec": "Exception#backtrace_locations",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#backtrace_locations sets each element to a Thread::Backtrace::Location",
      "group": "Exception",
      "spec": "Exception#backtrace_locations",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#cause is not set to the exception itself when it is re-raised",
      "group": "Exception",
      "spec": "Exception#cause",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#cause is set for internal errors caused by user errors",
      "group": "Exception",
      "spec": "Exception#cause",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#cause is set for user errors caused by internal errors",
      "group": "Exception",
      "spec": "Exception#cause",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#cause returns the active exception when an exception is raised",
      "group": "Exception",
      "spec": "Exception#cause",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#dup calls #initialize_copy on the new instance",
      "group": "Exception",
      "spec": "Exception#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#dup copies instance variables",
      "group": "Exception",
      "spec": "Exception#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#dup does copy the backtrace",
      "group": "Exception",
      "spec": "Exception#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#dup does copy the cause",
      "group": "Exception",
      "spec": "Exception#dup",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#dup does copy the message",
      "group": "Exception",
      "spec": "Exception#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#dup does not copy constants defined in the singleton class",
      "group": "Exception",
      "spec": "Exception#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#dup does not copy modules included in the singleton class",
      "group": "Exception",
      "spec": "Exception#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#dup does not copy singleton methods",
      "group": "Exception",
      "spec": "Exception#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#exception returns an exception of the same class as self with the message given as argument",
      "group": "Exception",
      "spec": "Exception#exception",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#exception returns an exception of the same class as self with the message given as argument, but without reinitializing",
      "group": "Exception",
      "spec": "Exception#exception",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#exception returns self when passed no argument",
      "group": "Exception",
      "spec": "Exception#exception",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#exception returns self when passed self as an argument",
      "group": "Exception",
      "spec": "Exception#exception",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#exception when raised will be rescued as the new exception",
      "group": "Exception",
      "spec": "Exception#exception",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#full_message contains all the chain of exceptions",
      "group": "Exception",
      "spec": "Exception#full_message",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#full_message contains cause of exception",
      "group": "Exception",
      "spec": "Exception#full_message",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#full_message returns formatted string of exception using the same format that is used to print an uncaught exceptions to stderr",
      "group": "Exception",
      "spec": "Exception#full_message",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#full_message shows the caller if the exception has no backtrace",
      "group": "Exception",
      "spec": "Exception#full_message",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#full_message shows the exception class at the end of the first line of the message when the message contains multiple lines",
      "group": "Exception",
      "spec": "Exception#full_message",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#full_message supports :highlight option and adds escape sequences to highlight some strings",
      "group": "Exception",
      "spec": "Exception#full_message",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#full_message supports :order option and places the error message and the backtrace at the top or the bottom",
      "group": "Exception",
      "spec": "Exception#full_message",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#inspect includes #to_s when the result is non-empty",
      "group": "Exception",
      "spec": "Exception#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#inspect returns '#<Exception: Exception>' when no message given",
      "group": "Exception",
      "spec": "Exception#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#inspect returns the class name when #to_s returns an empty string",
      "group": "Exception",
      "spec": "Exception#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#inspect returns the derived class name with a subclassed Exception",
      "group": "Exception",
      "spec": "Exception#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#message calls #to_s on self",
      "group": "Exception",
      "spec": "Exception#message",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#message returns the class name if there is no message",
      "group": "Exception",
      "spec": "Exception#message",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#message returns the message passed to #initialize",
      "group": "Exception",
      "spec": "Exception#message",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#message when #backtrace is redefined returns the Exception message",
      "group": "Exception",
      "spec": "Exception#message",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#set_backtrace accepts a String",
      "group": "Exception",
      "spec": "Exception#set_backtrace",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#set_backtrace accepts an Array of Strings",
      "group": "Exception",
      "spec": "Exception#set_backtrace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#set_backtrace accepts an empty Array",
      "group": "Exception",
      "spec": "Exception#set_backtrace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#set_backtrace accepts nil",
      "group": "Exception",
      "spec": "Exception#set_backtrace",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#set_backtrace allows the user to set the backtrace from a rescued exception",
      "group": "Exception",
      "spec": "Exception#set_backtrace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#set_backtrace raises a TypeError when passed a Symbol",
      "group": "Exception",
      "spec": "Exception#set_backtrace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#set_backtrace raises a TypeError when the Array contains a Symbol",
      "group": "Exception",
      "spec": "Exception#set_backtrace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#set_backtrace raises a TypeError when the argument is a nested array",
      "group": "Exception",
      "spec": "Exception#set_backtrace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#set_backtrace raises a TypeError when the array contains nil",
      "group": "Exception",
      "spec": "Exception#set_backtrace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#to_s calls #to_s on the message",
      "group": "Exception",
      "spec": "Exception#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Exception#to_s returns self's message if set",
      "group": "Exception",
      "spec": "Exception#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception#to_s returns the self's name if no message is set",
      "group": "Exception",
      "spec": "Exception#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception.exception creates a new instance of Exception",
      "group": "Exception",
      "spec": "Exception.exception",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception.exception returns 'Exception' for message when no message given",
      "group": "Exception",
      "spec": "Exception.exception",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception.exception returns the exception when it has a custom constructor",
      "group": "Exception",
      "spec": "Exception.exception",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception.exception sets the message of the Exception when passes a message",
      "group": "Exception",
      "spec": "Exception.exception",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception.new creates a new instance of Exception",
      "group": "Exception",
      "spec": "Exception.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception.new returns 'Exception' for message when no message given",
      "group": "Exception",
      "spec": "Exception.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception.new returns the exception when it has a custom constructor",
      "group": "Exception",
      "spec": "Exception.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Exception.new sets the message of the Exception when passes a message",
      "group": "Exception",
      "spec": "Exception.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:FalseClass .allocate raises a TypeError",
      "group": "FalseClass",
      "spec": "FalseClass",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:FalseClass .new is undefined",
      "group": "FalseClass",
      "spec": "FalseClass",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:FalseClass#& returns false",
      "group": "FalseClass",
      "spec": "FalseClass#&",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:FalseClass#^ returns false if other is nil or false, otherwise true",
      "group": "FalseClass",
      "spec": "FalseClass#^",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:FalseClass#dup returns self",
      "group": "FalseClass",
      "spec": "FalseClass#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:FalseClass#inspect returns the string 'false'",
      "group": "FalseClass",
      "spec": "FalseClass#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:FalseClass#to_s returns the string 'false'",
      "group": "FalseClass",
      "spec": "FalseClass#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:FalseClass#| returns false if other is nil or false, otherwise true",
      "group": "FalseClass",
      "spec": "FalseClass#|",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber#resume accepts any number of arguments",
      "group": "Fiber",
      "spec": "Fiber#resume",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber#resume can be invoked from the root Fiber",
      "group": "Fiber",
      "spec": "Fiber#resume",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber#resume executes the ensure clause",
      "group": "Fiber",
      "spec": "Fiber#resume",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Fiber#resume passes control to the beginning of the block on first invocation",
      "group": "Fiber",
      "spec": "Fiber#resume",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber#resume raises a FiberError if invoked from a different Thread",
      "group": "Fiber",
      "spec": "Fiber#resume",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Fiber#resume raises a FiberError if the Fiber is dead",
      "group": "Fiber",
      "spec": "Fiber#resume",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber#resume raises a FiberError if the Fiber tries to resume itself",
      "group": "Fiber",
      "spec": "Fiber#resume",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber#resume raises a LocalJumpError if the block includes a break statement",
      "group": "Fiber",
      "spec": "Fiber#resume",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber#resume raises a LocalJumpError if the block includes a return statement",
      "group": "Fiber",
      "spec": "Fiber#resume",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber#resume resumes from the last call to Fiber.yield on subsequent invocations",
      "group": "Fiber",
      "spec": "Fiber#resume",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber#resume returns control to the calling Fiber if called from one",
      "group": "Fiber",
      "spec": "Fiber#resume",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber#resume returns the last value encountered on first invocation",
      "group": "Fiber",
      "spec": "Fiber#resume",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber#resume runs until Fiber.yield",
      "group": "Fiber",
      "spec": "Fiber#resume",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber#resume runs until the end of the block",
      "group": "Fiber",
      "spec": "Fiber#resume",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber#resume sets the block parameters to its arguments on the first invocation",
      "group": "Fiber",
      "spec": "Fiber#resume",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber.new closes over lexical environments",
      "group": "Fiber",
      "spec": "Fiber.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber.new creates a fiber from a subclass",
      "group": "Fiber",
      "spec": "Fiber.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber.new creates a fiber from the given block",
      "group": "Fiber",
      "spec": "Fiber.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber.new does not invoke the block",
      "group": "Fiber",
      "spec": "Fiber.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber.new raises an ArgumentError if called without a block",
      "group": "Fiber",
      "spec": "Fiber.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber.yield does not propagate or reraise a rescued exception",
      "group": "Fiber",
      "spec": "Fiber.yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber.yield passes control to the Fiber's caller",
      "group": "Fiber",
      "spec": "Fiber.yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber.yield raises a FiberError if called from the root Fiber",
      "group": "Fiber",
      "spec": "Fiber.yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber.yield returns its arguments to the caller",
      "group": "Fiber",
      "spec": "Fiber.yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber.yield returns nil to the caller if given no arguments",
      "group": "Fiber",
      "spec": "Fiber.yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Fiber.yield returns to the Fiber the value of the #resume call that invoked it",
      "group": "Fiber",
      "spec": "Fiber.yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:File includes Enumerable",
      "group": "File",
      "spec": "File",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File includes File::Constants",
      "group": "File",
      "spec": "File",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#atime returns the last access time to self",
      "group": "File",
      "spec": "File#atime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#ctime returns the change time for the named file (the time at which directory information about the file was changed, not the file itself).",
      "group": "File",
      "spec": "File#ctime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#flock blocks if trying to lock an exclusively locked file",
      "group": "File",
      "spec": "File#flock",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#flock exclusively locks a file",
      "group": "File",
      "spec": "File#flock",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#flock non-exclusively locks a file",
      "group": "File",
      "spec": "File#flock",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#flock returns 0 if trying to lock a non-exclusively locked file",
      "group": "File",
      "spec": "File#flock",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#flock returns false if trying to lock an exclusively locked file",
      "group": "File",
      "spec": "File#flock",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#initialize accepts encoding options as a hash parameter",
      "group": "File",
      "spec": "File#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#initialize accepts encoding options in mode parameter",
      "group": "File",
      "spec": "File#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#inspect returns a String",
      "group": "File",
      "spec": "File#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#lstat needs to be reviewed for spec completeness",
      "group": "File",
      "spec": "File#lstat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:File#mtime returns the modification Time of the file",
      "group": "File",
      "spec": "File#mtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#path calls to_str on argument and returns exact value",
      "group": "File",
      "spec": "File#path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#path does not absolute-ise the path it returns",
      "group": "File",
      "spec": "File#path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#path does not canonicalize the path it returns",
      "group": "File",
      "spec": "File#path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#path does not normalise the path it returns",
      "group": "File",
      "spec": "File#path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#path preserves the encoding of the path",
      "group": "File",
      "spec": "File#path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#path returns a String",
      "group": "File",
      "spec": "File#path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf faulty key raises a KeyError",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf faulty key sets the Hash as the receiver of KeyError",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf faulty key sets the unmatched key as the key of KeyError",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags # applies to format o does nothing for negative argument",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags # applies to format o increases the precision until the first digit will be `0' if it is not formatted as complements",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags # applies to formats aAeEfgG changes format from dd.dddd to exponential form for gG",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags # applies to formats aAeEfgG forces a decimal point to be added, even if no digits follow",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags # applies to formats bBxX does nothing for zero argument",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags # applies to formats bBxX prefixes the result with 0x, 0X, 0b and 0B respectively for non-zero argument",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags # applies to gG does not remove trailing zeros",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags (digit)$ ignores '-' sign",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags (digit)$ raises ArgumentError exception when absolute and relative argument numbers are mixed",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags (digit)$ raises exception if argument number is bigger than actual arguments list",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags (digit)$ specifies the absolute argument number for this field",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags * left-justifies the result if specified with $ argument is negative",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags * left-justifies the result if width is negative",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags * raises ArgumentError when is mixed with width",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags * uses the previous argument as the field width",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags * uses the specified argument as the width if * is followed by a number and $",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags + applies to numeric formats bBdiouxXaAeEfgG adds a leading plus sign to non-negative numbers",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags + applies to numeric formats bBdiouxXaAeEfgG does not use two's complement form for negative numbers for formats bBoxX",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags - left-justifies the result of conversion if width is specified",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags 0 (zero) applies to numeric formats bBdiouxXaAeEfgG and width is specified pads with zeros, not spaces",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags 0 (zero) applies to numeric formats bBdiouxXaAeEfgG and width is specified uses radix-1 when displays negative argument as a two's complement",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags space applies to numeric formats bBdiouxXeEfgGaA does not leave a space at the start of negative numbers",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags space applies to numeric formats bBdiouxXeEfgGaA leaves a space at the start of non-negative numbers",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags space applies to numeric formats bBdiouxXeEfgGaA prevents converting negative argument to two's complement form",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf flags space applies to numeric formats bBdiouxXeEfgGaA treats several white spaces as one",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats A converts floating point argument as [-]0xh.hhhhp[+-]dd and use uppercase X and P",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats A displays Float::INFINITY as Inf",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats A displays Float::NAN as NaN",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats E converts argument into exponential notation [-]d.dddddde[+-]dd",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats E cuts excessive digits and keeps only 6 ones",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats E displays Float::INFINITY as Inf",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats E displays Float::NAN as NaN",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats E rounds the last significant digit to the closest one",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats G displays Float::INFINITY as Inf",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats G displays Float::NAN as NaN",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats G otherwise converts a floating point number in dd.dddd form",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats G otherwise cuts excessive digits in fractional part and keeps only 4 ones",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats G otherwise cuts fraction part to have only 6 digits at all",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats G otherwise rounds the last significant digit to the closest one in fractional part",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats G the exponent is greater than or equal to the precision (6 by default) converts a floating point number using exponential form",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats G the exponent is less than -4 converts a floating point number using exponential form",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats a converts floating point argument as [-]0xh.hhhhp[+-]dd",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats a displays Float::INFINITY as Inf",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats a displays Float::NAN as NaN",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats converts argument into Float",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats e converts argument into exponential notation [-]d.dddddde[+-]dd",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats e cuts excessive digits and keeps only 6 ones",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats e displays Float::INFINITY as Inf",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats e displays Float::NAN as NaN",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats e rounds the last significant digit to the closest one",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats f converts floating point argument as [-]ddd.dddddd",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats f cuts excessive digits and keeps only 6 ones",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats f displays Float::INFINITY as Inf",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats f displays Float::NAN as NaN",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats f rounds the last significant digit to the closest one",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats g displays Float::INFINITY as Inf",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats g displays Float::NAN as NaN",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats g otherwise converts a floating point number in dd.dddd form",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats g otherwise cuts excessive digits in fractional part and keeps only 4 ones",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats g otherwise cuts fraction part to have only 6 digits at all",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats g otherwise rounds the last significant digit to the closest one in fractional part",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats g the exponent is greater than or equal to the precision (6 by default) converts a floating point number using exponential form",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats g the exponent is less than -4 converts a floating point number using exponential form",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf float formats raises TypeError exception if cannot convert to Float",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats B collapse negative number representation if it equals 1",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats B converts argument as a binary number",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats B displays negative number as a two's complement prefixed with '..1'",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats X collapse negative number representation if it equals F",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats X converts argument as a hexadecimal number with uppercase letters",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats X displays negative number as a two's complement prefixed with '..f'",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats b collapse negative number representation if it equals 1",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats b converts argument as a binary number",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats b displays negative number as a two's complement prefixed with '..1'",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats converts String argument with Kernel#Integer",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats converts argument into Integer with to_i if to_int isn't available",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats converts argument into Integer with to_int",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats d converts argument as a decimal number",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats d works well with large numbers",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats i converts argument as a decimal number",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats i works well with large numbers",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats o collapse negative number representation if it equals 7",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats o converts argument as an octal number",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats o displays negative number as a two's complement prefixed with '..7'",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats raises TypeError exception if cannot convert to Integer",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats u converts argument as a decimal number",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats u works well with large numbers",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats x collapse negative number representation if it equals f",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats x converts argument as a hexadecimal number",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf integer formats x displays negative number as a two's complement prefixed with '..f'",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf other formats % alone raises an ArgumentError",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf other formats % is escaped by %",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf other formats c displays character if argument is a numeric code of character",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf other formats c displays character if argument is a single character string",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf other formats c raises ArgumentError if argument is a string of several characters",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf other formats c raises ArgumentError if argument is an empty string",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf other formats c supports Unicode characters",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf other formats p displays argument.inspect value",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf other formats s converts argument to string with to_s",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf other formats s does not try to convert with to_str",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf other formats s substitute argument passes as a string",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf precision float types controls the number of decimal places displayed in fraction part",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf precision float types does not affect G format",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf precision integer types controls the number of decimal places displayed",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf precision string formats determines the maximum number of characters to be copied from the string",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf reference by name %<name>s style allows to place name in any position",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf reference by name %<name>s style cannot be mixed with unnamed style",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf reference by name %<name>s style supports flags, width, precision and type",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf reference by name %<name>s style uses value passed in a hash argument",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf reference by name %{name} style cannot be mixed with unnamed style",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf reference by name %{name} style converts value to String with to_s",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf reference by name %{name} style does not support type style",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf reference by name %{name} style raises KeyError when there is no matching key",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf reference by name %{name} style supports flags, width and precision",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf reference by name %{name} style uses value passed in a hash argument",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf width is ignored if argument's actual length is greater",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#printf width specifies the minimum number of characters that will be written to the result",
      "group": "File",
      "spec": "File#printf",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#reopen calls #to_path to convert an Object",
      "group": "File",
      "spec": "File#reopen",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#reopen resets the stream to a new file path",
      "group": "File",
      "spec": "File#reopen",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#size follows symlinks if necessary",
      "group": "File",
      "spec": "File#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#size for an empty file returns 0",
      "group": "File",
      "spec": "File#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#size is an instance method",
      "group": "File",
      "spec": "File#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#size raises an IOError on a closed file",
      "group": "File",
      "spec": "File#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#size returns the cached size of the file if subsequently deleted",
      "group": "File",
      "spec": "File#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#size returns the file's current size even if modified",
      "group": "File",
      "spec": "File#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#size returns the file's size as a Fixnum",
      "group": "File",
      "spec": "File#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#size returns the file's size in bytes",
      "group": "File",
      "spec": "File#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#to_path calls to_str on argument and returns exact value",
      "group": "File",
      "spec": "File#to_path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#to_path does not absolute-ise the path it returns",
      "group": "File",
      "spec": "File#to_path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#to_path does not canonicalize the path it returns",
      "group": "File",
      "spec": "File#to_path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#to_path does not normalise the path it returns",
      "group": "File",
      "spec": "File#to_path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#to_path preserves the encoding of the path",
      "group": "File",
      "spec": "File#to_path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#to_path returns a String",
      "group": "File",
      "spec": "File#to_path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#truncate does not move the file read pointer to the specified byte offset",
      "group": "File",
      "spec": "File#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#truncate does not move the file write pointer to the specified byte offset",
      "group": "File",
      "spec": "File#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#truncate raises a TypeError if not passed an Integer type for the for the argument",
      "group": "File",
      "spec": "File#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#truncate raises an ArgumentError if not passed one argument",
      "group": "File",
      "spec": "File#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#truncate raises an Errno::EINVAL if the length argument is not valid",
      "group": "File",
      "spec": "File#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#truncate raises an IOError if file is closed",
      "group": "File",
      "spec": "File#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#truncate raises an IOError if file is not opened for writing",
      "group": "File",
      "spec": "File#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#truncate truncates a file",
      "group": "File",
      "spec": "File#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#truncate truncates a file size to 0",
      "group": "File",
      "spec": "File#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#truncate truncates a file size to 5",
      "group": "File",
      "spec": "File#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#truncate truncates a file to a larger size than the original file",
      "group": "File",
      "spec": "File#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File#truncate truncates a file to the same size as the original file",
      "group": "File",
      "spec": "File#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.absolute_path accepts a second argument of a directory from which to resolve the path",
      "group": "File",
      "spec": "File.absolute_path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.absolute_path calls #to_path on its argument",
      "group": "File",
      "spec": "File.absolute_path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.absolute_path does not expand '~' to a home directory.",
      "group": "File",
      "spec": "File.absolute_path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.absolute_path does not expand '~user' to a home directory.",
      "group": "File",
      "spec": "File.absolute_path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.absolute_path resolves paths relative to the current working directory",
      "group": "File",
      "spec": "File.absolute_path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.absolute_path returns the argument if it's an absolute pathname",
      "group": "File",
      "spec": "File.absolute_path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.atime accepts an object that has a #to_path method",
      "group": "File",
      "spec": "File.atime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.atime raises an Errno::ENOENT exception if the file is not found",
      "group": "File",
      "spec": "File.atime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.atime returns the last access time for the named file as a Time object",
      "group": "File",
      "spec": "File.atime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.atime returns the last access time for the named file with microseconds",
      "group": "File",
      "spec": "File.atime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.basename accepts an object that has a #to_path method",
      "group": "File",
      "spec": "File.basename",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.basename ignores a trailing directory separator",
      "group": "File",
      "spec": "File.basename",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.basename raises a TypeError if the arguments are not String types",
      "group": "File",
      "spec": "File.basename",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.basename raises an ArgumentError if passed more than two arguments",
      "group": "File",
      "spec": "File.basename",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.basename returns an string",
      "group": "File",
      "spec": "File.basename",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.basename returns the basename for edge cases",
      "group": "File",
      "spec": "File.basename",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.basename returns the basename for unix format",
      "group": "File",
      "spec": "File.basename",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.basename returns the basename for unix suffix",
      "group": "File",
      "spec": "File.basename",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.basename returns the basename of a path (basic cases)",
      "group": "File",
      "spec": "File.basename",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.basename returns the basename with the same encoding as the original",
      "group": "File",
      "spec": "File.basename",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.basename returns the extension for a multibyte filename",
      "group": "File",
      "spec": "File.basename",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.basename returns the last component of the filename",
      "group": "File",
      "spec": "File.basename",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.basename takes into consideration the platform path separator(s)",
      "group": "File",
      "spec": "File.basename",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.ctime accepts an object that has a #to_path method",
      "group": "File",
      "spec": "File.ctime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.ctime raises an Errno::ENOENT exception if the file is not found",
      "group": "File",
      "spec": "File.ctime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.ctime returns the change time for the named file (the time at which directory information about the file was changed, not the file itself) with microseconds.",
      "group": "File",
      "spec": "File.ctime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.ctime returns the change time for the named file (the time at which directory information about the file was changed, not the file itself).",
      "group": "File",
      "spec": "File.ctime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.delete accepts an object that has a #to_path method",
      "group": "File",
      "spec": "File.delete",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.delete coerces a given parameter into a string if possible",
      "group": "File",
      "spec": "File.delete",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.delete deletes a single file",
      "group": "File",
      "spec": "File.delete",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.delete deletes multiple files",
      "group": "File",
      "spec": "File.delete",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.delete raises a TypeError if not passed a String type",
      "group": "File",
      "spec": "File.delete",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.delete raises an Errno::ENOENT when the given file doesn't exist",
      "group": "File",
      "spec": "File.delete",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.delete returns 0 when called without arguments",
      "group": "File",
      "spec": "File.delete",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.dirname accepts an object that has a #to_path method",
      "group": "File",
      "spec": "File.dirname",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.dirname does not modify its argument",
      "group": "File",
      "spec": "File.dirname",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.dirname ignores a trailing /",
      "group": "File",
      "spec": "File.dirname",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.dirname raises a TypeError if not passed a String type",
      "group": "File",
      "spec": "File.dirname",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.dirname returns a String",
      "group": "File",
      "spec": "File.dirname",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.dirname returns all the components of filename except the last one",
      "group": "File",
      "spec": "File.dirname",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.dirname returns all the components of filename except the last one (edge cases on all platforms)",
      "group": "File",
      "spec": "File.dirname",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.dirname returns all the components of filename except the last one (edge cases on non-windows)",
      "group": "File",
      "spec": "File.dirname",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.dirname returns the return all the components of filename except the last one (unix format)",
      "group": "File",
      "spec": "File.dirname",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.extname accepts an object that has a #to_path method",
      "group": "File",
      "spec": "File.extname",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.extname raises a TypeError if not passed a String type",
      "group": "File",
      "spec": "File.extname",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.extname raises an ArgumentError if not passed one argument",
      "group": "File",
      "spec": "File.extname",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.extname returns only the last extension of a file with several dots",
      "group": "File",
      "spec": "File.extname",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.extname returns the extension (the portion of file name in path after the period).",
      "group": "File",
      "spec": "File.extname",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.extname returns the extension (the portion of file name in path after the period).(edge cases)",
      "group": "File",
      "spec": "File.extname",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.extname returns the extension for a multibyte filename",
      "group": "File",
      "spec": "File.extname",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch accepts an object that has a #to_path method",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch does not match '/' characters inside bracket expressions when flags includes FNM_PATHNAME",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch does not match '/' characters with ? or * when flags includes FNM_PATHNAME",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch does not match characters outside of the range of the bracket expression",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch does not match leading periods in filenames with wildcards by default",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch does not match partial strings",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch does not raise a TypeError if the third argument can be coerced to an Integer",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch does not support { } patterns by default",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch doesn't match an extra } when File::FNM_EXTGLOB is passed",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch doesn't match case sensitive characters on platforms with case sensitive paths, when flags include FNM_SYSCASE",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch doesn't support some { } patterns even when File::FNM_EXTGLOB is passed",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch escapes special characters inside bracket expression",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch matches '\\' characters in path when flags includes FNM_NOESACPE",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch matches a single character for each ? character",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch matches characters with a case sensitive comparison",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch matches characters with case insensitive comparison when flags includes FNM_CASEFOLD",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch matches entire strings",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch matches leading periods in filenames when flags includes FNM_DOTMATCH",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch matches literal ? or * in path when pattern includes \\? or \\*",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch matches literal character (e.g. 'a') in path when pattern includes escaped character (e.g. \\a)",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch matches multibyte characters",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch matches multiple directories with ** and *",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch matches multiple directories with ** when flags includes File::FNM_PATHNAME",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch matches patterns with leading periods to dotfiles by default",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch matches ranges of characters using bracket expression (e.g. [a-z])",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch matches ranges of characters using bracket expression, taking case into account",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch matches ranges of characters using exclusive bracket expression (e.g. [^t] or [!t])",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch matches when both FNM_EXTGLOB and FNM_PATHNAME are passed",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch matches zero or more characters for each * character",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch raises a TypeError if the first and second arguments are not string-like",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch raises a TypeError if the third argument is not an Integer",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch returns false if '/' in pattern do not match '/' in path when flags includes FNM_PATHNAME",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch returns true if '/' in pattern match '/' in path when flags includes FNM_PATHNAME",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch supports some { } patterns when File::FNM_EXTGLOB is passed",
      "group": "File",
      "spec": "File.fnmatch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? accepts an object that has a #to_path method",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? does not match '/' characters inside bracket expressions when flags includes FNM_PATHNAME",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? does not match '/' characters with ? or * when flags includes FNM_PATHNAME",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? does not match characters outside of the range of the bracket expression",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? does not match leading periods in filenames with wildcards by default",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? does not match partial strings",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? does not raise a TypeError if the third argument can be coerced to an Integer",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? does not support { } patterns by default",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? doesn't match an extra } when File::FNM_EXTGLOB is passed",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? doesn't match case sensitive characters on platforms with case sensitive paths, when flags include FNM_SYSCASE",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? doesn't support some { } patterns even when File::FNM_EXTGLOB is passed",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? escapes special characters inside bracket expression",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? matches '\\' characters in path when flags includes FNM_NOESACPE",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? matches a single character for each ? character",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? matches characters with a case sensitive comparison",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? matches characters with case insensitive comparison when flags includes FNM_CASEFOLD",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? matches entire strings",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? matches leading periods in filenames when flags includes FNM_DOTMATCH",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? matches literal ? or * in path when pattern includes \\? or \\*",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? matches literal character (e.g. 'a') in path when pattern includes escaped character (e.g. \\a)",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? matches multibyte characters",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? matches multiple directories with ** and *",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? matches multiple directories with ** when flags includes File::FNM_PATHNAME",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? matches patterns with leading periods to dotfiles by default",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? matches ranges of characters using bracket expression (e.g. [a-z])",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? matches ranges of characters using bracket expression, taking case into account",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? matches ranges of characters using exclusive bracket expression (e.g. [^t] or [!t])",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? matches when both FNM_EXTGLOB and FNM_PATHNAME are passed",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? matches zero or more characters for each * character",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? raises a TypeError if the first and second arguments are not string-like",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? raises a TypeError if the third argument is not an Integer",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? returns false if '/' in pattern do not match '/' in path when flags includes FNM_PATHNAME",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? returns true if '/' in pattern match '/' in path when flags includes FNM_PATHNAME",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.fnmatch? supports some { } patterns when File::FNM_EXTGLOB is passed",
      "group": "File",
      "spec": "File.fnmatch?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.join calls #to_path",
      "group": "File",
      "spec": "File.join",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.join calls #to_str",
      "group": "File",
      "spec": "File.join",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.join changes only boundaries separators",
      "group": "File",
      "spec": "File.join",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.join does not treat \\ as a separator on non-Windows",
      "group": "File",
      "spec": "File.join",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.join doesn't mutate the object when calling #to_str",
      "group": "File",
      "spec": "File.join",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.join flattens nested arrays",
      "group": "File",
      "spec": "File.join",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.join handles leading parts edge cases",
      "group": "File",
      "spec": "File.join",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.join handles middle parts edge cases",
      "group": "File",
      "spec": "File.join",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.join handles trailing parts edge cases",
      "group": "File",
      "spec": "File.join",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.join inserts the separator in between empty strings and arrays",
      "group": "File",
      "spec": "File.join",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.join joins parts using File::SEPARATOR if there are no boundary separators",
      "group": "File",
      "spec": "File.join",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.join prefers the separator of the right part if both parts have separators",
      "group": "File",
      "spec": "File.join",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.join raises a TypeError exception when args are nil",
      "group": "File",
      "spec": "File.join",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.join raises an ArgumentError if passed a recursive array",
      "group": "File",
      "spec": "File.join",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.join respects the given separator if only one part has a boundary separator",
      "group": "File",
      "spec": "File.join",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.join returns a duplicate string when given a single argument",
      "group": "File",
      "spec": "File.join",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.join returns an empty string when given no arguments",
      "group": "File",
      "spec": "File.join",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.join supports any number of arguments",
      "group": "File",
      "spec": "File.join",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.lchmod raises a NotImplementedError when called",
      "group": "File",
      "spec": "File.lchmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.lchmod returns false from #respond_to?",
      "group": "File",
      "spec": "File.lchmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.link link a file with another",
      "group": "File",
      "spec": "File.link",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.link raises a TypeError if not passed String types",
      "group": "File",
      "spec": "File.link",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.link raises an ArgumentError if not passed two arguments",
      "group": "File",
      "spec": "File.link",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.link raises an Errno::EEXIST if the target already exists",
      "group": "File",
      "spec": "File.link",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.lstat accepts an object that has a #to_path method",
      "group": "File",
      "spec": "File.lstat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.lstat raises an Errno::ENOENT if the file does not exist",
      "group": "File",
      "spec": "File.lstat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.lstat returns a File::Stat object if the given file exists",
      "group": "File",
      "spec": "File.lstat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.lstat returns a File::Stat object when called on an instance of File",
      "group": "File",
      "spec": "File.lstat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.lstat returns a File::Stat object with symlink properties for a symlink",
      "group": "File",
      "spec": "File.lstat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.mkfifo creates a FIFO file at the passed path",
      "group": "File",
      "spec": "File.mkfifo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.mkfifo creates a FIFO file with a default mode of 0666 & ~umask",
      "group": "File",
      "spec": "File.mkfifo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.mkfifo creates a FIFO file with passed mode & ~umask",
      "group": "File",
      "spec": "File.mkfifo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.mkfifo returns 0 after creating the FIFO file",
      "group": "File",
      "spec": "File.mkfifo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.mkfifo when path does not exist raises an Errno::ENOENT exception",
      "group": "File",
      "spec": "File.mkfifo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.mkfifo when path passed is not a String value raises a TypeError",
      "group": "File",
      "spec": "File.mkfifo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.mkfifo when path passed responds to :to_path creates a FIFO file at the path specified",
      "group": "File",
      "spec": "File.mkfifo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.mtime raises an Errno::ENOENT exception if the file is not found",
      "group": "File",
      "spec": "File.mtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.mtime returns the modification Time of the file",
      "group": "File",
      "spec": "File.mtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.mtime returns the modification Time of the file with microseconds",
      "group": "File",
      "spec": "File.mtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.new can't alter mode or permissions when opening a file",
      "group": "File",
      "spec": "File.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.new coerces filename using #to_path",
      "group": "File",
      "spec": "File.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.new coerces filename using to_str",
      "group": "File",
      "spec": "File.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.new creates a new file when use File::EXCL mode",
      "group": "File",
      "spec": "File.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.new creates a new file when use File::WRONLY|File::APPEND mode",
      "group": "File",
      "spec": "File.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.new creates a new file when use File::WRONLY|File::TRUNC mode",
      "group": "File",
      "spec": "File.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.new creates the file and returns writable descriptor when called with 'w' mode and r-o permissions",
      "group": "File",
      "spec": "File.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.new opens directories",
      "group": "File",
      "spec": "File.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.new opens the existing file, does not change permissions even when they are specified",
      "group": "File",
      "spec": "File.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.new raises a TypeError if the first parameter can't be coerced to a string",
      "group": "File",
      "spec": "File.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.new raises a TypeError if the first parameter is nil",
      "group": "File",
      "spec": "File.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.new raises an Errno::EBADF if the first parameter is an invalid file descriptor",
      "group": "File",
      "spec": "File.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.new raises an Errorno::EEXIST if the file exists when create a new file with File::CREAT|File::EXCL",
      "group": "File",
      "spec": "File.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.new returns a new File when use File::APPEND mode",
      "group": "File",
      "spec": "File.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.new returns a new File when use File::RDONLY|File::APPEND mode",
      "group": "File",
      "spec": "File.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.new returns a new File when use File::RDONLY|File::WRONLY mode",
      "group": "File",
      "spec": "File.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.new returns a new File with mode num",
      "group": "File",
      "spec": "File.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.new returns a new File with mode string",
      "group": "File",
      "spec": "File.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.new returns a new File with modus fd",
      "group": "File",
      "spec": "File.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.new returns a new File with modus num and permissions",
      "group": "File",
      "spec": "File.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.open opens directories",
      "group": "File",
      "spec": "File.open",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.open when passed a file descriptor opens a file",
      "group": "File",
      "spec": "File.open",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.open when passed a file descriptor opens a file when passed a block",
      "group": "File",
      "spec": "File.open",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.path calls #to_path for non-string argument and returns result",
      "group": "File",
      "spec": "File.path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.path returns path for File argument",
      "group": "File",
      "spec": "File.path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.path returns path for Pathname argument",
      "group": "File",
      "spec": "File.path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.path returns the string argument without any change",
      "group": "File",
      "spec": "File.path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.pipe? returns false if file does not exist",
      "group": "File",
      "spec": "File.pipe?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.pipe? returns false if the file is not a pipe",
      "group": "File",
      "spec": "File.pipe?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.pipe? returns true if the file is a pipe",
      "group": "File",
      "spec": "File.pipe?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.readlink when changing the working directory returns the name of the file referenced by the given link",
      "group": "File",
      "spec": "File.readlink",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.readlink when changing the working directory returns the name of the file referenced by the given link when the file does not exist",
      "group": "File",
      "spec": "File.readlink",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.readlink with absolute paths raises an Errno::EINVAL if called with a normal file",
      "group": "File",
      "spec": "File.readlink",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.readlink with absolute paths raises an Errno::ENOENT if there is no such file",
      "group": "File",
      "spec": "File.readlink",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.readlink with absolute paths returns the name of the file referenced by the given link",
      "group": "File",
      "spec": "File.readlink",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.readlink with absolute paths returns the name of the file referenced by the given link when the file does not exist",
      "group": "File",
      "spec": "File.readlink",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.readlink with paths containing unicode characters returns the name of the file referenced by the given link",
      "group": "File",
      "spec": "File.readlink",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.realdirpath raises Errno::ENOENT if the directory is absent",
      "group": "File",
      "spec": "File.realdirpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.realdirpath raises Errno::ENOENT if the symlink points to an absent directory",
      "group": "File",
      "spec": "File.realdirpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.realdirpath raises an Errno::ELOOP if the symlink points to itself",
      "group": "File",
      "spec": "File.realdirpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.realdirpath returns '/' when passed '/'",
      "group": "File",
      "spec": "File.realdirpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.realdirpath returns the real (absolute) pathname if the file is absent",
      "group": "File",
      "spec": "File.realdirpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.realdirpath returns the real (absolute) pathname if the symlink points to an absent file",
      "group": "File",
      "spec": "File.realdirpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.realdirpath returns the real (absolute) pathname not containing symlinks",
      "group": "File",
      "spec": "File.realdirpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.realdirpath uses base directory for interpreting relative pathname",
      "group": "File",
      "spec": "File.realdirpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.realdirpath uses current directory for interpreting relative pathname",
      "group": "File",
      "spec": "File.realdirpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.realdirpath uses link directory for expanding relative links",
      "group": "File",
      "spec": "File.realdirpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.realpath raises Errno::ENOENT if the file is absent",
      "group": "File",
      "spec": "File.realpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.realpath raises Errno::ENOENT if the symlink points to an absent file",
      "group": "File",
      "spec": "File.realpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.realpath raises an Errno::ELOOP if the symlink points to itself",
      "group": "File",
      "spec": "File.realpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.realpath returns '/' when passed '/'",
      "group": "File",
      "spec": "File.realpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.realpath returns the real (absolute) pathname not containing symlinks",
      "group": "File",
      "spec": "File.realpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.realpath uses base directory for interpreting relative pathname",
      "group": "File",
      "spec": "File.realpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.realpath uses current directory for interpreting relative pathname",
      "group": "File",
      "spec": "File.realpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.realpath uses link directory for expanding relative links",
      "group": "File",
      "spec": "File.realpath",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.rename raises a TypeError if not passed String types",
      "group": "File",
      "spec": "File.rename",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.rename raises an ArgumentError if not passed two arguments",
      "group": "File",
      "spec": "File.rename",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.rename raises an Errno::ENOENT if the source does not exist",
      "group": "File",
      "spec": "File.rename",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.rename renames a file",
      "group": "File",
      "spec": "File.rename",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.setuid? returns false if the file does not exist",
      "group": "File",
      "spec": "File.setuid?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.setuid? returns false if the file was just made",
      "group": "File",
      "spec": "File.setuid?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.setuid? returns true when the gid bit is set",
      "group": "File",
      "spec": "File.setuid?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.split accepts an object that has a #to_path method",
      "group": "File",
      "spec": "File.split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.split coerces the argument with to_str if it is not a String type",
      "group": "File",
      "spec": "File.split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.split collapses multiple '/' characters and strips trailing ones",
      "group": "File",
      "spec": "File.split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.split does not split a string that contains '\\'",
      "group": "File",
      "spec": "File.split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.split raises a TypeError if the argument is not a String type",
      "group": "File",
      "spec": "File.split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.split raises an ArgumentError when not passed a single argument",
      "group": "File",
      "spec": "File.split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.split splits an empty string into a '.' and an empty string",
      "group": "File",
      "spec": "File.split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.split splits the string at the last '/' when the last component does not have an extension",
      "group": "File",
      "spec": "File.split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.split splits the string at the last '/' when the last component has an extension",
      "group": "File",
      "spec": "File.split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.stat accepts an object that has a #to_path method",
      "group": "File",
      "spec": "File.stat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.stat raises an Errno::ENOENT if the file does not exist",
      "group": "File",
      "spec": "File.stat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.stat returns a File::Stat object if the given file exists",
      "group": "File",
      "spec": "File.stat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.stat returns a File::Stat object when called on an instance of File",
      "group": "File",
      "spec": "File.stat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.stat returns a File::Stat object with file properties for a symlink",
      "group": "File",
      "spec": "File.stat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.stat returns information for a file that has been deleted but is still open",
      "group": "File",
      "spec": "File.stat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.sticky? returns false if file does not exist",
      "group": "File",
      "spec": "File.sticky?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.sticky? returns false if the file has not sticky bit set",
      "group": "File",
      "spec": "File.sticky?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.sticky? returns true if the file has sticky bit set",
      "group": "File",
      "spec": "File.sticky?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.symlink accepts args that have #to_path methods",
      "group": "File",
      "spec": "File.symlink",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.symlink creates a symbolic link",
      "group": "File",
      "spec": "File.symlink",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.symlink creates a symlink between a source and target file",
      "group": "File",
      "spec": "File.symlink",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.symlink raises a TypeError if not called with String types",
      "group": "File",
      "spec": "File.symlink",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.symlink raises an ArgumentError if not called with two arguments",
      "group": "File",
      "spec": "File.symlink",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.symlink raises an Errno::EEXIST if the target already exists",
      "group": "File",
      "spec": "File.symlink",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.truncate accepts an object that has a #to_path method",
      "group": "File",
      "spec": "File.truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.truncate raises a TypeError if not passed a String type for the first argument",
      "group": "File",
      "spec": "File.truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.truncate raises a TypeError if not passed an Integer type for the second argument",
      "group": "File",
      "spec": "File.truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.truncate raises an ArgumentError if not passed two arguments",
      "group": "File",
      "spec": "File.truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.truncate raises an Errno::EINVAL if the length argument is not valid",
      "group": "File",
      "spec": "File.truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.truncate raises an Errno::ENOENT if the file does not exist",
      "group": "File",
      "spec": "File.truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.truncate truncate a file size to 0",
      "group": "File",
      "spec": "File.truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.truncate truncate a file size to 5",
      "group": "File",
      "spec": "File.truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.truncate truncates a file",
      "group": "File",
      "spec": "File.truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.truncate truncates to a larger file size than the original file",
      "group": "File",
      "spec": "File.truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.truncate truncates to the same size as the original file",
      "group": "File",
      "spec": "File.truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.umask invokes to_int on non-integer argument",
      "group": "File",
      "spec": "File.umask",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.umask raises ArgumentError when more than one argument is provided",
      "group": "File",
      "spec": "File.umask",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.umask raises RangeError with too large values",
      "group": "File",
      "spec": "File.umask",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.umask returns a Fixnum",
      "group": "File",
      "spec": "File.umask",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.umask returns the current umask value for the process",
      "group": "File",
      "spec": "File.umask",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.unlink accepts an object that has a #to_path method",
      "group": "File",
      "spec": "File.unlink",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.unlink coerces a given parameter into a string if possible",
      "group": "File",
      "spec": "File.unlink",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.unlink deletes a single file",
      "group": "File",
      "spec": "File.unlink",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.unlink deletes multiple files",
      "group": "File",
      "spec": "File.unlink",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.unlink raises a TypeError if not passed a String type",
      "group": "File",
      "spec": "File.unlink",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.unlink raises an Errno::ENOENT when the given file doesn't exist",
      "group": "File",
      "spec": "File.unlink",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.unlink returns 0 when called without arguments",
      "group": "File",
      "spec": "File.unlink",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.utime accepts an object that has a #to_path method",
      "group": "File",
      "spec": "File.utime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.utime accepts numeric atime and mtime arguments",
      "group": "File",
      "spec": "File.utime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.utime allows Time instances in the far future to set mtime and atime",
      "group": "File",
      "spec": "File.utime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.utime sets the access and modification time of each file",
      "group": "File",
      "spec": "File.utime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File.utime uses the current times if two nil values are passed",
      "group": "File",
      "spec": "File.utime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants File::APPEND",
      "group": "File::Constants",
      "spec": "File::Constants",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants File::CREAT",
      "group": "File::Constants",
      "spec": "File::Constants",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants File::LOCK_EX",
      "group": "File::Constants",
      "spec": "File::Constants",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants File::LOCK_NB",
      "group": "File::Constants",
      "spec": "File::Constants",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants File::LOCK_SH",
      "group": "File::Constants",
      "spec": "File::Constants",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants File::LOCK_UN",
      "group": "File::Constants",
      "spec": "File::Constants",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants File::NOCTTY",
      "group": "File::Constants",
      "spec": "File::Constants",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants File::NONBLOCK",
      "group": "File::Constants",
      "spec": "File::Constants",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants File::PATH_SEPARATOR",
      "group": "File::Constants",
      "spec": "File::Constants",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants File::PATH_SEPARATOR",
      "group": "File::Constants",
      "spec": "File::Constants",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants File::RDONLY",
      "group": "File::Constants",
      "spec": "File::Constants",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants File::RDWR",
      "group": "File::Constants",
      "spec": "File::Constants",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants File::SEPARATOR",
      "group": "File::Constants",
      "spec": "File::Constants",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants File::SEPARATOR",
      "group": "File::Constants",
      "spec": "File::Constants",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants File::Separator",
      "group": "File::Constants",
      "spec": "File::Constants",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants File::TRUNC",
      "group": "File::Constants",
      "spec": "File::Constants",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants File::WRONLY",
      "group": "File::Constants",
      "spec": "File::Constants",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants lock mode constants",
      "group": "File::Constants",
      "spec": "File::Constants",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants matches mode constants",
      "group": "File::Constants",
      "spec": "File::Constants",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants the open mode constants",
      "group": "File::Constants",
      "spec": "File::Constants",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants the separator constant",
      "group": "File::Constants",
      "spec": "File::Constants",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants::APPEND is defined",
      "group": "File::Constants::APPEND",
      "spec": "File::Constants::APPEND",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants::CREAT is defined",
      "group": "File::Constants::CREAT",
      "spec": "File::Constants::CREAT",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants::EXCL is defined",
      "group": "File::Constants::EXCL",
      "spec": "File::Constants::EXCL",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants::FNM_CASEFOLD is defined",
      "group": "File::Constants::FNM_CASEFOLD",
      "spec": "File::Constants::FNM_CASEFOLD",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants::FNM_DOTMATCH is defined",
      "group": "File::Constants::FNM_DOTMATCH",
      "spec": "File::Constants::FNM_DOTMATCH",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants::FNM_EXTGLOB is defined",
      "group": "File::Constants::FNM_EXTGLOB",
      "spec": "File::Constants::FNM_EXTGLOB",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants::FNM_NOESCAPE is defined",
      "group": "File::Constants::FNM_NOESCAPE",
      "spec": "File::Constants::FNM_NOESCAPE",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants::FNM_PATHNAME is defined",
      "group": "File::Constants::FNM_PATHNAME",
      "spec": "File::Constants::FNM_PATHNAME",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants::FNM_SYSCASE is defined",
      "group": "File::Constants::FNM_SYSCASE",
      "spec": "File::Constants::FNM_SYSCASE",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants::LOCK_EX is defined",
      "group": "File::Constants::LOCK_EX",
      "spec": "File::Constants::LOCK_EX",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants::LOCK_NB is defined",
      "group": "File::Constants::LOCK_NB",
      "spec": "File::Constants::LOCK_NB",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants::LOCK_SH is defined",
      "group": "File::Constants::LOCK_SH",
      "spec": "File::Constants::LOCK_SH",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants::LOCK_UN is defined",
      "group": "File::Constants::LOCK_UN",
      "spec": "File::Constants::LOCK_UN",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants::NOCTTY is defined",
      "group": "File::Constants::NOCTTY",
      "spec": "File::Constants::NOCTTY",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants::NONBLOCK is defined",
      "group": "File::Constants::NONBLOCK",
      "spec": "File::Constants::NONBLOCK",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants::RDONLY is defined",
      "group": "File::Constants::RDONLY",
      "spec": "File::Constants::RDONLY",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants::RDWR is defined",
      "group": "File::Constants::RDWR",
      "spec": "File::Constants::RDWR",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants::SYNC is defined",
      "group": "File::Constants::SYNC",
      "spec": "File::Constants::SYNC",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants::TRUNC is defined",
      "group": "File::Constants::TRUNC",
      "spec": "File::Constants::TRUNC",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Constants::WRONLY is defined",
      "group": "File::Constants::WRONLY",
      "spec": "File::Constants::WRONLY",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::NULL returns /dev/null as a string",
      "group": "File::NULL",
      "spec": "File::NULL",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#<=> includes Comparable and #== shows mtime equality between two File::Stat objects",
      "group": "File::Stat",
      "spec": "File::Stat#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#<=> is able to compare files by different modification times",
      "group": "File::Stat",
      "spec": "File::Stat#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#<=> is able to compare files by the same modification times",
      "group": "File::Stat",
      "spec": "File::Stat#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#atime returns the atime of a File::Stat object",
      "group": "File::Stat",
      "spec": "File::Stat#atime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#birthtime raises an NotImplementedError",
      "group": "File::Stat",
      "spec": "File::Stat#birthtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#blksize returns the blksize of a File::Stat object",
      "group": "File::Stat",
      "spec": "File::Stat#blksize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#blockdev? accepts an object that has a #to_path method",
      "group": "File::Stat",
      "spec": "File::Stat#blockdev?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#blockdev? returns true/false depending if the named file is a block device",
      "group": "File::Stat",
      "spec": "File::Stat#blockdev?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#blocks returns a non-negative integer",
      "group": "File::Stat",
      "spec": "File::Stat#blocks",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#chardev? accepts an object that has a #to_path method",
      "group": "File::Stat",
      "spec": "File::Stat#chardev?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#chardev? returns true/false depending if the named file is a char device",
      "group": "File::Stat",
      "spec": "File::Stat#chardev?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#ctime returns the ctime of a File::Stat object",
      "group": "File::Stat",
      "spec": "File::Stat#ctime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#dev returns the number of the device on which the file exists",
      "group": "File::Stat",
      "spec": "File::Stat#dev",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#dev_major returns the major part of File::Stat#dev",
      "group": "File::Stat",
      "spec": "File::Stat#dev_major",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#dev_minor returns the minor part of File::Stat#dev",
      "group": "File::Stat",
      "spec": "File::Stat#dev_minor",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#directory? accepts an object that has a #to_path method",
      "group": "File::Stat",
      "spec": "File::Stat#directory?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#directory? raises a TypeError when passed an Integer",
      "group": "File::Stat",
      "spec": "File::Stat#directory?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#directory? raises a TypeError when passed nil",
      "group": "File::Stat",
      "spec": "File::Stat#directory?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#directory? returns false if the argument is not a directory",
      "group": "File::Stat",
      "spec": "File::Stat#directory?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#directory? returns true if the argument is a directory",
      "group": "File::Stat",
      "spec": "File::Stat#directory?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#executable? accepts an object that has a #to_path method",
      "group": "File::Stat",
      "spec": "File::Stat#executable?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#executable? raises a TypeError if not passed a String type",
      "group": "File::Stat",
      "spec": "File::Stat#executable?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#executable? raises an ArgumentError if not passed one argument",
      "group": "File::Stat",
      "spec": "File::Stat#executable?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#executable? returns true if named file is executable by the effective user id of the process, otherwise false",
      "group": "File::Stat",
      "spec": "File::Stat#executable?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#executable? returns true if the argument is an executable file",
      "group": "File::Stat",
      "spec": "File::Stat#executable?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#executable_real? accepts an object that has a #to_path method",
      "group": "File::Stat",
      "spec": "File::Stat#executable_real?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#executable_real? raises a TypeError if not passed a String type",
      "group": "File::Stat",
      "spec": "File::Stat#executable_real?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#executable_real? raises an ArgumentError if not passed one argument",
      "group": "File::Stat",
      "spec": "File::Stat#executable_real?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#executable_real? returns true if named file is readable by the real user id of the process, otherwise false",
      "group": "File::Stat",
      "spec": "File::Stat#executable_real?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#executable_real? returns true if the file its an executable",
      "group": "File::Stat",
      "spec": "File::Stat#executable_real?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#file? accepts an object that has a #to_path method",
      "group": "File::Stat",
      "spec": "File::Stat#file?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#file? raises a TypeError if not passed a String type",
      "group": "File::Stat",
      "spec": "File::Stat#file?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#file? raises an ArgumentError if not passed one argument",
      "group": "File::Stat",
      "spec": "File::Stat#file?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#file? returns true if the named file exists and is a regular file.",
      "group": "File::Stat",
      "spec": "File::Stat#file?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#file? returns true if the null device exists and is a regular file.",
      "group": "File::Stat",
      "spec": "File::Stat#file?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#gid returns the group owner attribute of a File::Stat object",
      "group": "File::Stat",
      "spec": "File::Stat#gid",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#grpowned? accepts an object that has a #to_path method",
      "group": "File::Stat",
      "spec": "File::Stat#grpowned?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#grpowned? returns true if the file exist",
      "group": "File::Stat",
      "spec": "File::Stat#grpowned?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#grpowned? takes non primary groups into account",
      "group": "File::Stat",
      "spec": "File::Stat#grpowned?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#initialize calls #to_path on non-String arguments",
      "group": "File::Stat",
      "spec": "File::Stat#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#initialize creates a File::Stat object for the given file",
      "group": "File::Stat",
      "spec": "File::Stat#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#initialize raises an exception if the file doesn't exist",
      "group": "File::Stat",
      "spec": "File::Stat#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#ino returns the ino of a File::Stat object",
      "group": "File::Stat",
      "spec": "File::Stat#ino",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#inspect produces a nicely formatted description of a File::Stat object",
      "group": "File::Stat",
      "spec": "File::Stat#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#mode returns the mode of a File::Stat object",
      "group": "File::Stat",
      "spec": "File::Stat#mode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#mtime returns the mtime of a File::Stat object",
      "group": "File::Stat",
      "spec": "File::Stat#mtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#nlink returns the number of links to a file",
      "group": "File::Stat",
      "spec": "File::Stat#nlink",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#owned? accepts an object that has a #to_path method",
      "group": "File::Stat",
      "spec": "File::Stat#owned?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#pipe? accepts an object that has a #to_path method",
      "group": "File::Stat",
      "spec": "File::Stat#pipe?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#pipe? returns false if the file is not a pipe",
      "group": "File::Stat",
      "spec": "File::Stat#pipe?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#pipe? returns true if the file is a pipe",
      "group": "File::Stat",
      "spec": "File::Stat#pipe?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#rdev returns the number of the device this file represents which the file exists",
      "group": "File::Stat",
      "spec": "File::Stat#rdev",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#rdev_major returns the major part of File::Stat#rdev",
      "group": "File::Stat",
      "spec": "File::Stat#rdev_major",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#rdev_minor returns the minor part of File::Stat#rdev",
      "group": "File::Stat",
      "spec": "File::Stat#rdev_minor",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#readable? accepts an object that has a #to_path method",
      "group": "File::Stat",
      "spec": "File::Stat#readable?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#readable? returns true if named file is readable by the effective user id of the process, otherwise false",
      "group": "File::Stat",
      "spec": "File::Stat#readable?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#readable_real? accepts an object that has a #to_path method",
      "group": "File::Stat",
      "spec": "File::Stat#readable_real?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#readable_real? returns true if named file is readable by the real user id of the process, otherwise false",
      "group": "File::Stat",
      "spec": "File::Stat#readable_real?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#size needs to be reviewed for spec completeness",
      "group": "File::Stat",
      "spec": "File::Stat#size",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#size? needs to be reviewed for spec completeness",
      "group": "File::Stat",
      "spec": "File::Stat#size?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#socket? accepts an object that has a #to_path method",
      "group": "File::Stat",
      "spec": "File::Stat#socket?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#sticky? accepts an object that has a #to_path method",
      "group": "File::Stat",
      "spec": "File::Stat#sticky?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#sticky? returns true if the named file has the sticky bit, otherwise false",
      "group": "File::Stat",
      "spec": "File::Stat#sticky?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#symlink? accepts an object that has a #to_path method",
      "group": "File::Stat",
      "spec": "File::Stat#symlink?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#symlink? returns true if the file is a link",
      "group": "File::Stat",
      "spec": "File::Stat#symlink?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#uid returns the owner attribute of a File::Stat object",
      "group": "File::Stat",
      "spec": "File::Stat#uid",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#world_readable? needs to be reviewed for spec completeness",
      "group": "File::Stat",
      "spec": "File::Stat#world_readable?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#world_writable? needs to be reviewed for spec completeness",
      "group": "File::Stat",
      "spec": "File::Stat#world_writable?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#writable? accepts an object that has a #to_path method",
      "group": "File::Stat",
      "spec": "File::Stat#writable?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#writable? returns true if named file is writable by the effective user id of the process, otherwise false",
      "group": "File::Stat",
      "spec": "File::Stat#writable?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#writable_real? accepts an object that has a #to_path method",
      "group": "File::Stat",
      "spec": "File::Stat#writable_real?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#writable_real? raises a TypeError if not passed a String type",
      "group": "File::Stat",
      "spec": "File::Stat#writable_real?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#writable_real? raises an ArgumentError if not passed one argument",
      "group": "File::Stat",
      "spec": "File::Stat#writable_real?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#writable_real? returns true if named file is writable by the real user id of the process, otherwise false",
      "group": "File::Stat",
      "spec": "File::Stat#writable_real?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#zero? accepts an object that has a #to_path method",
      "group": "File::Stat",
      "spec": "File::Stat#zero?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#zero? raises a TypeError if not passed a String type",
      "group": "File::Stat",
      "spec": "File::Stat#zero?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#zero? raises an ArgumentError if not passed one argument",
      "group": "File::Stat",
      "spec": "File::Stat#zero?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#zero? returns false if the file is not empty",
      "group": "File::Stat",
      "spec": "File::Stat#zero?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#zero? returns true for /dev/null",
      "group": "File::Stat",
      "spec": "File::Stat#zero?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#zero? returns true if the file is empty",
      "group": "File::Stat",
      "spec": "File::Stat#zero?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#zero? returns true inside a block opening a file if it is empty",
      "group": "File::Stat",
      "spec": "File::Stat#zero?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat#zero? returns true or false for a directory",
      "group": "File::Stat",
      "spec": "File::Stat#zero?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat.size accepts a String-like (to_str) parameter",
      "group": "File::Stat",
      "spec": "File::Stat.size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat.size accepts an object that has a #to_path method",
      "group": "File::Stat",
      "spec": "File::Stat.size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat.size returns 0 if the file is empty",
      "group": "File::Stat",
      "spec": "File::Stat.size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat.size returns the size of the file if it exists and is not empty",
      "group": "File::Stat",
      "spec": "File::Stat.size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat.size? accepts a String-like (to_str) parameter",
      "group": "File::Stat",
      "spec": "File::Stat.size?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat.size? accepts an object that has a #to_path method",
      "group": "File::Stat",
      "spec": "File::Stat.size?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat.size? returns nil if file_name is empty",
      "group": "File::Stat",
      "spec": "File::Stat.size?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat.size? returns the size of the file if it exists and is not empty",
      "group": "File::Stat",
      "spec": "File::Stat.size?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat.world_readable? coerces the argument with #to_path",
      "group": "File::Stat",
      "spec": "File::Stat.world_readable?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat.world_readable? returns a Fixnum if the file is a directory and chmod 644",
      "group": "File::Stat",
      "spec": "File::Stat.world_readable?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat.world_readable? returns a Fixnum if the file is chmod 644",
      "group": "File::Stat",
      "spec": "File::Stat.world_readable?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat.world_readable? returns nil if the file is chmod 000",
      "group": "File::Stat",
      "spec": "File::Stat.world_readable?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat.world_readable? returns nil if the file is chmod 600",
      "group": "File::Stat",
      "spec": "File::Stat.world_readable?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat.world_readable? returns nil if the file is chmod 700",
      "group": "File::Stat",
      "spec": "File::Stat.world_readable?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat.world_writable? coerces the argument with #to_path",
      "group": "File::Stat",
      "spec": "File::Stat.world_writable?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat.world_writable? returns a Fixnum if the file is a directory and chmod 777",
      "group": "File::Stat",
      "spec": "File::Stat.world_writable?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat.world_writable? returns a Fixnum if the file is chmod 777",
      "group": "File::Stat",
      "spec": "File::Stat.world_writable?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat.world_writable? returns nil if the file is chmod 000",
      "group": "File::Stat",
      "spec": "File::Stat.world_writable?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat.world_writable? returns nil if the file is chmod 600",
      "group": "File::Stat",
      "spec": "File::Stat.world_writable?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:File::Stat.world_writable? returns nil if the file is chmod 700",
      "group": "File::Stat",
      "spec": "File::Stat.world_writable?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:FileTest.file? needs to be reviewed for spec completeness",
      "group": "FileTest",
      "spec": "FileTest.file?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:FileTest.world_readable? needs to be reviewed for spec completeness",
      "group": "FileTest",
      "spec": "FileTest.world_readable?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:FileTest.world_writable? needs to be reviewed for spec completeness",
      "group": "FileTest",
      "spec": "FileTest.world_writable?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float .allocate raises a TypeError",
      "group": "Float",
      "spec": "Float",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float .new is undefined",
      "group": "Float",
      "spec": "Float",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float constant DIG is 15",
      "group": "Float",
      "spec": "Float",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float constant EPSILON is 2.220446049250313e-16",
      "group": "Float",
      "spec": "Float",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float constant INFINITY is the positive infinity",
      "group": "Float",
      "spec": "Float",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float constant MANT_DIG is 53",
      "group": "Float",
      "spec": "Float",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float constant MAX is 1.7976931348623157e+308",
      "group": "Float",
      "spec": "Float",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float constant MAX_10_EXP is 308",
      "group": "Float",
      "spec": "Float",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float constant MAX_EXP is 1024",
      "group": "Float",
      "spec": "Float",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float constant MIN is 2.2250738585072014e-308",
      "group": "Float",
      "spec": "Float",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float constant MIN_10_EXP is -308",
      "group": "Float",
      "spec": "Float",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float constant MIN_EXP is -1021",
      "group": "Float",
      "spec": "Float",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float constant NAN is 'not a number'",
      "group": "Float",
      "spec": "Float",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float constant RADIX is 2",
      "group": "Float",
      "spec": "Float",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float includes Comparable",
      "group": "Float",
      "spec": "Float",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#% raises a ZeroDivisionError if other is zero",
      "group": "Float",
      "spec": "Float#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#% returns -0.0 when called on -0.0 with a non zero modulus",
      "group": "Float",
      "spec": "Float#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#% returns -Infinity when modulus is -Infinity",
      "group": "Float",
      "spec": "Float#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#% returns NaN when called on NaN or Infinities",
      "group": "Float",
      "spec": "Float#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#% returns NaN when modulus is NaN",
      "group": "Float",
      "spec": "Float#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#% returns self modulo other",
      "group": "Float",
      "spec": "Float#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#% returns self when modulus is +Infinity",
      "group": "Float",
      "spec": "Float#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#% tries to coerce the modulus",
      "group": "Float",
      "spec": "Float#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#* does not rescue exception raised in other#coerce",
      "group": "Float",
      "spec": "Float#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#* raises a TypeError when given a non-Numeric",
      "group": "Float",
      "spec": "Float#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#* returns self multiplied by other",
      "group": "Float",
      "spec": "Float#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#** returns a complex number when negative and raised to a fractional power",
      "group": "Float",
      "spec": "Float#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#** returns self raise to the other power",
      "group": "Float",
      "spec": "Float#**",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#+ does not rescue exception raised in other#coerce",
      "group": "Float",
      "spec": "Float#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#+ returns self plus other",
      "group": "Float",
      "spec": "Float#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#+@ returns the same value with same sign (twos complement)",
      "group": "Float",
      "spec": "Float#+@",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#- does not rescue exception raised in other#coerce",
      "group": "Float",
      "spec": "Float#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#- returns self minus other",
      "group": "Float",
      "spec": "Float#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#-@ negates self",
      "group": "Float",
      "spec": "Float#-@",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#-@ negates self at Float boundaries",
      "group": "Float",
      "spec": "Float#-@",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#-@ returns NaN for NaN",
      "group": "Float",
      "spec": "Float#-@",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#-@ returns negative infinity for positive infinity",
      "group": "Float",
      "spec": "Float#-@",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#-@ returns positive infinity for negative infinity",
      "group": "Float",
      "spec": "Float#-@",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#/ does not rescue exception raised in other#coerce",
      "group": "Float",
      "spec": "Float#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#/ properly coerces objects",
      "group": "Float",
      "spec": "Float#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#/ raises a TypeError when given a non-Numeric",
      "group": "Float",
      "spec": "Float#/",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#/ returns +Infinity when dividing non-zero by zero of the same sign",
      "group": "Float",
      "spec": "Float#/",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#/ returns -Infinity when dividing non-zero by zero of opposite sign",
      "group": "Float",
      "spec": "Float#/",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#/ returns NaN when dividing zero by zero",
      "group": "Float",
      "spec": "Float#/",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#/ returns self divided by other",
      "group": "Float",
      "spec": "Float#/",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#< does not rescue exception raised in other#coerce",
      "group": "Float",
      "spec": "Float#<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#< raises an ArgumentError when given a non-Numeric",
      "group": "Float",
      "spec": "Float#<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#< returns true if self is less than other",
      "group": "Float",
      "spec": "Float#<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#<= does not rescue exception raised in other#coerce",
      "group": "Float",
      "spec": "Float#<=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#<= raises an ArgumentError when given a non-Numeric",
      "group": "Float",
      "spec": "Float#<=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#<= returns true if self is less than or equal to other",
      "group": "Float",
      "spec": "Float#<=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#<=> returns -1 when self is -Infinity and other is negative",
      "group": "Float",
      "spec": "Float#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#<=> returns -1 when self is negative and other is Infinity",
      "group": "Float",
      "spec": "Float#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#<=> returns -1, 0, 1 when self is less than, equal, or greater than other",
      "group": "Float",
      "spec": "Float#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#<=> returns 1 when self is Infinity and other is a Bignum",
      "group": "Float",
      "spec": "Float#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#<=> returns 1 when self is negative and other is -Infinity",
      "group": "Float",
      "spec": "Float#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#<=> returns nil when either argument is NaN",
      "group": "Float",
      "spec": "Float#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#<=> returns nil when the given argument is not a Float",
      "group": "Float",
      "spec": "Float#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#== calls 'other == self' if coercion fails",
      "group": "Float",
      "spec": "Float#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#== returns true if self has the same value as other",
      "group": "Float",
      "spec": "Float#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#=== calls 'other == self' if coercion fails",
      "group": "Float",
      "spec": "Float#===",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#=== returns true if self has the same value as other",
      "group": "Float",
      "spec": "Float#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#> does not rescue exception raised in other#coerce",
      "group": "Float",
      "spec": "Float#>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#> raises an ArgumentError when given a non-Numeric",
      "group": "Float",
      "spec": "Float#>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#> returns true if self is greater than other",
      "group": "Float",
      "spec": "Float#>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#>= does not rescue exception raised in other#coerce",
      "group": "Float",
      "spec": "Float#>=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#>= raises an ArgumentError when given a non-Numeric",
      "group": "Float",
      "spec": "Float#>=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#>= returns true if self is greater than or equal to other",
      "group": "Float",
      "spec": "Float#>=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#abs returns 0.0 if -0.0",
      "group": "Float",
      "spec": "Float#abs",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#abs returns Infinity if -Infinity",
      "group": "Float",
      "spec": "Float#abs",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#abs returns NaN if NaN",
      "group": "Float",
      "spec": "Float#abs",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#abs returns the absolute value",
      "group": "Float",
      "spec": "Float#abs",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#angle returns 0 if +0.0",
      "group": "Float",
      "spec": "Float#angle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#angle returns 0 if +Infinity",
      "group": "Float",
      "spec": "Float#angle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#angle returns 0 if positive",
      "group": "Float",
      "spec": "Float#angle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#angle returns NaN if NaN",
      "group": "Float",
      "spec": "Float#angle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#angle returns Pi if -0.0",
      "group": "Float",
      "spec": "Float#angle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#angle returns Pi if -Infinity",
      "group": "Float",
      "spec": "Float#angle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#angle returns Pi if negative",
      "group": "Float",
      "spec": "Float#angle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#angle returns self if NaN",
      "group": "Float",
      "spec": "Float#angle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#arg returns 0 if +0.0",
      "group": "Float",
      "spec": "Float#arg",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#arg returns 0 if +Infinity",
      "group": "Float",
      "spec": "Float#arg",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#arg returns 0 if positive",
      "group": "Float",
      "spec": "Float#arg",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#arg returns NaN if NaN",
      "group": "Float",
      "spec": "Float#arg",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#arg returns Pi if -0.0",
      "group": "Float",
      "spec": "Float#arg",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#arg returns Pi if -Infinity",
      "group": "Float",
      "spec": "Float#arg",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#arg returns Pi if negative",
      "group": "Float",
      "spec": "Float#arg",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#arg returns self if NaN",
      "group": "Float",
      "spec": "Float#arg",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#ceil returns the smallest Integer greater than or equal to self",
      "group": "Float",
      "spec": "Float#ceil",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#ceil returns the smallest number greater than or equal to self with an optionally given precision",
      "group": "Float",
      "spec": "Float#ceil",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#coerce returns [other, self] both as Floats",
      "group": "Float",
      "spec": "Float#coerce",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#denominator converts self to a Rational and returns the denominator",
      "group": "Float",
      "spec": "Float#denominator",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#denominator returns 1 for NaN and Infinity",
      "group": "Float",
      "spec": "Float#denominator",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#denominator returns an Integer",
      "group": "Float",
      "spec": "Float#denominator",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#divmod raises a FloatDomainError if other is NaN",
      "group": "Float",
      "spec": "Float#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#divmod raises a FloatDomainError if self is Infinity",
      "group": "Float",
      "spec": "Float#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#divmod raises a FloatDomainError if self is NaN",
      "group": "Float",
      "spec": "Float#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#divmod raises a ZeroDivisionError if other is zero",
      "group": "Float",
      "spec": "Float#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#divmod returns an [quotient, modulus] from dividing self by other",
      "group": "Float",
      "spec": "Float#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#divmod returns the correct [quotient, modulus] even for large quotient",
      "group": "Float",
      "spec": "Float#divmod",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#dup returns self",
      "group": "Float",
      "spec": "Float#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#eql? returns false if other is a Float not equal to self",
      "group": "Float",
      "spec": "Float#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#eql? returns false if other is not a Float",
      "group": "Float",
      "spec": "Float#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#eql? returns true if other is a Float equal to self",
      "group": "Float",
      "spec": "Float#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#fdiv performs floating-point division between self and a Bignum",
      "group": "Float",
      "spec": "Float#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#fdiv performs floating-point division between self and a Complex",
      "group": "Float",
      "spec": "Float#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#fdiv performs floating-point division between self and a Fixnum",
      "group": "Float",
      "spec": "Float#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#fdiv performs floating-point division between self and a Float",
      "group": "Float",
      "spec": "Float#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#fdiv performs floating-point division between self and a Rational",
      "group": "Float",
      "spec": "Float#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#fdiv raises a TypeError when argument isn't numeric",
      "group": "Float",
      "spec": "Float#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#fdiv raises an ArgumentError when passed multiple arguments",
      "group": "Float",
      "spec": "Float#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#fdiv returns -0.0 when the argument is -Infinity",
      "group": "Float",
      "spec": "Float#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#fdiv returns -Infinity when the argument is 0 and self is negative",
      "group": "Float",
      "spec": "Float#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#fdiv returns -Infinity when the argument is 0.0 and self is negative",
      "group": "Float",
      "spec": "Float#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#fdiv returns 0.0 when the argument is Infinity",
      "group": "Float",
      "spec": "Float#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#fdiv returns Infinity when the argument is 0",
      "group": "Float",
      "spec": "Float#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#fdiv returns Infinity when the argument is 0.0",
      "group": "Float",
      "spec": "Float#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#fdiv returns NaN when the argument is NaN",
      "group": "Float",
      "spec": "Float#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#finite? returns false for NaN",
      "group": "Float",
      "spec": "Float#finite?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#finite? returns false for negative infinity",
      "group": "Float",
      "spec": "Float#finite?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#finite? returns false for positive infinity",
      "group": "Float",
      "spec": "Float#finite?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#finite? returns true for finite values",
      "group": "Float",
      "spec": "Float#finite?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#floor returns the largest Integer less than or equal to self",
      "group": "Float",
      "spec": "Float#floor",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#floor returns the largest number less than or equal to self with an optionally given precision",
      "group": "Float",
      "spec": "Float#floor",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#hash is provided",
      "group": "Float",
      "spec": "Float#hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#hash is stable",
      "group": "Float",
      "spec": "Float#hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#infinite? returns -1 for negative infinity",
      "group": "Float",
      "spec": "Float#infinite?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#infinite? returns 1 for positive infinity",
      "group": "Float",
      "spec": "Float#infinite?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#infinite? returns nil for NaN",
      "group": "Float",
      "spec": "Float#infinite?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#infinite? returns nil for finite values",
      "group": "Float",
      "spec": "Float#infinite?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#magnitude returns 0.0 if -0.0",
      "group": "Float",
      "spec": "Float#magnitude",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#magnitude returns Infinity if -Infinity",
      "group": "Float",
      "spec": "Float#magnitude",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#magnitude returns NaN if NaN",
      "group": "Float",
      "spec": "Float#magnitude",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#magnitude returns the absolute value",
      "group": "Float",
      "spec": "Float#magnitude",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#modulo raises a ZeroDivisionError if other is zero",
      "group": "Float",
      "spec": "Float#modulo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#modulo returns -0.0 when called on -0.0 with a non zero modulus",
      "group": "Float",
      "spec": "Float#modulo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#modulo returns -Infinity when modulus is -Infinity",
      "group": "Float",
      "spec": "Float#modulo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#modulo returns NaN when called on NaN or Infinities",
      "group": "Float",
      "spec": "Float#modulo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#modulo returns NaN when modulus is NaN",
      "group": "Float",
      "spec": "Float#modulo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#modulo returns self modulo other",
      "group": "Float",
      "spec": "Float#modulo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#modulo returns self when modulus is +Infinity",
      "group": "Float",
      "spec": "Float#modulo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#modulo tries to coerce the modulus",
      "group": "Float",
      "spec": "Float#modulo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#nan? returns true if self is not a valid IEEE floating-point number",
      "group": "Float",
      "spec": "Float#nan?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#next_float gives the same result for -0.0 as for +0.0",
      "group": "Float",
      "spec": "Float#next_float",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#next_float returns Float::INFINITY for Float::INFINITY",
      "group": "Float",
      "spec": "Float#next_float",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#next_float returns NAN if NAN was the receiver",
      "group": "Float",
      "spec": "Float#next_float",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#next_float returns a float the smallest possible step greater than the receiver",
      "group": "Float",
      "spec": "Float#next_float",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#next_float returns negative zero when stepping upward from just below zero",
      "group": "Float",
      "spec": "Float#next_float",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#next_float reverses the effect of prev_float for all Floats except INFINITY and +0.0",
      "group": "Float",
      "spec": "Float#next_float",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#next_float steps directly between -1.0 and -1.0 + EPSILON/2",
      "group": "Float",
      "spec": "Float#next_float",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#next_float steps directly between 1.0 and 1.0 + EPSILON",
      "group": "Float",
      "spec": "Float#next_float",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#next_float steps directly between MAX and INFINITY",
      "group": "Float",
      "spec": "Float#next_float",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#numerator converts self to a Rational object then returns its numerator",
      "group": "Float",
      "spec": "Float#numerator",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#numerator returns -Infinity for -Infinity",
      "group": "Float",
      "spec": "Float#numerator",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#numerator returns 0 for 0.0",
      "group": "Float",
      "spec": "Float#numerator",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#numerator returns Infinity for Infinity",
      "group": "Float",
      "spec": "Float#numerator",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#numerator returns NaN for NaN",
      "group": "Float",
      "spec": "Float#numerator",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#phase returns 0 if +0.0",
      "group": "Float",
      "spec": "Float#phase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#phase returns 0 if +Infinity",
      "group": "Float",
      "spec": "Float#phase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#phase returns 0 if positive",
      "group": "Float",
      "spec": "Float#phase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#phase returns NaN if NaN",
      "group": "Float",
      "spec": "Float#phase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#phase returns Pi if -0.0",
      "group": "Float",
      "spec": "Float#phase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#phase returns Pi if -Infinity",
      "group": "Float",
      "spec": "Float#phase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#phase returns Pi if negative",
      "group": "Float",
      "spec": "Float#phase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#phase returns self if NaN",
      "group": "Float",
      "spec": "Float#phase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#prev_float gives the same result for -0.0 as for +0.0",
      "group": "Float",
      "spec": "Float#prev_float",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#prev_float returns -Float::INFINITY for -Float::INFINITY",
      "group": "Float",
      "spec": "Float#prev_float",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#prev_float returns NAN if NAN was the receiver",
      "group": "Float",
      "spec": "Float#prev_float",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#prev_float returns a float the smallest possible step smaller than the receiver",
      "group": "Float",
      "spec": "Float#prev_float",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#prev_float returns positive zero when stepping downward from just above zero",
      "group": "Float",
      "spec": "Float#prev_float",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#prev_float reverses the effect of next_float for all Floats except -INFINITY and -0.0",
      "group": "Float",
      "spec": "Float#prev_float",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#prev_float steps directly between -1.0 and -1.0 - EPSILON",
      "group": "Float",
      "spec": "Float#prev_float",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#prev_float steps directly between 1.0 and 1.0 - EPSILON/2",
      "group": "Float",
      "spec": "Float#prev_float",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#prev_float steps directly between MAX and INFINITY",
      "group": "Float",
      "spec": "Float#prev_float",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#quo performs floating-point division between self and a Bignum",
      "group": "Float",
      "spec": "Float#quo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#quo performs floating-point division between self and a Complex",
      "group": "Float",
      "spec": "Float#quo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#quo performs floating-point division between self and a Fixnum",
      "group": "Float",
      "spec": "Float#quo",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#quo performs floating-point division between self and a Float",
      "group": "Float",
      "spec": "Float#quo",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#quo performs floating-point division between self and a Rational",
      "group": "Float",
      "spec": "Float#quo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#quo raises a TypeError when argument isn't numeric",
      "group": "Float",
      "spec": "Float#quo",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#quo raises an ArgumentError when passed multiple arguments",
      "group": "Float",
      "spec": "Float#quo",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#quo returns -0.0 when the argument is -Infinity",
      "group": "Float",
      "spec": "Float#quo",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#quo returns -Infinity when the argument is 0 and self is negative",
      "group": "Float",
      "spec": "Float#quo",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#quo returns -Infinity when the argument is 0.0 and self is negative",
      "group": "Float",
      "spec": "Float#quo",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#quo returns 0.0 when the argument is Infinity",
      "group": "Float",
      "spec": "Float#quo",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#quo returns Infinity when the argument is 0",
      "group": "Float",
      "spec": "Float#quo",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#quo returns Infinity when the argument is 0.0",
      "group": "Float",
      "spec": "Float#quo",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#quo returns NaN when the argument is NaN",
      "group": "Float",
      "spec": "Float#quo",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#rationalize raises ArgumentError when passed more than one argument",
      "group": "Float",
      "spec": "Float#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#rationalize raises a FloatDomainError for Infinity",
      "group": "Float",
      "spec": "Float#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#rationalize raises a FloatDomainError for NaN",
      "group": "Float",
      "spec": "Float#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#rationalize returns self as a simplified Rational with no argument",
      "group": "Float",
      "spec": "Float#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#rationalize simplifies self to the degree specified by a Float argument",
      "group": "Float",
      "spec": "Float#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#rationalize simplifies self to the degree specified by a Rational argument",
      "group": "Float",
      "spec": "Float#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#round raise for a non-existent round mode",
      "group": "Float",
      "spec": "Float#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#round raises FloatDomainError for exceptional values",
      "group": "Float",
      "spec": "Float#round",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#round raises FloatDomainError for exceptional values when passed a non-positive precision",
      "group": "Float",
      "spec": "Float#round",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#round raises FloatDomainError for exceptional values with a half option",
      "group": "Float",
      "spec": "Float#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#round raises RangeError for NAN when passed a non-positive precision",
      "group": "Float",
      "spec": "Float#round",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#round raises a TypeError when its argument can not be converted to an Integer",
      "group": "Float",
      "spec": "Float#round",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#round returns big values rounded to nearest",
      "group": "Float",
      "spec": "Float#round",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#round returns different rounded values depending on the half option",
      "group": "Float",
      "spec": "Float#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#round returns rounded values for big argument",
      "group": "Float",
      "spec": "Float#round",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#round returns rounded values for big values",
      "group": "Float",
      "spec": "Float#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#round returns self for exceptional values when passed a non-negative precision",
      "group": "Float",
      "spec": "Float#round",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#round returns the nearest Integer",
      "group": "Float",
      "spec": "Float#round",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#round returns the nearest Integer for Float near the limit",
      "group": "Float",
      "spec": "Float#round",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#round returns zero when passed a negative argument with magnitude greater than magnitude of the whole number portion of the Float",
      "group": "Float",
      "spec": "Float#round",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#round rounds self to an optionally given precision",
      "group": "Float",
      "spec": "Float#round",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#round rounds self to an optionally given precision with a half option",
      "group": "Float",
      "spec": "Float#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#round works for corner cases",
      "group": "Float",
      "spec": "Float#round",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_f returns self",
      "group": "Float",
      "spec": "Float#to_f",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_i returns self truncated to an Integer",
      "group": "Float",
      "spec": "Float#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#to_int returns self truncated to an Integer",
      "group": "Float",
      "spec": "Float#to_int",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#to_r needs to be reviewed for spec completeness",
      "group": "Float",
      "spec": "Float#to_r",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s emits '-' for -0.0",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s emits a '-' for negative values",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s emits a trailing '.0' for a whole number",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s emits a trailing '.0' for the mantissa in e format",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s matches random examples in all ranges",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s matches random examples in human ranges",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s matches random values from divisions",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s outputs the minimal, unique form necessary to recreate the value",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s outputs the minimal, unique form to represent the value",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s returns '-Infinity' for negative infinity",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s returns '0.0' for 0.0",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s returns 'Infinity' for positive infinity",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s returns 'NaN' for NaN",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s returns a String in US-ASCII encoding when Encoding.default_internal is nil",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s returns a String in US-ASCII encoding when Encoding.default_internal is not nil",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s uses e format for a negative value with fractional part having 6 significant figures",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s uses e format for a negative value with whole part having 17 significant figures",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s uses e format for a negative value with whole part having 18 significant figures",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s uses e format for a positive value with fractional part having 6 significant figures",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s uses e format for a positive value with whole part having 17 significant figures",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s uses e format for a positive value with whole part having 18 significant figures",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s uses non-e format for a negative value with fractional part having 5 significant figures",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s uses non-e format for a negative value with whole part having 15 significant figures",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s uses non-e format for a negative value with whole part having 16 significant figures",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s uses non-e format for a positive value with fractional part having 5 significant figures",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s uses non-e format for a positive value with whole part having 15 significant figures",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#to_s uses non-e format for a positive value with whole part having 16 significant figures",
      "group": "Float",
      "spec": "Float#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Float#truncate returns self truncated to an Integer",
      "group": "Float",
      "spec": "Float#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#truncate returns self truncated to an optionally given precision",
      "group": "Float",
      "spec": "Float#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Float#zero? returns true if self is 0.0",
      "group": "Float",
      "spec": "Float#zero?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:FrozenError is a subclass of RuntimeError",
      "group": "FrozenError",
      "spec": "FrozenError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:GC#garbage_collect always returns nil",
      "group": "GC",
      "spec": "GC#garbage_collect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:GC.count increases as collections are run",
      "group": "GC",
      "spec": "GC.count",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:GC.count returns an integer",
      "group": "GC",
      "spec": "GC.count",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:GC.disable returns true iff the garbage collection was previously disabled",
      "group": "GC",
      "spec": "GC.disable",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:GC.enable returns true iff the garbage collection was already disabled",
      "group": "GC",
      "spec": "GC.enable",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:GC.start always returns nil",
      "group": "GC",
      "spec": "GC.start",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:GC.stress returns current status of GC stress mode",
      "group": "GC",
      "spec": "GC.stress",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:GC.stress= sets the stress mode",
      "group": "GC",
      "spec": "GC.stress=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:GC::Profiler.clear needs to be reviewed for spec completeness",
      "group": "GC::Profiler",
      "spec": "GC::Profiler.clear",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:GC::Profiler.disable disables the profiler",
      "group": "GC::Profiler",
      "spec": "GC::Profiler.disable",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:GC::Profiler.enable enables the profiler",
      "group": "GC::Profiler",
      "spec": "GC::Profiler.enable",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:GC::Profiler.enabled? reports as disabled when disabled",
      "group": "GC::Profiler",
      "spec": "GC::Profiler.enabled?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:GC::Profiler.enabled? reports as enabled when enabled",
      "group": "GC::Profiler",
      "spec": "GC::Profiler.enabled?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:GC::Profiler.report needs to be reviewed for spec completeness",
      "group": "GC::Profiler",
      "spec": "GC::Profiler.report",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:GC::Profiler.result returns a string",
      "group": "GC::Profiler",
      "spec": "GC::Profiler.result",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:GC::Profiler.total_time returns an float",
      "group": "GC::Profiler",
      "spec": "GC::Profiler.total_time",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash includes Enumerable",
      "group": "Hash",
      "spec": "Hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#< converts the right operand to a hash before comparing",
      "group": "Hash",
      "spec": "Hash#<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#< raises a TypeError if the right operand is not a hash",
      "group": "Hash",
      "spec": "Hash#<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#< returns false if both hashes are identical",
      "group": "Hash",
      "spec": "Hash#<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#< returns false if both hashes have the same keys but different values",
      "group": "Hash",
      "spec": "Hash#<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#< returns false if self is not a subset of the other hash",
      "group": "Hash",
      "spec": "Hash#<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#< returns false when keys match but values don't",
      "group": "Hash",
      "spec": "Hash#<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#< returns false when receiver size is larger than argument",
      "group": "Hash",
      "spec": "Hash#<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#< returns false when receiver size is the same as argument",
      "group": "Hash",
      "spec": "Hash#<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#< returns true if self is a subset of the other hash",
      "group": "Hash",
      "spec": "Hash#<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#< returns true when receiver is a subset of argument",
      "group": "Hash",
      "spec": "Hash#<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#<= converts the right operand to a hash before comparing",
      "group": "Hash",
      "spec": "Hash#<=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#<= raises a TypeError if the right operand is not a hash",
      "group": "Hash",
      "spec": "Hash#<=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#<= returns false if both hashes have the same keys but different values",
      "group": "Hash",
      "spec": "Hash#<=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#<= returns false if self is not a subset of the other hash",
      "group": "Hash",
      "spec": "Hash#<=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#<= returns false when keys match but values don't",
      "group": "Hash",
      "spec": "Hash#<=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#<= returns false when receiver size is larger than argument",
      "group": "Hash",
      "spec": "Hash#<=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#<= returns false when receiver size is the same as argument",
      "group": "Hash",
      "spec": "Hash#<=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#<= returns true if both hashes are identical",
      "group": "Hash",
      "spec": "Hash#<=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#<= returns true if self is a subset of the other hash",
      "group": "Hash",
      "spec": "Hash#<=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#<= returns true when receiver is a subset of argument or equals to argument",
      "group": "Hash",
      "spec": "Hash#<=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#> converts the right operand to a hash before comparing",
      "group": "Hash",
      "spec": "Hash#>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#> raises a TypeError if the right operand is not a hash",
      "group": "Hash",
      "spec": "Hash#>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#> returns false if both hashes are identical",
      "group": "Hash",
      "spec": "Hash#>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#> returns false if both hashes have the same keys but different values",
      "group": "Hash",
      "spec": "Hash#>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#> returns false if the other hash is not a subset of self",
      "group": "Hash",
      "spec": "Hash#>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#> returns false when keys match but values don't",
      "group": "Hash",
      "spec": "Hash#>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#> returns false when receiver size is smaller than argument",
      "group": "Hash",
      "spec": "Hash#>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#> returns false when receiver size is the same as argument",
      "group": "Hash",
      "spec": "Hash#>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#> returns true if the other hash is a subset of self",
      "group": "Hash",
      "spec": "Hash#>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#> returns true when argument is a subset of receiver",
      "group": "Hash",
      "spec": "Hash#>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#>= converts the right operand to a hash before comparing",
      "group": "Hash",
      "spec": "Hash#>=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#>= raises a TypeError if the right operand is not a hash",
      "group": "Hash",
      "spec": "Hash#>=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#>= returns false if both hashes have the same keys but different values",
      "group": "Hash",
      "spec": "Hash#>=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#>= returns false if the other hash is not a subset of self",
      "group": "Hash",
      "spec": "Hash#>=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#>= returns false when argument is not a subset or not equals to receiver",
      "group": "Hash",
      "spec": "Hash#>=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#>= returns false when keys match but values don't",
      "group": "Hash",
      "spec": "Hash#>=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#>= returns false when receiver size is smaller than argument",
      "group": "Hash",
      "spec": "Hash#>=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#>= returns true if both hashes are identical",
      "group": "Hash",
      "spec": "Hash#>=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#>= returns true if the other hash is a subset of self",
      "group": "Hash",
      "spec": "Hash#>=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#>= returns true when argument is a subset of receiver or equals to receiver",
      "group": "Hash",
      "spec": "Hash#>=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#[] calls subclass implementations of default",
      "group": "Hash",
      "spec": "Hash#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#[] compares key via hash",
      "group": "Hash",
      "spec": "Hash#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#[] compares keys with eql? semantics",
      "group": "Hash",
      "spec": "Hash#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#[] compares keys with the same #hash value via #eql?",
      "group": "Hash",
      "spec": "Hash#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#[] does not compare keys with different #hash values via #eql?",
      "group": "Hash",
      "spec": "Hash#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#[] does not create copies of the immediate default value",
      "group": "Hash",
      "spec": "Hash#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#[] does not return default values for keys with nil values",
      "group": "Hash",
      "spec": "Hash#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#[] finds a value via an identical key even when its #eql? isn't reflexive",
      "group": "Hash",
      "spec": "Hash#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#[] returns nil as default default value",
      "group": "Hash",
      "spec": "Hash#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#[] returns the default (dynamic) value for missing keys",
      "group": "Hash",
      "spec": "Hash#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#[] returns the default (immediate) value for missing keys",
      "group": "Hash",
      "spec": "Hash#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#[] returns the value for key",
      "group": "Hash",
      "spec": "Hash#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#[] supports keys with private #hash method",
      "group": "Hash",
      "spec": "Hash#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#[]=  accepts keys with a Bignum hash",
      "group": "Hash",
      "spec": "Hash#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#[]= accepts keys with private #hash method",
      "group": "Hash",
      "spec": "Hash#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#[]= associates the key with the value and return the value",
      "group": "Hash",
      "spec": "Hash#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#[]= does not raise an exception if changing the value of an existing key during iteration",
      "group": "Hash",
      "spec": "Hash#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#[]= doesn't duplicate and freeze already frozen string keys",
      "group": "Hash",
      "spec": "Hash#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#[]= duplicates and freezes string keys",
      "group": "Hash",
      "spec": "Hash#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#[]= duplicates string keys using dup semantics",
      "group": "Hash",
      "spec": "Hash#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#[]= keeps the existing String key in the hash if there is a matching one",
      "group": "Hash",
      "spec": "Hash#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#[]= keeps the existing key in the hash if there is a matching one",
      "group": "Hash",
      "spec": "Hash#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#[]= raises a FrozenError if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#[]= stores unequal keys that hash to the same value",
      "group": "Hash",
      "spec": "Hash#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#any? with a block given is false if the block returns false for all members of the hash",
      "group": "Hash",
      "spec": "Hash#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#any? with a block given is false if the hash is empty",
      "group": "Hash",
      "spec": "Hash#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#any? with a block given is true if the block returns true for any member of the hash",
      "group": "Hash",
      "spec": "Hash#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#any? with no block given checks if there are any members of a Hash",
      "group": "Hash",
      "spec": "Hash#any?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#assoc only returns the first matching key-value pair for identity hashes",
      "group": "Hash",
      "spec": "Hash#assoc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#assoc returns a 2-element Array if the argument is == to a key of the Hash",
      "group": "Hash",
      "spec": "Hash#assoc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#assoc returns an Array if the argument is == to a key of the Hash",
      "group": "Hash",
      "spec": "Hash#assoc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#assoc returns nil if the argument is not a key of the Hash",
      "group": "Hash",
      "spec": "Hash#assoc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#assoc returns nil if the argument is not a key of the Hash even when there is a default",
      "group": "Hash",
      "spec": "Hash#assoc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#assoc sets the first element of the Array to the located key",
      "group": "Hash",
      "spec": "Hash#assoc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#assoc sets the last element of the Array to the value of the located key",
      "group": "Hash",
      "spec": "Hash#assoc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#assoc uses #== to compare the argument to the keys",
      "group": "Hash",
      "spec": "Hash#assoc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#clear does not remove default procs",
      "group": "Hash",
      "spec": "Hash#clear",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#clear does not remove default values",
      "group": "Hash",
      "spec": "Hash#clear",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#clear raises a FrozenError if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#clear",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#clear removes all key, value pairs",
      "group": "Hash",
      "spec": "Hash#clear",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#clone copies instance variable but not the objects they refer to",
      "group": "Hash",
      "spec": "Hash#clone",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#compact keeps own pairs",
      "group": "Hash",
      "spec": "Hash#compact",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#compact returns new object that rejects pair has nil value",
      "group": "Hash",
      "spec": "Hash#compact",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#compact! on frozen instance keeps pairs and raises a FrozenError",
      "group": "Hash",
      "spec": "Hash#compact!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#compact! rejects own pair has nil value",
      "group": "Hash",
      "spec": "Hash#compact!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#compact! returns self",
      "group": "Hash",
      "spec": "Hash#compact!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#compact! when each pair does not have nil value returns nil",
      "group": "Hash",
      "spec": "Hash#compact!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#compare_by_identity causes future comparisons on the receiver to be made by identity",
      "group": "Hash",
      "spec": "Hash#compare_by_identity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#compare_by_identity does not call #hash on keys",
      "group": "Hash",
      "spec": "Hash#compare_by_identity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#compare_by_identity does not copy string keys",
      "group": "Hash",
      "spec": "Hash#compare_by_identity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#compare_by_identity gives different identity for string literals",
      "group": "Hash",
      "spec": "Hash#compare_by_identity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#compare_by_identity has no effect on an already compare_by_identity hash",
      "group": "Hash",
      "spec": "Hash#compare_by_identity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#compare_by_identity persists over #clones",
      "group": "Hash",
      "spec": "Hash#compare_by_identity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#compare_by_identity persists over #dups",
      "group": "Hash",
      "spec": "Hash#compare_by_identity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#compare_by_identity raises a FrozenError on frozen hashes",
      "group": "Hash",
      "spec": "Hash#compare_by_identity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#compare_by_identity regards #clone'd objects as having different identities",
      "group": "Hash",
      "spec": "Hash#compare_by_identity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#compare_by_identity regards #dup'd objects as having different identities",
      "group": "Hash",
      "spec": "Hash#compare_by_identity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#compare_by_identity regards references to the same object as having the same identity",
      "group": "Hash",
      "spec": "Hash#compare_by_identity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#compare_by_identity rehashes internally so that old keys can be looked up",
      "group": "Hash",
      "spec": "Hash#compare_by_identity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#compare_by_identity returns self",
      "group": "Hash",
      "spec": "Hash#compare_by_identity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#compare_by_identity uses #equal? semantics, but doesn't actually call #equal? to determine identity",
      "group": "Hash",
      "spec": "Hash#compare_by_identity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#compare_by_identity uses the semantics of BasicObject#equal? to determine key identity",
      "group": "Hash",
      "spec": "Hash#compare_by_identity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#compare_by_identity? returns false by default",
      "group": "Hash",
      "spec": "Hash#compare_by_identity?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#compare_by_identity? returns true once #compare_by_identity has been invoked on self",
      "group": "Hash",
      "spec": "Hash#compare_by_identity?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#compare_by_identity? returns true when called multiple times on the same ident hash",
      "group": "Hash",
      "spec": "Hash#compare_by_identity?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#default calls default proc with nil arg if passed a default proc but no arg",
      "group": "Hash",
      "spec": "Hash#default",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#default returns the default value",
      "group": "Hash",
      "spec": "Hash#default",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#default uses the default proc to compute a default value, passing given key",
      "group": "Hash",
      "spec": "Hash#default",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#default= raises a FrozenError if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#default=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#default= sets the default value",
      "group": "Hash",
      "spec": "Hash#default=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#default= unsets the default proc",
      "group": "Hash",
      "spec": "Hash#default=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#default_proc returns nil if no block was passed to proc",
      "group": "Hash",
      "spec": "Hash#default_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#default_proc returns the block passed to Hash.new",
      "group": "Hash",
      "spec": "Hash#default_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#default_proc= accepts a lambda with an arity of 2",
      "group": "Hash",
      "spec": "Hash#default_proc=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#default_proc= clears the default proc if passed nil",
      "group": "Hash",
      "spec": "Hash#default_proc=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#default_proc= overrides the static default",
      "group": "Hash",
      "spec": "Hash#default_proc=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#default_proc= raises a FrozenError if self is frozen",
      "group": "Hash",
      "spec": "Hash#default_proc=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#default_proc= raises a TypeError if passed a lambda with an arity other than 2",
      "group": "Hash",
      "spec": "Hash#default_proc=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#default_proc= raises an error if passed stuff not convertible to procs",
      "group": "Hash",
      "spec": "Hash#default_proc=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#default_proc= replaces the block passed to Hash.new",
      "group": "Hash",
      "spec": "Hash#default_proc=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#default_proc= returns nil if passed nil",
      "group": "Hash",
      "spec": "Hash#default_proc=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#default_proc= returns the passed Proc",
      "group": "Hash",
      "spec": "Hash#default_proc=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#default_proc= uses :to_proc on its argument",
      "group": "Hash",
      "spec": "Hash#default_proc=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#delete accepts keys with private #hash method",
      "group": "Hash",
      "spec": "Hash#delete",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#delete allows removing a key while iterating",
      "group": "Hash",
      "spec": "Hash#delete",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#delete calls supplied block if the key is not found",
      "group": "Hash",
      "spec": "Hash#delete",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#delete raises a FrozenError if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#delete",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#delete removes the entry and returns the deleted value",
      "group": "Hash",
      "spec": "Hash#delete",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#delete returns nil if the key is not found when no block is given",
      "group": "Hash",
      "spec": "Hash#delete",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#delete_if processes entries with the same order as each()",
      "group": "Hash",
      "spec": "Hash#delete_if",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#delete_if raises a FrozenError if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#delete_if",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#delete_if removes all entries if the block is true",
      "group": "Hash",
      "spec": "Hash#delete_if",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#delete_if removes every entry for which block is true and returns self",
      "group": "Hash",
      "spec": "Hash#delete_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#delete_if returns an Enumerator if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#delete_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#delete_if returns an Enumerator if called on a non-empty hash without a block",
      "group": "Hash",
      "spec": "Hash#delete_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#delete_if returns an Enumerator if called on an empty hash without a block",
      "group": "Hash",
      "spec": "Hash#delete_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#delete_if when no block is given returned Enumerator size returns the enumerable size",
      "group": "Hash",
      "spec": "Hash#delete_if",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#delete_if yields two arguments: key and value",
      "group": "Hash",
      "spec": "Hash#delete_if",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#dig calls #dig on the result of #[] with the remaining arguments",
      "group": "Hash",
      "spec": "Hash#dig",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#dig handles type-mixed deep digging",
      "group": "Hash",
      "spec": "Hash#dig",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#dig raises TypeError if an intermediate element does not respond to #dig",
      "group": "Hash",
      "spec": "Hash#dig",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#dig raises an ArgumentError if no arguments provided",
      "group": "Hash",
      "spec": "Hash#dig",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#dig respects Hash's default",
      "group": "Hash",
      "spec": "Hash#dig",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#dig returns #[] with one arg",
      "group": "Hash",
      "spec": "Hash#dig",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#dig returns nil if any intermediate step is nil",
      "group": "Hash",
      "spec": "Hash#dig",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#dig returns the nested value specified by the sequence of keys",
      "group": "Hash",
      "spec": "Hash#dig",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#dig returns the nested value specified if the sequence includes an index",
      "group": "Hash",
      "spec": "Hash#dig",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each properly expands (or not) child class's 'each'-yielded args",
      "group": "Hash",
      "spec": "Hash#each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#each returns an Enumerator if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each returns an Enumerator if called on a non-empty hash without a block",
      "group": "Hash",
      "spec": "Hash#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each returns an Enumerator if called on an empty hash without a block",
      "group": "Hash",
      "spec": "Hash#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each uses the same order as keys() and values()",
      "group": "Hash",
      "spec": "Hash#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each when no block is given returned Enumerator size returns the enumerable size",
      "group": "Hash",
      "spec": "Hash#each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#each yields 2 values and not an Array of 2 elements when given a callable of arity 2",
      "group": "Hash",
      "spec": "Hash#each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#each yields a [[key, value]] Array for each pair to a block expecting |*args|",
      "group": "Hash",
      "spec": "Hash#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each yields the key and value of each pair to a block expecting |key, value|",
      "group": "Hash",
      "spec": "Hash#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each yields the key only to a block expecting |key,|",
      "group": "Hash",
      "spec": "Hash#each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_key calls block once for each key, passing key",
      "group": "Hash",
      "spec": "Hash#each_key",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_key processes keys in the same order as keys()",
      "group": "Hash",
      "spec": "Hash#each_key",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_key returns an Enumerator if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#each_key",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_key returns an Enumerator if called on a non-empty hash without a block",
      "group": "Hash",
      "spec": "Hash#each_key",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_key returns an Enumerator if called on an empty hash without a block",
      "group": "Hash",
      "spec": "Hash#each_key",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_key when no block is given returned Enumerator size returns the enumerable size",
      "group": "Hash",
      "spec": "Hash#each_key",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_pair properly expands (or not) child class's 'each'-yielded args",
      "group": "Hash",
      "spec": "Hash#each_pair",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_pair returns an Enumerator if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#each_pair",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_pair returns an Enumerator if called on a non-empty hash without a block",
      "group": "Hash",
      "spec": "Hash#each_pair",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_pair returns an Enumerator if called on an empty hash without a block",
      "group": "Hash",
      "spec": "Hash#each_pair",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_pair uses the same order as keys() and values()",
      "group": "Hash",
      "spec": "Hash#each_pair",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_pair when no block is given returned Enumerator size returns the enumerable size",
      "group": "Hash",
      "spec": "Hash#each_pair",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_pair yields 2 values and not an Array of 2 elements when given a callable of arity 2",
      "group": "Hash",
      "spec": "Hash#each_pair",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_pair yields a [[key, value]] Array for each pair to a block expecting |*args|",
      "group": "Hash",
      "spec": "Hash#each_pair",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_pair yields the key and value of each pair to a block expecting |key, value|",
      "group": "Hash",
      "spec": "Hash#each_pair",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_pair yields the key only to a block expecting |key,|",
      "group": "Hash",
      "spec": "Hash#each_pair",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_value calls block once for each key, passing value",
      "group": "Hash",
      "spec": "Hash#each_value",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_value processes values in the same order as values()",
      "group": "Hash",
      "spec": "Hash#each_value",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_value returns an Enumerator if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#each_value",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_value returns an Enumerator if called on a non-empty hash without a block",
      "group": "Hash",
      "spec": "Hash#each_value",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_value returns an Enumerator if called on an empty hash without a block",
      "group": "Hash",
      "spec": "Hash#each_value",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#each_value when no block is given returned Enumerator size returns the enumerable size",
      "group": "Hash",
      "spec": "Hash#each_value",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#empty? returns true if the hash has no entries",
      "group": "Hash",
      "spec": "Hash#empty?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#empty? returns true if the hash has no entries and has a default value",
      "group": "Hash",
      "spec": "Hash#empty?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch gives precedence to the default block over the default argument when passed both",
      "group": "Hash",
      "spec": "Hash#fetch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch raises an ArgumentError when not passed one or two arguments",
      "group": "Hash",
      "spec": "Hash#fetch",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch returns default if key is not found when passed a default",
      "group": "Hash",
      "spec": "Hash#fetch",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch returns the value for key",
      "group": "Hash",
      "spec": "Hash#fetch",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch returns value of block if key is not found when passed a block",
      "group": "Hash",
      "spec": "Hash#fetch",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch when the key is not found formats the object with #inspect in the KeyError message",
      "group": "Hash",
      "spec": "Hash#fetch",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch when the key is not found raises a KeyError",
      "group": "Hash",
      "spec": "Hash#fetch",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch when the key is not found raises a KeyError",
      "group": "Hash",
      "spec": "Hash#fetch",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch when the key is not found raises a KeyError",
      "group": "Hash",
      "spec": "Hash#fetch",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch when the key is not found raises a KeyError",
      "group": "Hash",
      "spec": "Hash#fetch",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch when the key is not found sets the Hash as the receiver of KeyError",
      "group": "Hash",
      "spec": "Hash#fetch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch when the key is not found sets the Hash as the receiver of KeyError",
      "group": "Hash",
      "spec": "Hash#fetch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch when the key is not found sets the Hash as the receiver of KeyError",
      "group": "Hash",
      "spec": "Hash#fetch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch when the key is not found sets the Hash as the receiver of KeyError",
      "group": "Hash",
      "spec": "Hash#fetch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch when the key is not found sets the unmatched key as the key of KeyError",
      "group": "Hash",
      "spec": "Hash#fetch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch when the key is not found sets the unmatched key as the key of KeyError",
      "group": "Hash",
      "spec": "Hash#fetch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch when the key is not found sets the unmatched key as the key of KeyError",
      "group": "Hash",
      "spec": "Hash#fetch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch when the key is not found sets the unmatched key as the key of KeyError",
      "group": "Hash",
      "spec": "Hash#fetch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch_values with matched keys returns the values for keys",
      "group": "Hash",
      "spec": "Hash#fetch_values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch_values with matched keys returns the values for keys ordered in the order of the requested keys",
      "group": "Hash",
      "spec": "Hash#fetch_values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch_values with unmatched keys raises a KeyError",
      "group": "Hash",
      "spec": "Hash#fetch_values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch_values with unmatched keys returns the default value from block",
      "group": "Hash",
      "spec": "Hash#fetch_values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch_values with unmatched keys sets the Hash as the receiver of KeyError",
      "group": "Hash",
      "spec": "Hash#fetch_values",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch_values with unmatched keys sets the unmatched key as the key of KeyError",
      "group": "Hash",
      "spec": "Hash#fetch_values",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#fetch_values without keys returns an empty Array",
      "group": "Hash",
      "spec": "Hash#fetch_values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#filter processes entries with the same order as reject",
      "group": "Hash",
      "spec": "Hash#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#filter returns a Hash of entries for which block is true",
      "group": "Hash",
      "spec": "Hash#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#filter returns an Enumerator if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#filter returns an Enumerator if called on a non-empty hash without a block",
      "group": "Hash",
      "spec": "Hash#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#filter returns an Enumerator if called on an empty hash without a block",
      "group": "Hash",
      "spec": "Hash#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#filter returns an Enumerator when called on a non-empty hash without a block",
      "group": "Hash",
      "spec": "Hash#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#filter returns an Enumerator when called on an empty hash without a block",
      "group": "Hash",
      "spec": "Hash#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#filter when no block is given returned Enumerator size returns the enumerable size",
      "group": "Hash",
      "spec": "Hash#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#filter yields two arguments: key and value",
      "group": "Hash",
      "spec": "Hash#filter",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#filter! is equivalent to keep_if if changes are made",
      "group": "Hash",
      "spec": "Hash#filter!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#filter! raises a FrozenError if called on a frozen instance that would not be modified",
      "group": "Hash",
      "spec": "Hash#filter!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#filter! raises a FrozenError if called on an empty frozen instance",
      "group": "Hash",
      "spec": "Hash#filter!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#filter! removes all entries if the block is false",
      "group": "Hash",
      "spec": "Hash#filter!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#filter! returns an Enumerator if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#filter!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#filter! returns an Enumerator if called on a non-empty hash without a block",
      "group": "Hash",
      "spec": "Hash#filter!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#filter! returns an Enumerator if called on an empty hash without a block",
      "group": "Hash",
      "spec": "Hash#filter!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#filter! returns nil if no changes were made",
      "group": "Hash",
      "spec": "Hash#filter!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#filter! when no block is given returned Enumerator size returns the enumerable size",
      "group": "Hash",
      "spec": "Hash#filter!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#flatten does not recursively flatten Array values when called without arguments",
      "group": "Hash",
      "spec": "Hash#flatten",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#flatten does not recursively flatten Hash values when called without arguments",
      "group": "Hash",
      "spec": "Hash#flatten",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#flatten raises a TypeError if given a non-Integer argument",
      "group": "Hash",
      "spec": "Hash#flatten",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#flatten recursively flattens Array values to the given depth",
      "group": "Hash",
      "spec": "Hash#flatten",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#flatten recursively flattens Array values when called with an argument >= 2",
      "group": "Hash",
      "spec": "Hash#flatten",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#flatten returns an Array",
      "group": "Hash",
      "spec": "Hash#flatten",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#flatten returns an empty Array for an empty Hash",
      "group": "Hash",
      "spec": "Hash#flatten",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#flatten sets each even index of the Array to a key of the Hash",
      "group": "Hash",
      "spec": "Hash#flatten",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#flatten sets each odd index of the Array to the value corresponding to the previous element",
      "group": "Hash",
      "spec": "Hash#flatten",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#has_key? compares keys with the same #hash value via #eql?",
      "group": "Hash",
      "spec": "Hash#has_key?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#has_key? returns true if argument is a key",
      "group": "Hash",
      "spec": "Hash#has_key?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#has_key? returns true if the key is nil",
      "group": "Hash",
      "spec": "Hash#has_key?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#has_key? returns true if the key's matching value was false",
      "group": "Hash",
      "spec": "Hash#has_key?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#has_key? returns true if the key's matching value was nil",
      "group": "Hash",
      "spec": "Hash#has_key?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#has_value? returns true if the value exists in the hash",
      "group": "Hash",
      "spec": "Hash#has_value?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#has_value? uses == semantics for comparing values",
      "group": "Hash",
      "spec": "Hash#has_value?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#hash generates a hash for recursive hash structures",
      "group": "Hash",
      "spec": "Hash#hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#hash returns a value in which element keys and values do not cancel each other out",
      "group": "Hash",
      "spec": "Hash#hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#hash returns a value in which element values do not cancel each other out",
      "group": "Hash",
      "spec": "Hash#hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#hash returns a value which doesn't depend on the hash order",
      "group": "Hash",
      "spec": "Hash#hash",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#hash returns the same hash for recursive hashes",
      "group": "Hash",
      "spec": "Hash#hash",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#hash returns the same hash for recursive hashes through arrays",
      "group": "Hash",
      "spec": "Hash#hash",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#include? compares keys with the same #hash value via #eql?",
      "group": "Hash",
      "spec": "Hash#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#include? returns true if argument is a key",
      "group": "Hash",
      "spec": "Hash#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#include? returns true if the key is nil",
      "group": "Hash",
      "spec": "Hash#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#include? returns true if the key's matching value was false",
      "group": "Hash",
      "spec": "Hash#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#include? returns true if the key's matching value was nil",
      "group": "Hash",
      "spec": "Hash#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#index compares values using ==",
      "group": "Hash",
      "spec": "Hash#index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#index doesn't return default value if the value is not found",
      "group": "Hash",
      "spec": "Hash#index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#index returns nil if the value is not found",
      "group": "Hash",
      "spec": "Hash#index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#index returns the corresponding key for value",
      "group": "Hash",
      "spec": "Hash#index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#initialize can be used to reset default_proc",
      "group": "Hash",
      "spec": "Hash#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#initialize can be used to reset the default value",
      "group": "Hash",
      "spec": "Hash#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#initialize does not change the storage, only the default value or proc",
      "group": "Hash",
      "spec": "Hash#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#initialize is private",
      "group": "Hash",
      "spec": "Hash#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#initialize raises a FrozenError if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#initialize receives the arguments passed to Hash#new",
      "group": "Hash",
      "spec": "Hash#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#initialize returns self",
      "group": "Hash",
      "spec": "Hash#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#inspect calls #inspect on keys and values",
      "group": "Hash",
      "spec": "Hash#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#inspect calls #to_s on the object returned from #inspect if the Object isn't a String",
      "group": "Hash",
      "spec": "Hash#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#inspect does not call #to_s on a String returned from #inspect",
      "group": "Hash",
      "spec": "Hash#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#inspect does not call #to_str on the object returned from #inspect when it is not a String",
      "group": "Hash",
      "spec": "Hash#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#inspect does not call #to_str on the object returned from #to_s when it is not a String",
      "group": "Hash",
      "spec": "Hash#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#inspect does not raise if inspected result is not default external encoding",
      "group": "Hash",
      "spec": "Hash#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#inspect does not swallow exceptions raised by #to_s",
      "group": "Hash",
      "spec": "Hash#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#inspect handles hashes with recursive values",
      "group": "Hash",
      "spec": "Hash#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#inspect returns a string representation with same order as each()",
      "group": "Hash",
      "spec": "Hash#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#inspect returns a tainted string if self is tainted and not empty",
      "group": "Hash",
      "spec": "Hash#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#inspect returns an untrusted string if self is untrusted and not empty",
      "group": "Hash",
      "spec": "Hash#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#invert compares new keys with eql? semantics",
      "group": "Hash",
      "spec": "Hash#invert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#invert does not return subclass instances for subclasses",
      "group": "Hash",
      "spec": "Hash#invert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#invert handles collisions by overriding with the key coming later in keys()",
      "group": "Hash",
      "spec": "Hash#invert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#invert returns a new hash where keys are values and vice versa",
      "group": "Hash",
      "spec": "Hash#invert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#keep_if keeps every entry for which block is true and returns self",
      "group": "Hash",
      "spec": "Hash#keep_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#keep_if raises a FrozenError if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#keep_if",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#keep_if removes all entries if the block is false",
      "group": "Hash",
      "spec": "Hash#keep_if",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#keep_if returns an Enumerator if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#keep_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#keep_if returns an Enumerator if called on a non-empty hash without a block",
      "group": "Hash",
      "spec": "Hash#keep_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#keep_if returns an Enumerator if called on an empty hash without a block",
      "group": "Hash",
      "spec": "Hash#keep_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#keep_if returns self even if unmodified",
      "group": "Hash",
      "spec": "Hash#keep_if",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#keep_if when no block is given returned Enumerator size returns the enumerable size",
      "group": "Hash",
      "spec": "Hash#keep_if",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#keep_if yields two arguments: key and value",
      "group": "Hash",
      "spec": "Hash#keep_if",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#key compares values using ==",
      "group": "Hash",
      "spec": "Hash#key",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#key doesn't return default value if the value is not found",
      "group": "Hash",
      "spec": "Hash#key",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#key returns nil if the value is not found",
      "group": "Hash",
      "spec": "Hash#key",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#key returns the corresponding key for value",
      "group": "Hash",
      "spec": "Hash#key",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#key? compares keys with the same #hash value via #eql?",
      "group": "Hash",
      "spec": "Hash#key?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#key? returns true if argument is a key",
      "group": "Hash",
      "spec": "Hash#key?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#key? returns true if the key is nil",
      "group": "Hash",
      "spec": "Hash#key?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#key? returns true if the key's matching value was false",
      "group": "Hash",
      "spec": "Hash#key?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#key? returns true if the key's matching value was nil",
      "group": "Hash",
      "spec": "Hash#key?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#keys returns an array with the keys in the order they were inserted",
      "group": "Hash",
      "spec": "Hash#keys",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#keys uses the same order as #values",
      "group": "Hash",
      "spec": "Hash#keys",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#length returns the number of entries",
      "group": "Hash",
      "spec": "Hash#length",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#member? compares keys with the same #hash value via #eql?",
      "group": "Hash",
      "spec": "Hash#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#member? returns true if argument is a key",
      "group": "Hash",
      "spec": "Hash#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#member? returns true if the key is nil",
      "group": "Hash",
      "spec": "Hash#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#member? returns true if the key's matching value was false",
      "group": "Hash",
      "spec": "Hash#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#member? returns true if the key's matching value was nil",
      "group": "Hash",
      "spec": "Hash#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#rassoc only returns the first matching key-value pair",
      "group": "Hash",
      "spec": "Hash#rassoc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#rassoc returns a 2-element Array if the argument is a value of the Hash",
      "group": "Hash",
      "spec": "Hash#rassoc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#rassoc returns an Array if the argument is a value of the Hash",
      "group": "Hash",
      "spec": "Hash#rassoc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#rassoc returns nil if the argument is not a value of the Hash",
      "group": "Hash",
      "spec": "Hash#rassoc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#rassoc returns nil if the argument is not a value of the Hash even when there is a default",
      "group": "Hash",
      "spec": "Hash#rassoc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#rassoc sets the first element of the Array to the key of the located value",
      "group": "Hash",
      "spec": "Hash#rassoc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#rassoc sets the last element of the Array to the located value",
      "group": "Hash",
      "spec": "Hash#rassoc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#rassoc uses #== to compare the argument to the values",
      "group": "Hash",
      "spec": "Hash#rassoc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#rehash raises a FrozenError if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#rehash",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#rehash removes duplicate keys",
      "group": "Hash",
      "spec": "Hash#rehash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#rehash reorganizes the hash by recomputing all key hash codes",
      "group": "Hash",
      "spec": "Hash#rehash",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#reject is equivalent to hsh.dup.delete_if",
      "group": "Hash",
      "spec": "Hash#reject",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#reject processes entries with the same order as reject!",
      "group": "Hash",
      "spec": "Hash#reject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#reject returns a new hash removing keys for which the block yields true",
      "group": "Hash",
      "spec": "Hash#reject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#reject returns an Enumerator if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#reject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#reject returns an Enumerator if called on a non-empty hash without a block",
      "group": "Hash",
      "spec": "Hash#reject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#reject returns an Enumerator if called on an empty hash without a block",
      "group": "Hash",
      "spec": "Hash#reject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#reject when no block is given returned Enumerator size returns the enumerable size",
      "group": "Hash",
      "spec": "Hash#reject",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#reject with extra state does not taint the resulting hash",
      "group": "Hash",
      "spec": "Hash#reject",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#reject with extra state returns Hash instance for subclasses",
      "group": "Hash",
      "spec": "Hash#reject",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#reject! is equivalent to delete_if if changes are made",
      "group": "Hash",
      "spec": "Hash#reject!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#reject! processes entries with the same order as delete_if",
      "group": "Hash",
      "spec": "Hash#reject!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#reject! raises a FrozenError if called on a frozen instance that is modified",
      "group": "Hash",
      "spec": "Hash#reject!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#reject! raises a FrozenError if called on a frozen instance that would not be modified",
      "group": "Hash",
      "spec": "Hash#reject!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#reject! removes all entries if the block is true",
      "group": "Hash",
      "spec": "Hash#reject!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#reject! removes keys from self for which the block yields true",
      "group": "Hash",
      "spec": "Hash#reject!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#reject! returns an Enumerator if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#reject!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#reject! returns an Enumerator if called on a non-empty hash without a block",
      "group": "Hash",
      "spec": "Hash#reject!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#reject! returns an Enumerator if called on an empty hash without a block",
      "group": "Hash",
      "spec": "Hash#reject!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#reject! returns nil if no changes were made",
      "group": "Hash",
      "spec": "Hash#reject!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#reject! when no block is given returned Enumerator size returns the enumerable size",
      "group": "Hash",
      "spec": "Hash#reject!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#replace calls to_hash on hash subclasses",
      "group": "Hash",
      "spec": "Hash#replace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#replace does not transfer default values",
      "group": "Hash",
      "spec": "Hash#replace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#replace raises a FrozenError if called on a frozen instance that is modified",
      "group": "Hash",
      "spec": "Hash#replace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#replace raises a FrozenError if called on a frozen instance that would not be modified",
      "group": "Hash",
      "spec": "Hash#replace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#replace replaces the contents of self with other",
      "group": "Hash",
      "spec": "Hash#replace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#replace tries to convert the passed argument to a hash using #to_hash",
      "group": "Hash",
      "spec": "Hash#replace",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#select processes entries with the same order as reject",
      "group": "Hash",
      "spec": "Hash#select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#select returns a Hash of entries for which block is true",
      "group": "Hash",
      "spec": "Hash#select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#select returns an Enumerator if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#select returns an Enumerator if called on a non-empty hash without a block",
      "group": "Hash",
      "spec": "Hash#select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#select returns an Enumerator if called on an empty hash without a block",
      "group": "Hash",
      "spec": "Hash#select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#select returns an Enumerator when called on a non-empty hash without a block",
      "group": "Hash",
      "spec": "Hash#select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#select returns an Enumerator when called on an empty hash without a block",
      "group": "Hash",
      "spec": "Hash#select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#select when no block is given returned Enumerator size returns the enumerable size",
      "group": "Hash",
      "spec": "Hash#select",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#select yields two arguments: key and value",
      "group": "Hash",
      "spec": "Hash#select",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#select! is equivalent to keep_if if changes are made",
      "group": "Hash",
      "spec": "Hash#select!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#select! raises a FrozenError if called on a frozen instance that would not be modified",
      "group": "Hash",
      "spec": "Hash#select!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#select! raises a FrozenError if called on an empty frozen instance",
      "group": "Hash",
      "spec": "Hash#select!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#select! removes all entries if the block is false",
      "group": "Hash",
      "spec": "Hash#select!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#select! returns an Enumerator if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#select!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#select! returns an Enumerator if called on a non-empty hash without a block",
      "group": "Hash",
      "spec": "Hash#select!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#select! returns an Enumerator if called on an empty hash without a block",
      "group": "Hash",
      "spec": "Hash#select!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#select! returns nil if no changes were made",
      "group": "Hash",
      "spec": "Hash#select!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#select! when no block is given returned Enumerator size returns the enumerable size",
      "group": "Hash",
      "spec": "Hash#select!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#shift allows shifting entries while iterating",
      "group": "Hash",
      "spec": "Hash#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#shift calls #default with nil if the Hash is empty",
      "group": "Hash",
      "spec": "Hash#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#shift preserves Hash invariants when removing the last item",
      "group": "Hash",
      "spec": "Hash#shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#shift raises a FrozenError if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#shift removes a pair from hash and return it",
      "group": "Hash",
      "spec": "Hash#shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#shift returns (computed) default for empty hashes",
      "group": "Hash",
      "spec": "Hash#shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#shift returns nil from an empty hash",
      "group": "Hash",
      "spec": "Hash#shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#shift works when the hash is at capacity",
      "group": "Hash",
      "spec": "Hash#shift",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#size returns the number of entries",
      "group": "Hash",
      "spec": "Hash#size",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#slice returns a Hash instance, even on subclasses",
      "group": "Hash",
      "spec": "Hash#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#slice returns a hash ordered in the order of the requested keys",
      "group": "Hash",
      "spec": "Hash#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#slice returns a new empty hash without arguments",
      "group": "Hash",
      "spec": "Hash#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#slice returns only the keys of the original hash",
      "group": "Hash",
      "spec": "Hash#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#slice returns the requested subset",
      "group": "Hash",
      "spec": "Hash#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#slice uses the regular Hash#[] method, even on subclasses that override it",
      "group": "Hash",
      "spec": "Hash#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#sort converts self to a nested array of [key, value] arrays and sort with Array#sort",
      "group": "Hash",
      "spec": "Hash#sort",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#sort uses block to sort array if passed a block",
      "group": "Hash",
      "spec": "Hash#sort",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#sort works when some of the keys are themselves arrays",
      "group": "Hash",
      "spec": "Hash#sort",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#store  accepts keys with a Bignum hash",
      "group": "Hash",
      "spec": "Hash#store",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#store accepts keys with private #hash method",
      "group": "Hash",
      "spec": "Hash#store",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#store associates the key with the value and return the value",
      "group": "Hash",
      "spec": "Hash#store",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#store does not raise an exception if changing the value of an existing key during iteration",
      "group": "Hash",
      "spec": "Hash#store",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#store doesn't duplicate and freeze already frozen string keys",
      "group": "Hash",
      "spec": "Hash#store",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#store duplicates and freezes string keys",
      "group": "Hash",
      "spec": "Hash#store",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#store duplicates string keys using dup semantics",
      "group": "Hash",
      "spec": "Hash#store",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#store keeps the existing String key in the hash if there is a matching one",
      "group": "Hash",
      "spec": "Hash#store",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#store keeps the existing key in the hash if there is a matching one",
      "group": "Hash",
      "spec": "Hash#store",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#store raises a FrozenError if called on a frozen instance",
      "group": "Hash",
      "spec": "Hash#store",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#store stores unequal keys that hash to the same value",
      "group": "Hash",
      "spec": "Hash#store",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_a is called for Enumerable#entries",
      "group": "Hash",
      "spec": "Hash#to_a",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_a returns a list of [key, value] pairs with same order as each()",
      "group": "Hash",
      "spec": "Hash#to_a",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_a returns a tainted array if self is tainted",
      "group": "Hash",
      "spec": "Hash#to_a",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_a returns an untrusted array if self is untrusted",
      "group": "Hash",
      "spec": "Hash#to_a",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_h returns self for Hash instances",
      "group": "Hash",
      "spec": "Hash#to_h",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_h when called on a subclass of Hash copies the default",
      "group": "Hash",
      "spec": "Hash#to_h",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_h when called on a subclass of Hash copies the default_proc",
      "group": "Hash",
      "spec": "Hash#to_h",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_h when called on a subclass of Hash returns a new Hash instance",
      "group": "Hash",
      "spec": "Hash#to_h",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_h with block coerces returned pair to Array with #to_ary",
      "group": "Hash",
      "spec": "Hash#to_h",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_h with block converts [key, value] pairs returned by the block to a hash",
      "group": "Hash",
      "spec": "Hash#to_h",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_h with block does not coerce returned pair to Array with #to_a",
      "group": "Hash",
      "spec": "Hash#to_h",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_h with block raises ArgumentError if block returns longer or shorter array",
      "group": "Hash",
      "spec": "Hash#to_h",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_h with block raises TypeError if block returns something other than Array",
      "group": "Hash",
      "spec": "Hash#to_h",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_hash returns self for Hash instances",
      "group": "Hash",
      "spec": "Hash#to_hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_hash returns self for instances of subclasses of Hash",
      "group": "Hash",
      "spec": "Hash#to_hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_proc returns an instance of Proc",
      "group": "Hash",
      "spec": "Hash#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_proc the returned proc is not a lambda",
      "group": "Hash",
      "spec": "Hash#to_proc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_proc the returned proc passed as a block retrieves the hash's values",
      "group": "Hash",
      "spec": "Hash#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_proc the returned proc passed as a block to instance_exec always retrieves the original hash's values",
      "group": "Hash",
      "spec": "Hash#to_proc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_proc the returned proc raises ArgumentError if not passed exactly one argument",
      "group": "Hash",
      "spec": "Hash#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_proc the returned proc raises an ArgumentError when calling #call on the Proc with no arguments",
      "group": "Hash",
      "spec": "Hash#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_proc the returned proc with a stored key returns the paired value",
      "group": "Hash",
      "spec": "Hash#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_proc the returned proc with no stored key returns nil",
      "group": "Hash",
      "spec": "Hash#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_proc the returned proc with no stored key when the hash has a default proc returns an evaluated value from the default proc",
      "group": "Hash",
      "spec": "Hash#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_proc the returned proc with no stored key when the hash has a default value returns the default value",
      "group": "Hash",
      "spec": "Hash#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_s calls #inspect on keys and values",
      "group": "Hash",
      "spec": "Hash#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_s calls #to_s on the object returned from #inspect if the Object isn't a String",
      "group": "Hash",
      "spec": "Hash#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_s does not call #to_s on a String returned from #inspect",
      "group": "Hash",
      "spec": "Hash#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_s does not call #to_str on the object returned from #inspect when it is not a String",
      "group": "Hash",
      "spec": "Hash#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_s does not call #to_str on the object returned from #to_s when it is not a String",
      "group": "Hash",
      "spec": "Hash#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_s does not raise if inspected result is not default external encoding",
      "group": "Hash",
      "spec": "Hash#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_s does not swallow exceptions raised by #to_s",
      "group": "Hash",
      "spec": "Hash#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_s handles hashes with recursive values",
      "group": "Hash",
      "spec": "Hash#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_s returns a string representation with same order as each()",
      "group": "Hash",
      "spec": "Hash#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_s returns a tainted string if self is tainted and not empty",
      "group": "Hash",
      "spec": "Hash#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#to_s returns an untrusted string if self is untrusted and not empty",
      "group": "Hash",
      "spec": "Hash#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_keys keeps last pair if new keys conflict",
      "group": "Hash",
      "spec": "Hash#transform_keys",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_keys makes both hashes to share values",
      "group": "Hash",
      "spec": "Hash#transform_keys",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_keys returns a Hash instance, even on subclasses",
      "group": "Hash",
      "spec": "Hash#transform_keys",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_keys returns new hash",
      "group": "Hash",
      "spec": "Hash#transform_keys",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_keys sets the result as transformed keys with the given block",
      "group": "Hash",
      "spec": "Hash#transform_keys",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_keys when no block is given returns a sized Enumerator",
      "group": "Hash",
      "spec": "Hash#transform_keys",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_keys! keeps later pair if new keys conflict",
      "group": "Hash",
      "spec": "Hash#transform_keys!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_keys! on frozen instance keeps pairs and raises a FrozenError",
      "group": "Hash",
      "spec": "Hash#transform_keys!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_keys! on frozen instance raises a FrozenError on an empty hash",
      "group": "Hash",
      "spec": "Hash#transform_keys!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_keys! on frozen instance when no block is given does not raise an exception",
      "group": "Hash",
      "spec": "Hash#transform_keys!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_keys! prevents conflicts between new keys and old ones",
      "group": "Hash",
      "spec": "Hash#transform_keys!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_keys! returns self",
      "group": "Hash",
      "spec": "Hash#transform_keys!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_keys! returns the processed keys if we broke from the block",
      "group": "Hash",
      "spec": "Hash#transform_keys!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_keys! updates self as transformed values with the given block",
      "group": "Hash",
      "spec": "Hash#transform_keys!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_keys! when no block is given returns a sized Enumerator",
      "group": "Hash",
      "spec": "Hash#transform_keys!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_values makes both hashes to share keys",
      "group": "Hash",
      "spec": "Hash#transform_values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_values returns a Hash instance, even on subclasses",
      "group": "Hash",
      "spec": "Hash#transform_values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_values returns new hash",
      "group": "Hash",
      "spec": "Hash#transform_values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_values sets the result as transformed values with the given block",
      "group": "Hash",
      "spec": "Hash#transform_values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_values when no block is given returns a sized Enumerator",
      "group": "Hash",
      "spec": "Hash#transform_values",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_values! on frozen instance keeps pairs and raises a FrozenError",
      "group": "Hash",
      "spec": "Hash#transform_values!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_values! on frozen instance raises a FrozenError on an empty hash",
      "group": "Hash",
      "spec": "Hash#transform_values!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_values! on frozen instance when no block is given does not raise an exception",
      "group": "Hash",
      "spec": "Hash#transform_values!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_values! partially modifies the contents if we broke from the block",
      "group": "Hash",
      "spec": "Hash#transform_values!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_values! returns self",
      "group": "Hash",
      "spec": "Hash#transform_values!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_values! updates self as transformed values with the given block",
      "group": "Hash",
      "spec": "Hash#transform_values!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#transform_values! when no block is given returns a sized Enumerator",
      "group": "Hash",
      "spec": "Hash#transform_values!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash#value? returns true if the value exists in the hash",
      "group": "Hash",
      "spec": "Hash#value?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#value? uses == semantics for comparing values",
      "group": "Hash",
      "spec": "Hash#value?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#values returns an array of values",
      "group": "Hash",
      "spec": "Hash#values",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash#values_at returns an array of values for the given keys",
      "group": "Hash",
      "spec": "Hash#values_at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash.[] calls to_hash",
      "group": "Hash",
      "spec": "Hash.[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash.[] coerces a single argument which responds to #to_ary",
      "group": "Hash",
      "spec": "Hash.[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash.[] creates a Hash; values can be provided as a list of value-pairs in an array",
      "group": "Hash",
      "spec": "Hash.[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash.[] creates a Hash; values can be provided as one single hash",
      "group": "Hash",
      "spec": "Hash.[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash.[] creates a Hash; values can be provided as the argument list",
      "group": "Hash",
      "spec": "Hash.[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash.[] does not call #initialize on the subclass instance",
      "group": "Hash",
      "spec": "Hash.[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash.[] ignores elements that are not arrays",
      "group": "Hash",
      "spec": "Hash.[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash.[] passed a single argument which responds to #to_hash coerces it and returns a copy",
      "group": "Hash",
      "spec": "Hash.[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash.[] passed an array treats elements that are 1 element arrays as keys with value nil",
      "group": "Hash",
      "spec": "Hash.[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash.[] passed an array treats elements that are 2 element arrays as key and value",
      "group": "Hash",
      "spec": "Hash.[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash.[] passed zero arguments returns an empty hash",
      "group": "Hash",
      "spec": "Hash.[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash.[] raises an ArgumentError for arrays of more than 2 elements",
      "group": "Hash",
      "spec": "Hash.[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash.[] raises an ArgumentError when passed a list of value-invalid-pairs in an array",
      "group": "Hash",
      "spec": "Hash.[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash.[] raises an ArgumentError when passed an odd number of arguments",
      "group": "Hash",
      "spec": "Hash.[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash.[] removes the default_proc",
      "group": "Hash",
      "spec": "Hash.[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash.[] returns an instance of a subclass when passed an Array",
      "group": "Hash",
      "spec": "Hash.[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash.[] returns an instance of the class it's called on",
      "group": "Hash",
      "spec": "Hash.[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash.[] returns instances of subclasses",
      "group": "Hash",
      "spec": "Hash.[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash.allocate returns a fully-formed instance of Hash",
      "group": "Hash",
      "spec": "Hash.allocate",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash.allocate returns an instance of Hash",
      "group": "Hash",
      "spec": "Hash.allocate",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash.new creates a Hash with a default_proc if passed a block",
      "group": "Hash",
      "spec": "Hash.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash.new creates a new Hash with default object if passed a default argument",
      "group": "Hash",
      "spec": "Hash.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash.new creates an empty Hash if passed no arguments",
      "group": "Hash",
      "spec": "Hash.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash.new does not create a copy of the default argument",
      "group": "Hash",
      "spec": "Hash.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash.new raises an ArgumentError if more than one argument is passed",
      "group": "Hash",
      "spec": "Hash.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash.new raises an ArgumentError if passed both default argument and default block",
      "group": "Hash",
      "spec": "Hash.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Hash.try_convert does not rescue exceptions raised by #to_hash",
      "group": "Hash",
      "spec": "Hash.try_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash.try_convert returns nil when the argument does not respond to #to_hash",
      "group": "Hash",
      "spec": "Hash.try_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash.try_convert returns the argument if it's a Hash",
      "group": "Hash",
      "spec": "Hash.try_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash.try_convert returns the argument if it's a kind of Hash",
      "group": "Hash",
      "spec": "Hash.try_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash.try_convert sends #to_hash to the argument and raises TypeError if it's not a kind of Hash",
      "group": "Hash",
      "spec": "Hash.try_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash.try_convert sends #to_hash to the argument and returns the result if it's a Hash",
      "group": "Hash",
      "spec": "Hash.try_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash.try_convert sends #to_hash to the argument and returns the result if it's a kind of Hash",
      "group": "Hash",
      "spec": "Hash.try_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Hash.try_convert sends #to_hash to the argument and returns the result if it's nil",
      "group": "Hash",
      "spec": "Hash.try_convert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:IO::EAGAINWaitReadable combines Errno::EAGAIN and IO::WaitReadable",
      "group": "IO::EAGAINWaitReadable",
      "spec": "IO::EAGAINWaitReadable",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:IO::EAGAINWaitReadable is the same as IO::EWOULDBLOCKWaitReadable if Errno::EAGAIN is the same as Errno::EWOULDBLOCK",
      "group": "IO::EAGAINWaitReadable",
      "spec": "IO::EAGAINWaitReadable",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:IO::EAGAINWaitWritable combines Errno::EAGAIN and IO::WaitWritable",
      "group": "IO::EAGAINWaitWritable",
      "spec": "IO::EAGAINWaitWritable",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:IO::EAGAINWaitWritable is the same as IO::EWOULDBLOCKWaitWritable if Errno::EAGAIN is the same as Errno::EWOULDBLOCK",
      "group": "IO::EAGAINWaitWritable",
      "spec": "IO::EAGAINWaitWritable",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:IO::EWOULDBLOCKWaitReadable combines Errno::EWOULDBLOCK and IO::WaitReadable",
      "group": "IO::EWOULDBLOCKWaitReadable",
      "spec": "IO::EWOULDBLOCKWaitReadable",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:IO::EWOULDBLOCKWaitWritable combines Errno::EWOULDBLOCK and IO::WaitWritable",
      "group": "IO::EWOULDBLOCKWaitWritable",
      "spec": "IO::EWOULDBLOCKWaitWritable",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:IOError is a superclass of EOFError",
      "group": "IOError",
      "spec": "IOError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer includes Comparable",
      "group": "Integer",
      "spec": "Integer",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer is the class of both small and large integers",
      "group": "Integer",
      "spec": "Integer",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#% bignum raises a TypeError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#% bignum raises a ZeroDivisionError when the given argument is 0",
      "group": "Integer",
      "spec": "Integer#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#% bignum raises a ZeroDivisionError when the given argument is 0 and a Float",
      "group": "Integer",
      "spec": "Integer#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#% bignum returns the modulus obtained from dividing self by the given argument",
      "group": "Integer",
      "spec": "Integer#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#% fixnum raises a TypeError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#% fixnum raises a ZeroDivisionError when the given argument is 0",
      "group": "Integer",
      "spec": "Integer#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#% fixnum raises a ZeroDivisionError when the given argument is 0 and a Float",
      "group": "Integer",
      "spec": "Integer#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#% fixnum returns the modulus obtained from dividing self by the given argument",
      "group": "Integer",
      "spec": "Integer#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#& bignum raises a TypeError and does not call #to_int when defined on an object",
      "group": "Integer",
      "spec": "Integer#&",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#& bignum raises a TypeError when passed a Float",
      "group": "Integer",
      "spec": "Integer#&",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#& bignum returns self bitwise AND other",
      "group": "Integer",
      "spec": "Integer#&",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#& bignum returns self bitwise AND other when both are negative and a multiple in bitsize of Fixnum::MIN",
      "group": "Integer",
      "spec": "Integer#&",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#& bignum returns self bitwise AND other when both operands are negative",
      "group": "Integer",
      "spec": "Integer#&",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#& bignum returns self bitwise AND other when one operand is negative",
      "group": "Integer",
      "spec": "Integer#&",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#& fixnum coerces the rhs and calls #coerce",
      "group": "Integer",
      "spec": "Integer#&",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#& fixnum raises a TypeError and does not call #to_int when defined on an object",
      "group": "Integer",
      "spec": "Integer#&",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#& fixnum raises a TypeError when passed a Float",
      "group": "Integer",
      "spec": "Integer#&",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#& fixnum returns self bitwise AND a bignum",
      "group": "Integer",
      "spec": "Integer#&",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#& fixnum returns self bitwise AND other",
      "group": "Integer",
      "spec": "Integer#&",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#& fixnum returns self bitwise AND other when both operands are negative",
      "group": "Integer",
      "spec": "Integer#&",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#& fixnum returns self bitwise AND other when one operand is negative",
      "group": "Integer",
      "spec": "Integer#&",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#* bignum raises a TypeError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#* bignum returns self multiplied by the given Integer",
      "group": "Integer",
      "spec": "Integer#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#* does not rescue exception raised in other#coerce",
      "group": "Integer",
      "spec": "Integer#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#* fixnum raises a TypeError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#* fixnum returns self multiplied by the given Integer",
      "group": "Integer",
      "spec": "Integer#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#** bignum raises a TypeError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#** bignum returns a complex number when negative and raised to a fractional power",
      "group": "Integer",
      "spec": "Integer#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#** bignum returns self raised to other power",
      "group": "Integer",
      "spec": "Integer#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#** bignum switch to a Float when the values is too big",
      "group": "Integer",
      "spec": "Integer#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#** fixnum can raise -1 to a bignum safely",
      "group": "Integer",
      "spec": "Integer#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#** fixnum can raise 1 to a bignum safely",
      "group": "Integer",
      "spec": "Integer#**",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#** fixnum coerces power and calls #**",
      "group": "Integer",
      "spec": "Integer#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#** fixnum overflows the answer to a bignum transparently",
      "group": "Integer",
      "spec": "Integer#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#** fixnum raises a TypeError when given a non-numeric power",
      "group": "Integer",
      "spec": "Integer#**",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#** fixnum raises a ZeroDivisionError for 0 ** -1",
      "group": "Integer",
      "spec": "Integer#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#** fixnum raises negative numbers to the given power",
      "group": "Integer",
      "spec": "Integer#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#** fixnum returns Float when power is Float",
      "group": "Integer",
      "spec": "Integer#**",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#** fixnum returns Float::INFINITY for 0 ** -1.0",
      "group": "Integer",
      "spec": "Integer#**",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#** fixnum returns Float::INFINITY when the number is too big",
      "group": "Integer",
      "spec": "Integer#**",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#** fixnum returns Rational when power is Rational",
      "group": "Integer",
      "spec": "Integer#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#** fixnum returns a complex number when negative and raised to a fractional power",
      "group": "Integer",
      "spec": "Integer#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#** fixnum returns self raised to the given power",
      "group": "Integer",
      "spec": "Integer#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#+ bignum raises a TypeError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#+ bignum returns self plus the given Integer",
      "group": "Integer",
      "spec": "Integer#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#+ does not rescue exception raised in other#coerce",
      "group": "Integer",
      "spec": "Integer#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#+ fixnum raises a TypeError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#+ fixnum returns self plus the given Integer",
      "group": "Integer",
      "spec": "Integer#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#- bignum raises a TypeError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#- bignum returns self minus the given Integer",
      "group": "Integer",
      "spec": "Integer#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#- does not rescue exception raised in other#coerce",
      "group": "Integer",
      "spec": "Integer#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#- fixnum raises a TypeError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#-",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#- fixnum returns self minus the given Integer",
      "group": "Integer",
      "spec": "Integer#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#-@ bignum returns self as a negative value",
      "group": "Integer",
      "spec": "Integer#-@",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#-@ fixnum negates self at Fixnum/Bignum boundaries",
      "group": "Integer",
      "spec": "Integer#-@",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#-@ fixnum returns self as a negative value",
      "group": "Integer",
      "spec": "Integer#-@",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#/ bignum does NOT raise ZeroDivisionError if other is zero and is a Float",
      "group": "Integer",
      "spec": "Integer#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#/ bignum raises a TypeError when given a non-numeric",
      "group": "Integer",
      "spec": "Integer#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#/ bignum raises a ZeroDivisionError if other is zero and not a Float",
      "group": "Integer",
      "spec": "Integer#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#/ bignum returns result the same class as the argument",
      "group": "Integer",
      "spec": "Integer#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#/ bignum returns self divided by Float",
      "group": "Integer",
      "spec": "Integer#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#/ bignum returns self divided by other",
      "group": "Integer",
      "spec": "Integer#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#/ does not rescue exception raised in other#coerce",
      "group": "Integer",
      "spec": "Integer#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#/ fixnum coerces fixnum and return self divided by other",
      "group": "Integer",
      "spec": "Integer#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#/ fixnum does NOT raise ZeroDivisionError if the given argument is zero and is a Float",
      "group": "Integer",
      "spec": "Integer#/",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#/ fixnum raises a TypeError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#/",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#/ fixnum raises a ZeroDivisionError if the given argument is zero and not a Float",
      "group": "Integer",
      "spec": "Integer#/",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#/ fixnum returns result the same class as the argument",
      "group": "Integer",
      "spec": "Integer#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#/ fixnum returns self divided by the given argument",
      "group": "Integer",
      "spec": "Integer#/",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#/ fixnum supports dividing negative numbers",
      "group": "Integer",
      "spec": "Integer#/",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#< bignum raises an ArgumentError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#< bignum returns true if self is less than the given argument",
      "group": "Integer",
      "spec": "Integer#<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#< does not rescue exception raised in other#coerce",
      "group": "Integer",
      "spec": "Integer#<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#< fixnum raises an ArgumentError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#< fixnum returns true if self is less than the given argument",
      "group": "Integer",
      "spec": "Integer#<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) bignum calls #to_int to convert the argument to an Integer",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) bignum raises a TypeError when #to_int does not return an Integer",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) bignum raises a TypeError when passed a String",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) bignum raises a TypeError when passed nil",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) bignum returns 0 when m < 0 and m == p where 2**p > n >= 2**(p-1)",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) bignum returns 0 when m < 0 and m is a Bignum",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) bignum returns a Fixnum == fixnum_max when (fixnum_max * 2) << -1 and n > 0",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) bignum returns a Fixnum == fixnum_min when (fixnum_min * 2) << -1 and n < 0",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) bignum returns n shifted left m bits when n < 0, m > 0",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) bignum returns n shifted left m bits when n > 0, m > 0",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) bignum returns n shifted right m bits when n < 0, m < 0",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) bignum returns n shifted right m bits when n > 0, m < 0",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) bignum returns n when n < 0, m == 0",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) bignum returns n when n > 0, m == 0",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) fixnum calls #to_int to convert the argument to an Integer",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) fixnum raises a TypeError when #to_int does not return an Integer",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) fixnum raises a TypeError when passed a String",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) fixnum raises a TypeError when passed nil",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) fixnum returns -1 when n < 0, m < 0 and n > -(2**-m)",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) fixnum returns 0 when m < 0 and m is a Bignum",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) fixnum returns 0 when n == 0",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) fixnum returns 0 when n > 0, m < 0 and n < 2**-m",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) fixnum returns an Bignum == fixnum_max * 2 when fixnum_max << 1 and n > 0",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) fixnum returns an Bignum == fixnum_min * 2 when fixnum_min << 1 and n < 0",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) fixnum returns n shifted left m bits when n < 0, m > 0",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) fixnum returns n shifted left m bits when n > 0, m > 0",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) fixnum returns n shifted right m bits when n < 0, m < 0",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) fixnum returns n shifted right m bits when n > 0, m < 0",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) fixnum returns n when n < 0, m == 0",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#<< (with n << m) fixnum returns n when n > 0, m == 0",
      "group": "Integer",
      "spec": "Integer#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#<= bignum raises an ArgumentError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#<=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<= bignum returns false if compares with near float",
      "group": "Integer",
      "spec": "Integer#<=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<= bignum returns true if self is less than or equal to other",
      "group": "Integer",
      "spec": "Integer#<=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<= does not rescue exception raised in other#coerce",
      "group": "Integer",
      "spec": "Integer#<=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<= fixnum raises an ArgumentError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#<=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#<= fixnum returns true if self is less than or equal to other",
      "group": "Integer",
      "spec": "Integer#<=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum returns -1 when self is -Infinity and other is negative",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum returns -1 when self is negative and other is Infinty",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum returns 1 when self is Infinity and other is a Bignum",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum returns 1 when self is negative and other is -Infinity",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with a Bignum when other is negative returns -1 when self is negative and other is larger",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with a Bignum when other is negative returns 0 when other is equal",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with a Bignum when other is negative returns 1 when self is negative and other is smaller",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with a Bignum when other is negative returns 1 when self is positive",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with a Bignum when other is positive returns -1 when self is negative",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with a Bignum when other is positive returns -1 when self is positive and other is larger",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with a Bignum when other is positive returns 0 when other is equal",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with a Bignum when other is positive returns 1 when other is smaller",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with a Fixnum returns -1 when other is larger",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with a Fixnum returns 1 when other is smaller",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with a Float when other is negative returns -1 when self is negative and other is larger",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with a Float when other is negative returns 0 when other is equal",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with a Float when other is negative returns 1 when self is negative and other is smaller",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with a Float when other is negative returns 1 when self is positive",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with a Float when other is positive returns -1 when self is negative",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with a Float when other is positive returns -1 when self is positive and other is larger",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with a Float when other is positive returns 0 when other is equal",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with a Float when other is positive returns 1 when other is smaller",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with an Object calls #coerce on other",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with an Object lets the exception go through if #coerce raises an exception",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with an Object raises an exception if #coerce raises a non-StandardError exception",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with an Object returns -1 if the coerced value is larger",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with an Object returns 0 if the coerced value is equal",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with an Object returns 1 if the coerced value is smaller",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> bignum with an Object returns nil if #coerce does not return an Array",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> fixnum returns -1 when self is less than the given argument",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> fixnum returns 0 when self is equal to the given argument",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> fixnum returns 1 when self is greater than the given argument",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#<=> fixnum returns nil when the given argument is not an Integer",
      "group": "Integer",
      "spec": "Integer#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#== bignum calls 'other == self' if the given argument is not an Integer",
      "group": "Integer",
      "spec": "Integer#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#== bignum returns the result of 'other == self' as a boolean",
      "group": "Integer",
      "spec": "Integer#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#== bignum returns true if self has the same value as the given argument",
      "group": "Integer",
      "spec": "Integer#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#== fixnum calls 'other == self' if the given argument is not a Integer",
      "group": "Integer",
      "spec": "Integer#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#== fixnum returns true if self has the same value as other",
      "group": "Integer",
      "spec": "Integer#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#=== bignum calls 'other == self' if the given argument is not an Integer",
      "group": "Integer",
      "spec": "Integer#===",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#=== bignum returns the result of 'other == self' as a boolean",
      "group": "Integer",
      "spec": "Integer#===",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#=== bignum returns true if self has the same value as the given argument",
      "group": "Integer",
      "spec": "Integer#===",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#=== fixnum calls 'other == self' if the given argument is not a Integer",
      "group": "Integer",
      "spec": "Integer#===",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#=== fixnum returns true if self has the same value as other",
      "group": "Integer",
      "spec": "Integer#===",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#> bignum raises an ArgumentError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#> bignum returns true if self is greater than the given argument",
      "group": "Integer",
      "spec": "Integer#>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#> does not rescue exception raised in other#coerce",
      "group": "Integer",
      "spec": "Integer#>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#> fixnum raises an ArgumentError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#> fixnum returns true if self is greater than the given argument",
      "group": "Integer",
      "spec": "Integer#>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>= bignum raises an ArgumentError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#>=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>= bignum returns true if self is greater than or equal to other",
      "group": "Integer",
      "spec": "Integer#>=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>= does not rescue exception raised in other#coerce",
      "group": "Integer",
      "spec": "Integer#>=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>= fixnum raises an ArgumentError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#>=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#>= fixnum returns true if self is greater than or equal to the given argument",
      "group": "Integer",
      "spec": "Integer#>=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) bignum calls #to_int to convert the argument to an Integer",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) bignum raises a TypeError when #to_int does not return an Integer",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) bignum raises a TypeError when passed a String",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) bignum raises a TypeError when passed nil",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) bignum respects twos complement signed shifting",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) bignum respects twos complement signed shifting for very large values",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) bignum returns 0 when m > 0 and m == p where 2**p > n >= 2**(p-1)",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) bignum returns 0 when m is a Bignum",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) bignum returns a Fixnum == fixnum_max when (fixnum_max * 2) >> 1 and n > 0",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) bignum returns a Fixnum == fixnum_min when (fixnum_min * 2) >> 1 and n < 0",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) bignum returns n shifted left m bits when  n < 0, m < 0",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) bignum returns n shifted left m bits when  n > 0, m < 0",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) bignum returns n shifted right m bits when n < 0, m > 0",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) bignum returns n shifted right m bits when n > 0, m > 0",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) bignum returns n when n < 0, m == 0",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) bignum returns n when n > 0, m == 0",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) fixnum calls #to_int to convert the argument to an Integer",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) fixnum raises a TypeError when #to_int does not return an Integer",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) fixnum raises a TypeError when passed a String",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) fixnum raises a TypeError when passed nil",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) fixnum returns -1 when n < 0, m > 0 and n > -(2**m)",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) fixnum returns 0 when m is a bignum",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) fixnum returns 0 when n == 0",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) fixnum returns 0 when n > 0, m > 0 and n < 2**m",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) fixnum returns an Bignum == fixnum_max * 2 when fixnum_max >> -1 and n > 0",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) fixnum returns an Bignum == fixnum_min * 2 when fixnum_min >> -1 and n < 0",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) fixnum returns n shifted left m bits when n < 0, m < 0",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) fixnum returns n shifted left m bits when n > 0, m < 0",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) fixnum returns n shifted right m bits when n < 0, m > 0",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) fixnum returns n shifted right m bits when n > 0, m > 0",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) fixnum returns n when n < 0, m == 0",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#>> (with n >> m) fixnum returns n when n > 0, m == 0",
      "group": "Integer",
      "spec": "Integer#>>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#[] bignum raises a TypeError when the given argument can't be converted to Integer",
      "group": "Integer",
      "spec": "Integer#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#[] bignum returns the nth bit in the binary representation of self",
      "group": "Integer",
      "spec": "Integer#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#[] bignum tries to convert the given argument to an Integer using #to_int",
      "group": "Integer",
      "spec": "Integer#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#[] fixnum accepts a Float argument and returns 0 if the bit at the truncated value is not set",
      "group": "Integer",
      "spec": "Integer#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#[] fixnum accepts a Float argument and returns 1 if the bit at the truncated value is set",
      "group": "Integer",
      "spec": "Integer#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#[] fixnum behaves like (n >> b) & 1",
      "group": "Integer",
      "spec": "Integer#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#[] fixnum calls #to_int to coerce a String to a Bignum and returns 0",
      "group": "Integer",
      "spec": "Integer#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#[] fixnum calls #to_int to convert the argument to an Integer and returns 0 if the nth bit is set",
      "group": "Integer",
      "spec": "Integer#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#[] fixnum calls #to_int to convert the argument to an Integer and returns 1 if the nth bit is set",
      "group": "Integer",
      "spec": "Integer#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#[] fixnum raises a TypeError when #to_int does not return an Integer",
      "group": "Integer",
      "spec": "Integer#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#[] fixnum raises a TypeError when passed a String",
      "group": "Integer",
      "spec": "Integer#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#[] fixnum returns 0 if the nth bit is greater than the most significant bit",
      "group": "Integer",
      "spec": "Integer#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#[] fixnum returns 0 if the nth bit is not set",
      "group": "Integer",
      "spec": "Integer#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#[] fixnum returns 0 if the nth bit is not set (in two's-complement representation)",
      "group": "Integer",
      "spec": "Integer#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#[] fixnum returns 0 when passed a Float in the range of a Bignum",
      "group": "Integer",
      "spec": "Integer#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#[] fixnum returns 0 when passed a negative argument",
      "group": "Integer",
      "spec": "Integer#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#[] fixnum returns 1 if self is negative and the nth bit is greater than the most significant bit",
      "group": "Integer",
      "spec": "Integer#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#[] fixnum returns 1 if the nth bit is set",
      "group": "Integer",
      "spec": "Integer#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#[] fixnum returns 1 if the nth bit is set (in two's-complement representation)",
      "group": "Integer",
      "spec": "Integer#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#^ bignum raises a TypeError and does not call #to_int when defined on an object",
      "group": "Integer",
      "spec": "Integer#^",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#^ bignum raises a TypeError when passed a Float",
      "group": "Integer",
      "spec": "Integer#^",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#^ bignum returns self bitwise EXCLUSIVE OR other",
      "group": "Integer",
      "spec": "Integer#^",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#^ bignum returns self bitwise EXCLUSIVE OR other when all bits are 1 and other value is negative",
      "group": "Integer",
      "spec": "Integer#^",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#^ bignum returns self bitwise EXCLUSIVE OR other when both operands are negative",
      "group": "Integer",
      "spec": "Integer#^",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#^ bignum returns self bitwise EXCLUSIVE OR other when one operand is negative",
      "group": "Integer",
      "spec": "Integer#^",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#^ fixnum raises a TypeError and does not call #to_int when defined on an object",
      "group": "Integer",
      "spec": "Integer#^",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#^ fixnum raises a TypeError when passed a Float",
      "group": "Integer",
      "spec": "Integer#^",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#^ fixnum returns self bitwise EXCLUSIVE OR a bignum",
      "group": "Integer",
      "spec": "Integer#^",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#^ fixnum returns self bitwise EXCLUSIVE OR other",
      "group": "Integer",
      "spec": "Integer#^",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#abs bignum returns the absolute bignum value",
      "group": "Integer",
      "spec": "Integer#abs",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#abs fixnum returns self's absolute fixnum value",
      "group": "Integer",
      "spec": "Integer#abs",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#allbits? coerces the rhs using to_int",
      "group": "Integer",
      "spec": "Integer#allbits?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#allbits? handles negative values using two's complement notation",
      "group": "Integer",
      "spec": "Integer#allbits?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#allbits? raises a TypeError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#allbits?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#allbits? returns true iff all the bits of the argument are set in the receiver",
      "group": "Integer",
      "spec": "Integer#allbits?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#anybits? coerces the rhs using to_int",
      "group": "Integer",
      "spec": "Integer#anybits?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#anybits? handles negative values using two's complement notation",
      "group": "Integer",
      "spec": "Integer#anybits?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#anybits? raises a TypeError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#anybits?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#anybits? returns true iff all the bits of the argument are set in the receiver",
      "group": "Integer",
      "spec": "Integer#anybits?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#bit_length bignum returns the position of the leftmost 0 bit of a negative number",
      "group": "Integer",
      "spec": "Integer#bit_length",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#bit_length bignum returns the position of the leftmost bit of a positive number",
      "group": "Integer",
      "spec": "Integer#bit_length",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#bit_length fixnum returns the position of the leftmost 0 bit of a negative number",
      "group": "Integer",
      "spec": "Integer#bit_length",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#bit_length fixnum returns the position of the leftmost bit of a positive number",
      "group": "Integer",
      "spec": "Integer#bit_length",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#ceil precision argument specified as part of the ceil method is negative returns the smallest integer greater than self with at least precision.abs trailing zeros",
      "group": "Integer",
      "spec": "Integer#ceil",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#ceil returns itself if passed a positive precision",
      "group": "Integer",
      "spec": "Integer#ceil",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#ceil returns self",
      "group": "Integer",
      "spec": "Integer#ceil",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#ceil returns self if not passed a precision",
      "group": "Integer",
      "spec": "Integer#ceil",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#ceil returns self if passed a precision of zero",
      "group": "Integer",
      "spec": "Integer#ceil",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr with an encoding argument accepts a String as an argument",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr with an encoding argument converts a String to an Encoding as Encoding.find does",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr with an encoding argument raises RangeError if self is invalid as a codepoint in the specified encoding",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr with an encoding argument raises a RangeError if self is too large",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr with an encoding argument raises a RangeError is self is less than 0",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr with an encoding argument returns a String",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr with an encoding argument returns a String encoding self interpreted as a codepoint in the specified encoding",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr with an encoding argument returns a String with the specified encoding",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr with an encoding argument returns a new String for each call",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr without argument raises a RangeError is self is less than 0",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr without argument returns a String",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr without argument returns a new String for each call",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr without argument when Encoding.default_internal is nil and self is between 0 and 127 (inclusive) returns a String encoding self interpreted as a US-ASCII codepoint",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr without argument when Encoding.default_internal is nil and self is between 0 and 127 (inclusive) returns a US-ASCII String",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr without argument when Encoding.default_internal is nil and self is between 128 and 255 (inclusive) returns a String containing self interpreted as a byte",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr without argument when Encoding.default_internal is nil and self is between 128 and 255 (inclusive) returns a binary String",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr without argument when Encoding.default_internal is nil raises a RangeError is self is greater than 255",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr without argument when Encoding.default_internal is not nil and self is between 0 and 127 (inclusive) returns a String encoding self interpreted as a US-ASCII codepoint",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr without argument when Encoding.default_internal is not nil and self is between 0 and 127 (inclusive) returns a US-ASCII String",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr without argument when Encoding.default_internal is not nil and self is between 128 and 255 (inclusive) returns a String containing self interpreted as a byte",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr without argument when Encoding.default_internal is not nil and self is between 128 and 255 (inclusive) returns a binary String",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr without argument when Encoding.default_internal is not nil and self is greater than 255 raises RangeError if self is invalid as a codepoint in the default internal encoding",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr without argument when Encoding.default_internal is not nil and self is greater than 255 returns a String encoding self interpreted as a codepoint in the default internal encoding",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#chr without argument when Encoding.default_internal is not nil and self is greater than 255 returns a String with the default internal encoding",
      "group": "Integer",
      "spec": "Integer#chr",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#denominator returns 1",
      "group": "Integer",
      "spec": "Integer#denominator",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#digits converts the radix with #to_int",
      "group": "Integer",
      "spec": "Integer#digits",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#digits raises ArgumentError when calling with a negative radix",
      "group": "Integer",
      "spec": "Integer#digits",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#digits raises ArgumentError when calling with a radix less than 2",
      "group": "Integer",
      "spec": "Integer#digits",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#digits raises Math::DomainError when calling digits on a negative number",
      "group": "Integer",
      "spec": "Integer#digits",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#digits returns [0] when called on 0, regardless of base",
      "group": "Integer",
      "spec": "Integer#digits",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#digits returns an array of place values in base-10 by default",
      "group": "Integer",
      "spec": "Integer#digits",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#digits returns digits by place value of a given radix",
      "group": "Integer",
      "spec": "Integer#digits",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#div bignum calls #coerce and #div if argument responds to #coerce",
      "group": "Integer",
      "spec": "Integer#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#div bignum handles fixnum_min / -1",
      "group": "Integer",
      "spec": "Integer#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#div bignum looses precision if passed Float argument",
      "group": "Integer",
      "spec": "Integer#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#div bignum means (x / y).floor",
      "group": "Integer",
      "spec": "Integer#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#div bignum raises ZeroDivisionError if the argument is 0 and is a Float",
      "group": "Integer",
      "spec": "Integer#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#div bignum raises ZeroDivisionError if the argument is 0 and is not a Float",
      "group": "Integer",
      "spec": "Integer#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#div bignum raises a TypeError when given a non-numeric",
      "group": "Integer",
      "spec": "Integer#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#div bignum returns a result of integer division of self by a float argument",
      "group": "Integer",
      "spec": "Integer#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#div bignum returns self divided by other",
      "group": "Integer",
      "spec": "Integer#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#div fixnum calls #coerce and #div if argument responds to #coerce",
      "group": "Integer",
      "spec": "Integer#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#div fixnum coerces self and the given argument to Floats and returns self divided by other as Fixnum",
      "group": "Integer",
      "spec": "Integer#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#div fixnum means (x / y).floor",
      "group": "Integer",
      "spec": "Integer#div",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#div fixnum raises a TypeError when given a non-numeric argument",
      "group": "Integer",
      "spec": "Integer#div",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#div fixnum raises a ZeroDivisionError when the given argument is 0 and a Float",
      "group": "Integer",
      "spec": "Integer#div",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#div fixnum raises a ZeroDivisionError when the given argument is 0 and not a Float",
      "group": "Integer",
      "spec": "Integer#div",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#div fixnum returns self divided by the given argument as an Integer",
      "group": "Integer",
      "spec": "Integer#div",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#div fixnum rounds towards -inf",
      "group": "Integer",
      "spec": "Integer#div",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#divmod bignum raises a FloatDomainError if other is NaN",
      "group": "Integer",
      "spec": "Integer#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#divmod bignum raises a TypeError when the given argument is not an Integer",
      "group": "Integer",
      "spec": "Integer#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#divmod bignum raises a ZeroDivisionError when the given argument is 0",
      "group": "Integer",
      "spec": "Integer#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#divmod bignum raises a ZeroDivisionError when the given argument is 0 and a Float",
      "group": "Integer",
      "spec": "Integer#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#divmod bignum returns an Array containing quotient and modulus obtained from dividing self by the given argument",
      "group": "Integer",
      "spec": "Integer#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#divmod bignum with q = floor(x/y), a = q*b + r, returns [q,r] when a < 0, b < 0 and |a| < |b|",
      "group": "Integer",
      "spec": "Integer#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#divmod bignum with q = floor(x/y), a = q*b + r, returns [q,r] when a < 0, b > 0 and |a| < b",
      "group": "Integer",
      "spec": "Integer#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#divmod bignum with q = floor(x/y), a = q*b + r, returns [q,r] when a > 0, b < 0 and a < |b|",
      "group": "Integer",
      "spec": "Integer#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#divmod bignum with q = floor(x/y), a = q*b + r, returns [q,r] when a > 0, b < 0 and a > |b|",
      "group": "Integer",
      "spec": "Integer#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#divmod fixnum raises a TypeError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#divmod",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#divmod fixnum raises a ZeroDivisionError when the given argument is 0",
      "group": "Integer",
      "spec": "Integer#divmod",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#divmod fixnum raises a ZeroDivisionError when the given argument is 0 and a Float",
      "group": "Integer",
      "spec": "Integer#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#divmod fixnum returns an Array containing quotient and modulus obtained from dividing self by the given argument",
      "group": "Integer",
      "spec": "Integer#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#downto [stop] when self and stop are Fixnums does not yield when stop is greater than self",
      "group": "Integer",
      "spec": "Integer#downto",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#downto [stop] when self and stop are Fixnums raises an ArgumentError for invalid endpoints",
      "group": "Integer",
      "spec": "Integer#downto",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#downto [stop] when self and stop are Fixnums when no block is given returned Enumerator size raises an ArgumentError for invalid endpoints",
      "group": "Integer",
      "spec": "Integer#downto",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#downto [stop] when self and stop are Fixnums when no block is given returned Enumerator size returns 0 when stop > self",
      "group": "Integer",
      "spec": "Integer#downto",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#downto [stop] when self and stop are Fixnums when no block is given returned Enumerator size returns self - stop + 1",
      "group": "Integer",
      "spec": "Integer#downto",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#downto [stop] when self and stop are Fixnums when no block is given returns an Enumerator",
      "group": "Integer",
      "spec": "Integer#downto",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#downto [stop] when self and stop are Fixnums yields once when stop equals self",
      "group": "Integer",
      "spec": "Integer#downto",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#downto [stop] when self and stop are Fixnums yields while decreasing self until it is less than stop",
      "group": "Integer",
      "spec": "Integer#downto",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#downto [stop] when self and stop are Fixnums yields while decreasing self until it less than ceil for a Float endpoint",
      "group": "Integer",
      "spec": "Integer#downto",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#dup returns self for large integers",
      "group": "Integer",
      "spec": "Integer#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#dup returns self for small integers",
      "group": "Integer",
      "spec": "Integer#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#even? bignum returns false if self is odd and negative",
      "group": "Integer",
      "spec": "Integer#even?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#even? bignum returns false if self is odd and positive",
      "group": "Integer",
      "spec": "Integer#even?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#even? bignum returns true if self is even and negative",
      "group": "Integer",
      "spec": "Integer#even?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#even? bignum returns true if self is even and positive",
      "group": "Integer",
      "spec": "Integer#even?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#even? fixnum returns true for a Bignum when it is an even number",
      "group": "Integer",
      "spec": "Integer#even?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#even? fixnum returns true for a Fixnum when it is an even number",
      "group": "Integer",
      "spec": "Integer#even?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#fdiv follows the coercion protocol",
      "group": "Integer",
      "spec": "Integer#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#fdiv performs floating-point division between self and a Float",
      "group": "Integer",
      "spec": "Integer#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#fdiv performs floating-point division between self and a bignum",
      "group": "Integer",
      "spec": "Integer#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#fdiv performs floating-point division between self and a fixnum",
      "group": "Integer",
      "spec": "Integer#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#fdiv raises a TypeError when argument isn't numeric",
      "group": "Integer",
      "spec": "Integer#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#fdiv raises an ArgumentError when passed multiple arguments",
      "group": "Integer",
      "spec": "Integer#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#fdiv returns -Infinity when the argument is 0 and self is negative",
      "group": "Integer",
      "spec": "Integer#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#fdiv returns -Infinity when the argument is 0.0 and self is negative",
      "group": "Integer",
      "spec": "Integer#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#fdiv returns Infinity when the argument is 0",
      "group": "Integer",
      "spec": "Integer#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#fdiv returns Infinity when the argument is 0.0",
      "group": "Integer",
      "spec": "Integer#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#fdiv returns NaN when the argument is NaN",
      "group": "Integer",
      "spec": "Integer#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#floor precision argument specified as part of the floor method is negative returns the largest integer less than self with at least precision.abs trailing zeros",
      "group": "Integer",
      "spec": "Integer#floor",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#floor returns itself if passed a positive precision",
      "group": "Integer",
      "spec": "Integer#floor",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#floor returns self",
      "group": "Integer",
      "spec": "Integer#floor",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#floor returns self if not passed a precision",
      "group": "Integer",
      "spec": "Integer#floor",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#floor returns self if passed a precision of zero",
      "group": "Integer",
      "spec": "Integer#floor",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcd accepts a Bignum argument",
      "group": "Integer",
      "spec": "Integer#gcd",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcd doesn't cause an integer overflow",
      "group": "Integer",
      "spec": "Integer#gcd",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcd raises a TypeError unless the argument is an Integer",
      "group": "Integer",
      "spec": "Integer#gcd",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcd raises an ArgumentError if given more than one argument",
      "group": "Integer",
      "spec": "Integer#gcd",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcd raises an ArgumentError if not given an argument",
      "group": "Integer",
      "spec": "Integer#gcd",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcd returns a positive integer even if both self and argument are negative",
      "group": "Integer",
      "spec": "Integer#gcd",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcd returns a positive integer even if self is negative",
      "group": "Integer",
      "spec": "Integer#gcd",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcd returns a positive integer even if the argument is negative",
      "group": "Integer",
      "spec": "Integer#gcd",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcd returns an Integer",
      "group": "Integer",
      "spec": "Integer#gcd",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcd returns self if equal to the argument",
      "group": "Integer",
      "spec": "Integer#gcd",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcd returns the greatest common divisor of self and argument",
      "group": "Integer",
      "spec": "Integer#gcd",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcd works if self is a Bignum",
      "group": "Integer",
      "spec": "Integer#gcd",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcdlcm accepts a Bignum argument",
      "group": "Integer",
      "spec": "Integer#gcdlcm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcdlcm raises a TypeError unless the argument is an Integer",
      "group": "Integer",
      "spec": "Integer#gcdlcm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcdlcm raises an ArgumentError if given more than one argument",
      "group": "Integer",
      "spec": "Integer#gcdlcm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcdlcm raises an ArgumentError if not given an argument",
      "group": "Integer",
      "spec": "Integer#gcdlcm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcdlcm returns [self, self] if self is equal to the argument",
      "group": "Integer",
      "spec": "Integer#gcdlcm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcdlcm returns a two-element Array",
      "group": "Integer",
      "spec": "Integer#gcdlcm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcdlcm returns an Array",
      "group": "Integer",
      "spec": "Integer#gcdlcm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcdlcm returns the greatest common divisor of self and argument as the first element",
      "group": "Integer",
      "spec": "Integer#gcdlcm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcdlcm returns the least common multiple of self and argument as the last element",
      "group": "Integer",
      "spec": "Integer#gcdlcm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#gcdlcm works if self is a Bignum",
      "group": "Integer",
      "spec": "Integer#gcdlcm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#integer? returns true for Integers",
      "group": "Integer",
      "spec": "Integer#integer?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#lcm accepts a Bignum argument",
      "group": "Integer",
      "spec": "Integer#lcm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#lcm raises a TypeError unless the argument is an Integer",
      "group": "Integer",
      "spec": "Integer#lcm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#lcm raises an ArgumentError if given more than one argument",
      "group": "Integer",
      "spec": "Integer#lcm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#lcm raises an ArgumentError if not given an argument",
      "group": "Integer",
      "spec": "Integer#lcm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#lcm returns a positive integer even if both self and argument are negative",
      "group": "Integer",
      "spec": "Integer#lcm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#lcm returns a positive integer even if self is negative",
      "group": "Integer",
      "spec": "Integer#lcm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#lcm returns a positive integer even if the argument is negative",
      "group": "Integer",
      "spec": "Integer#lcm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#lcm returns an Integer",
      "group": "Integer",
      "spec": "Integer#lcm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#lcm returns self if equal to the argument",
      "group": "Integer",
      "spec": "Integer#lcm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#lcm returns the least common multiple of self and argument",
      "group": "Integer",
      "spec": "Integer#lcm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#lcm works if self is a Bignum",
      "group": "Integer",
      "spec": "Integer#lcm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#magnitude bignum returns the absolute bignum value",
      "group": "Integer",
      "spec": "Integer#magnitude",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#magnitude fixnum returns self's absolute fixnum value",
      "group": "Integer",
      "spec": "Integer#magnitude",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#modulo bignum raises a TypeError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#modulo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#modulo bignum raises a ZeroDivisionError when the given argument is 0",
      "group": "Integer",
      "spec": "Integer#modulo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#modulo bignum raises a ZeroDivisionError when the given argument is 0 and a Float",
      "group": "Integer",
      "spec": "Integer#modulo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#modulo bignum returns the modulus obtained from dividing self by the given argument",
      "group": "Integer",
      "spec": "Integer#modulo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#modulo fixnum raises a TypeError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#modulo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#modulo fixnum raises a ZeroDivisionError when the given argument is 0",
      "group": "Integer",
      "spec": "Integer#modulo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#modulo fixnum raises a ZeroDivisionError when the given argument is 0 and a Float",
      "group": "Integer",
      "spec": "Integer#modulo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#modulo fixnum returns the modulus obtained from dividing self by the given argument",
      "group": "Integer",
      "spec": "Integer#modulo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#next overflows a Fixnum to a Bignum",
      "group": "Integer",
      "spec": "Integer#next",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#next returns the next larger negative Bignum",
      "group": "Integer",
      "spec": "Integer#next",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#next returns the next larger negative Fixnum",
      "group": "Integer",
      "spec": "Integer#next",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#next returns the next larger positive Bignum",
      "group": "Integer",
      "spec": "Integer#next",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#next returns the next larger positive Fixnum",
      "group": "Integer",
      "spec": "Integer#next",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#next underflows a Bignum to a Fixnum",
      "group": "Integer",
      "spec": "Integer#next",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#nobits? coerces the rhs using to_int",
      "group": "Integer",
      "spec": "Integer#nobits?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#nobits? handles negative values using two's complement notation",
      "group": "Integer",
      "spec": "Integer#nobits?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#nobits? raises a TypeError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#nobits?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#nobits? returns true iff all no bits of the argument are set in the receiver",
      "group": "Integer",
      "spec": "Integer#nobits?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#numerator returns self",
      "group": "Integer",
      "spec": "Integer#numerator",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#odd? bignum returns false if self is even and negative",
      "group": "Integer",
      "spec": "Integer#odd?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#odd? bignum returns false if self is even and positive",
      "group": "Integer",
      "spec": "Integer#odd?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#odd? bignum returns true if self is odd and negative",
      "group": "Integer",
      "spec": "Integer#odd?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#odd? bignum returns true if self is odd and positive",
      "group": "Integer",
      "spec": "Integer#odd?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#odd? fixnum returns true when self is an odd number",
      "group": "Integer",
      "spec": "Integer#odd?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#ord returns self",
      "group": "Integer",
      "spec": "Integer#ord",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow one argument is passed bignum raises a TypeError when given a non-Integer",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow one argument is passed bignum returns a complex number when negative and raised to a fractional power",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow one argument is passed bignum returns self raised to other power",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow one argument is passed bignum switch to a Float when the values is too big",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow one argument is passed fixnum can raise -1 to a bignum safely",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow one argument is passed fixnum can raise 1 to a bignum safely",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow one argument is passed fixnum coerces power and calls #**",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow one argument is passed fixnum overflows the answer to a bignum transparently",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow one argument is passed fixnum raises a TypeError when given a non-numeric power",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow one argument is passed fixnum raises a ZeroDivisionError for 0 ** -1",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow one argument is passed fixnum raises negative numbers to the given power",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow one argument is passed fixnum returns Float when power is Float",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow one argument is passed fixnum returns Float::INFINITY for 0 ** -1.0",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow one argument is passed fixnum returns Float::INFINITY when the number is too big",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow one argument is passed fixnum returns Rational when power is Rational",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow one argument is passed fixnum returns a complex number when negative and raised to a fractional power",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow one argument is passed fixnum returns self raised to the given power",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow two arguments are passed ensures all arguments are integers",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow two arguments are passed handles sign like #divmod does",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow two arguments are passed raises TypeError for non-numeric value",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow two arguments are passed raises a ZeroDivisionError when the given argument is 0",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow two arguments are passed returns modulo of self raised to the given power",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pow two arguments are passed works well with bignums",
      "group": "Integer",
      "spec": "Integer#pow",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#pred returns the Integer equal to self - 1",
      "group": "Integer",
      "spec": "Integer#pred",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#rationalize ignores a single argument",
      "group": "Integer",
      "spec": "Integer#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#rationalize raises ArgumentError when passed more than one argument",
      "group": "Integer",
      "spec": "Integer#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#rationalize returns a Rational object",
      "group": "Integer",
      "spec": "Integer#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#rationalize uses 1 as the denominator",
      "group": "Integer",
      "spec": "Integer#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#rationalize uses self as the numerator",
      "group": "Integer",
      "spec": "Integer#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#remainder bignum does raises ZeroDivisionError if other is zero and a Float",
      "group": "Integer",
      "spec": "Integer#remainder",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#remainder bignum raises a ZeroDivisionError if other is zero and not a Float",
      "group": "Integer",
      "spec": "Integer#remainder",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#remainder bignum returns the remainder of dividing self by other",
      "group": "Integer",
      "spec": "Integer#remainder",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#remainder fixnum keeps sign of self",
      "group": "Integer",
      "spec": "Integer#remainder",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#remainder fixnum means x-y*(x/y).truncate",
      "group": "Integer",
      "spec": "Integer#remainder",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#remainder fixnum raises TypeError if passed non-numeric argument",
      "group": "Integer",
      "spec": "Integer#remainder",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#remainder fixnum returns the remainder of dividing self by other",
      "group": "Integer",
      "spec": "Integer#remainder",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#round calls #to_int on the argument to convert it to an Integer",
      "group": "Integer",
      "spec": "Integer#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#round raises ArgumentError for an unknown rounding mode",
      "group": "Integer",
      "spec": "Integer#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#round raises a RangeError when passed Float::INFINITY",
      "group": "Integer",
      "spec": "Integer#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#round raises a RangeError when passed a beyond signed int",
      "group": "Integer",
      "spec": "Integer#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#round raises a RangeError when passed a big negative value",
      "group": "Integer",
      "spec": "Integer#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#round raises a TypeError when #to_int does not return an Integer",
      "group": "Integer",
      "spec": "Integer#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#round raises a TypeError when its argument cannot be converted to an Integer",
      "group": "Integer",
      "spec": "Integer#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#round raises a TypeError when passed a String",
      "group": "Integer",
      "spec": "Integer#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#round returns different rounded values depending on the half option",
      "group": "Integer",
      "spec": "Integer#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#round returns itself if passed a positive precision",
      "group": "Integer",
      "spec": "Integer#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#round returns itself if passed a positive precision and the half option",
      "group": "Integer",
      "spec": "Integer#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#round returns itself rounded if passed a negative value",
      "group": "Integer",
      "spec": "Integer#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#round returns itself rounded to nearest if passed a negative value",
      "group": "Integer",
      "spec": "Integer#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#round returns self",
      "group": "Integer",
      "spec": "Integer#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#round returns self if not passed a precision",
      "group": "Integer",
      "spec": "Integer#round",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#round returns self if passed a precision of zero",
      "group": "Integer",
      "spec": "Integer#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#size bignum returns the number of bytes required to hold the unsigned bignum data",
      "group": "Integer",
      "spec": "Integer#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#size returns the number of bytes in the machine representation of self",
      "group": "Integer",
      "spec": "Integer#size",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#succ overflows a Fixnum to a Bignum",
      "group": "Integer",
      "spec": "Integer#succ",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#succ returns the next larger negative Bignum",
      "group": "Integer",
      "spec": "Integer#succ",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#succ returns the next larger negative Fixnum",
      "group": "Integer",
      "spec": "Integer#succ",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#succ returns the next larger positive Bignum",
      "group": "Integer",
      "spec": "Integer#succ",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#succ returns the next larger positive Fixnum",
      "group": "Integer",
      "spec": "Integer#succ",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#succ underflows a Bignum to a Fixnum",
      "group": "Integer",
      "spec": "Integer#succ",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#times executes a nested #times",
      "group": "Integer",
      "spec": "Integer#times",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#times executes a nested while loop containing a break expression",
      "group": "Integer",
      "spec": "Integer#times",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#times returns an Enumerator",
      "group": "Integer",
      "spec": "Integer#times",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#times returns self",
      "group": "Integer",
      "spec": "Integer#times",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#times skips all iterations when encountering 'break'",
      "group": "Integer",
      "spec": "Integer#times",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#times skips all iterations when encountering break with an argument and returns that argument",
      "group": "Integer",
      "spec": "Integer#times",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#times skips the current iteration when encountering 'next'",
      "group": "Integer",
      "spec": "Integer#times",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#times when no block is given returned Enumerator size returns self",
      "group": "Integer",
      "spec": "Integer#times",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#times yields each value from 0 to self - 1",
      "group": "Integer",
      "spec": "Integer#times",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#to_f bignum converts number close to Float::MAX without exceeding MAX or producing NaN",
      "group": "Integer",
      "spec": "Integer#to_f",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#to_f bignum returns self converted to a Float",
      "group": "Integer",
      "spec": "Integer#to_f",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#to_f fixnum returns self converted to a Float",
      "group": "Integer",
      "spec": "Integer#to_f",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#to_i returns self",
      "group": "Integer",
      "spec": "Integer#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#to_int returns self",
      "group": "Integer",
      "spec": "Integer#to_int",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#to_r constructs a rational number with 1 as the denominator",
      "group": "Integer",
      "spec": "Integer#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#to_r constructs a rational number with self as the numerator",
      "group": "Integer",
      "spec": "Integer#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#to_r raises an ArgumentError if given any arguments",
      "group": "Integer",
      "spec": "Integer#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#to_r returns a Rational object",
      "group": "Integer",
      "spec": "Integer#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#to_r works even if self is a Bignum",
      "group": "Integer",
      "spec": "Integer#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#to_s bignum returns a String in US-ASCII encoding when Encoding.default_internal is nil",
      "group": "Integer",
      "spec": "Integer#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#to_s bignum returns a String in US-ASCII encoding when Encoding.default_internal is not nil",
      "group": "Integer",
      "spec": "Integer#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#to_s bignum when given a base raises an ArgumentError if the base is less than 2 or higher than 36",
      "group": "Integer",
      "spec": "Integer#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#to_s bignum when given a base returns self converted to a String using the given base",
      "group": "Integer",
      "spec": "Integer#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#to_s bignum when given no base returns self converted to a String using base 10",
      "group": "Integer",
      "spec": "Integer#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#to_s fixnum returns a String in US-ASCII encoding when Encoding.default_internal is nil",
      "group": "Integer",
      "spec": "Integer#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#to_s fixnum returns a String in US-ASCII encoding when Encoding.default_internal is not nil",
      "group": "Integer",
      "spec": "Integer#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#to_s fixnum when given a base raises an ArgumentError if the base is less than 2 or higher than 36",
      "group": "Integer",
      "spec": "Integer#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#to_s fixnum when given a base returns self converted to a String in the given base",
      "group": "Integer",
      "spec": "Integer#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#to_s fixnum when no base given returns self converted to a String using base 10",
      "group": "Integer",
      "spec": "Integer#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#truncate precision argument specified as part of the truncate method is negative returns an integer with at least precision.abs trailing zeros",
      "group": "Integer",
      "spec": "Integer#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#truncate returns itself if passed a positive precision",
      "group": "Integer",
      "spec": "Integer#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#truncate returns self",
      "group": "Integer",
      "spec": "Integer#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#truncate returns self if not passed a precision",
      "group": "Integer",
      "spec": "Integer#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#truncate returns self if passed a precision of zero",
      "group": "Integer",
      "spec": "Integer#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#upto [stop] when self and stop are Fixnums does not yield when stop is less than self",
      "group": "Integer",
      "spec": "Integer#upto",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#upto [stop] when self and stop are Fixnums raises an ArgumentError for non-numeric endpoints",
      "group": "Integer",
      "spec": "Integer#upto",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#upto [stop] when self and stop are Fixnums when no block is given returned Enumerator size raises an ArgumentError for non-numeric endpoints",
      "group": "Integer",
      "spec": "Integer#upto",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#upto [stop] when self and stop are Fixnums when no block is given returned Enumerator size returns 0 when stop < self",
      "group": "Integer",
      "spec": "Integer#upto",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#upto [stop] when self and stop are Fixnums when no block is given returned Enumerator size returns stop - self + 1",
      "group": "Integer",
      "spec": "Integer#upto",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#upto [stop] when self and stop are Fixnums when no block is given returns an Enumerator",
      "group": "Integer",
      "spec": "Integer#upto",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#upto [stop] when self and stop are Fixnums yields once when stop equals self",
      "group": "Integer",
      "spec": "Integer#upto",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#upto [stop] when self and stop are Fixnums yields while increasing self until it is greater than floor of a Float endpoint",
      "group": "Integer",
      "spec": "Integer#upto",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#upto [stop] when self and stop are Fixnums yields while increasing self until it is less than stop",
      "group": "Integer",
      "spec": "Integer#upto",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#| bignum raises a TypeError and does not call #to_int when defined on an object",
      "group": "Integer",
      "spec": "Integer#|",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#| bignum raises a TypeError when passed a Float",
      "group": "Integer",
      "spec": "Integer#|",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#| bignum returns self bitwise OR other",
      "group": "Integer",
      "spec": "Integer#|",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#| bignum returns self bitwise OR other when both operands are negative",
      "group": "Integer",
      "spec": "Integer#|",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#| bignum returns self bitwise OR other when one operand is negative",
      "group": "Integer",
      "spec": "Integer#|",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#| fixnum raises a TypeError and does not call #to_int when defined on an object",
      "group": "Integer",
      "spec": "Integer#|",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer#| fixnum raises a TypeError when passed a Float",
      "group": "Integer",
      "spec": "Integer#|",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#| fixnum returns self bitwise OR a bignum",
      "group": "Integer",
      "spec": "Integer#|",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#| fixnum returns self bitwise OR other",
      "group": "Integer",
      "spec": "Integer#|",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#~ bignum returns self with each bit flipped",
      "group": "Integer",
      "spec": "Integer#~",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer#~ fixnum returns self with each bit flipped",
      "group": "Integer",
      "spec": "Integer#~",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Integer.sqrt accepts any argument that can be coerced to Integer",
      "group": "Integer",
      "spec": "Integer.sqrt",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer.sqrt converts the argument with #to_int",
      "group": "Integer",
      "spec": "Integer.sqrt",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer.sqrt raises a Math::DomainError if the argument is negative",
      "group": "Integer",
      "spec": "Integer.sqrt",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer.sqrt raises a TypeError if the argument cannot be coerced to Integer",
      "group": "Integer",
      "spec": "Integer.sqrt",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer.sqrt returns an integer",
      "group": "Integer",
      "spec": "Integer.sqrt",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Integer.sqrt returns the integer square root of the argument",
      "group": "Integer",
      "spec": "Integer.sqrt",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Interrupt is a subclass of SignalException",
      "group": "Interrupt",
      "spec": "Interrupt",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Interrupt.new returns an instance of interrupt with no message given",
      "group": "Interrupt",
      "spec": "Interrupt.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Interrupt.new takes an optional message argument",
      "group": "Interrupt",
      "spec": "Interrupt.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:KeyError accepts :receiver and :key options",
      "group": "KeyError",
      "spec": "KeyError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:LoadError raised by load or require provides the failing path in its #path attribute",
      "group": "LoadError",
      "spec": "LoadError",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:LoadError#path is nil when constructed directly",
      "group": "LoadError",
      "spec": "LoadError#path",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:LocalJumpError#exit_value needs to be reviewed for spec completeness",
      "group": "LocalJumpError",
      "spec": "LocalJumpError#exit_value",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:LocalJumpError#reason needs to be reviewed for spec completeness",
      "group": "LocalJumpError",
      "spec": "LocalJumpError#reason",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Marshal.dump with Float represents +Infinity",
      "group": "Marshal",
      "spec": "Marshal.dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Marshal.dump with Float represents -Infinity",
      "group": "Marshal",
      "spec": "Marshal.dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Marshal.dump with Float represents NaN",
      "group": "Marshal",
      "spec": "Marshal.dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Marshal.dump with Float represents a Float greater than 1",
      "group": "Marshal",
      "spec": "Marshal.dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Marshal.dump with Float represents a Float less than 1",
      "group": "Marshal",
      "spec": "Marshal.dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Marshal.dump with Float represents a Float much greater than 1",
      "group": "Marshal",
      "spec": "Marshal.dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Marshal.dump with Float represents a Float much greater than 1 with a very small fractional part",
      "group": "Marshal",
      "spec": "Marshal.dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Marshal.dump with Float represents a Float much less than 1",
      "group": "Marshal",
      "spec": "Marshal.dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Marshal.dump with Float represents zero",
      "group": "Marshal",
      "spec": "Marshal.dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Marshal.load with Float loads +Infinity",
      "group": "Marshal",
      "spec": "Marshal.load",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Marshal.load with Float loads -Infinity",
      "group": "Marshal",
      "spec": "Marshal.load",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Marshal.load with Float loads NaN",
      "group": "Marshal",
      "spec": "Marshal.load",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Marshal.load with Float loads a Float greater than 1",
      "group": "Marshal",
      "spec": "Marshal.load",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Marshal.load with Float loads a Float less than 1",
      "group": "Marshal",
      "spec": "Marshal.load",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Marshal.load with Float loads a Float much greater than 1",
      "group": "Marshal",
      "spec": "Marshal.load",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Marshal.load with Float loads a Float much greater than 1 with a very small fractional part",
      "group": "Marshal",
      "spec": "Marshal.load",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Marshal.load with Float loads a Float much less than 1",
      "group": "Marshal",
      "spec": "Marshal.load",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Marshal.load with Float loads zero",
      "group": "Marshal",
      "spec": "Marshal.load",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Marshal::MAJOR_VERSION is 4",
      "group": "Marshal::MAJOR_VERSION",
      "spec": "Marshal::MAJOR_VERSION",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Marshal::MINOR_VERSION is 8",
      "group": "Marshal::MINOR_VERSION",
      "spec": "Marshal::MINOR_VERSION",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:MatchData#== returns false if the argument is not a MatchData object",
      "group": "MatchData",
      "spec": "MatchData#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#== returns false if the operands have different patterns",
      "group": "MatchData",
      "spec": "MatchData#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#== returns false if the operands have different target strings",
      "group": "MatchData",
      "spec": "MatchData#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#== returns true if both operands have equal target strings, patterns, and match positions",
      "group": "MatchData",
      "spec": "MatchData#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#[Symbol] raises an IndexError if there is no named match corresponding to the String",
      "group": "MatchData",
      "spec": "MatchData#[Symbol]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#[Symbol] raises an IndexError if there is no named match corresponding to the Symbol",
      "group": "MatchData",
      "spec": "MatchData#[Symbol]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#[Symbol] returns matches in the String's encoding",
      "group": "MatchData",
      "spec": "MatchData#[Symbol]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:MatchData#[Symbol] returns nil on non-matching named matches",
      "group": "MatchData",
      "spec": "MatchData#[Symbol]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#[Symbol] returns the corresponding named match when given a String",
      "group": "MatchData",
      "spec": "MatchData#[Symbol]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#[Symbol] returns the corresponding named match when given a Symbol",
      "group": "MatchData",
      "spec": "MatchData#[Symbol]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#[Symbol] returns the last match when multiple named matches exist with the same name",
      "group": "MatchData",
      "spec": "MatchData#[Symbol]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#[Symbol] returns the matching version of multiple corresponding named match",
      "group": "MatchData",
      "spec": "MatchData#[Symbol]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#[] acts as normal array indexing [index]",
      "group": "MatchData",
      "spec": "MatchData#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#[] supports accessors [start, length]",
      "group": "MatchData",
      "spec": "MatchData#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#[] supports ranges [start..end]",
      "group": "MatchData",
      "spec": "MatchData#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#begin when passed a String argument return the character offset of the start of the named capture",
      "group": "MatchData",
      "spec": "MatchData#begin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#begin when passed a String argument returns the character offset for multi byte strings",
      "group": "MatchData",
      "spec": "MatchData#begin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#begin when passed a String argument returns the character offset for multi byte strings with unicode regexp",
      "group": "MatchData",
      "spec": "MatchData#begin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#begin when passed a String argument returns the character offset for multi-byte names",
      "group": "MatchData",
      "spec": "MatchData#begin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#begin when passed a String argument returns the character offset for the farthest match when multiple named captures use the same name",
      "group": "MatchData",
      "spec": "MatchData#begin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#begin when passed a Symbol argument return the character offset of the start of the named capture",
      "group": "MatchData",
      "spec": "MatchData#begin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#begin when passed a Symbol argument returns the character offset for multi byte strings",
      "group": "MatchData",
      "spec": "MatchData#begin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#begin when passed a Symbol argument returns the character offset for multi byte strings with unicode regexp",
      "group": "MatchData",
      "spec": "MatchData#begin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#begin when passed a Symbol argument returns the character offset for multi-byte names",
      "group": "MatchData",
      "spec": "MatchData#begin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#begin when passed a Symbol argument returns the character offset for the farthest match when multiple named captures use the same name",
      "group": "MatchData",
      "spec": "MatchData#begin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#begin when passed an integer argument returns nil when the nth match isn't found",
      "group": "MatchData",
      "spec": "MatchData#begin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#begin when passed an integer argument returns the character offset for multi-byte strings",
      "group": "MatchData",
      "spec": "MatchData#begin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#begin when passed an integer argument returns the character offset for multi-byte strings with unicode regexp",
      "group": "MatchData",
      "spec": "MatchData#begin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#begin when passed an integer argument returns the character offset of the start of the nth element",
      "group": "MatchData",
      "spec": "MatchData#begin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#begin when passed an integer argument tries to convert the passed argument to an Integer using #to_int",
      "group": "MatchData",
      "spec": "MatchData#begin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#captures returns an array of the match captures",
      "group": "MatchData",
      "spec": "MatchData#captures",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#end when passed a String argument return the character offset of the start of the named capture",
      "group": "MatchData",
      "spec": "MatchData#end",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#end when passed a String argument returns the character offset for multi byte strings",
      "group": "MatchData",
      "spec": "MatchData#end",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#end when passed a String argument returns the character offset for multi byte strings with unicode regexp",
      "group": "MatchData",
      "spec": "MatchData#end",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#end when passed a String argument returns the character offset for multi-byte names",
      "group": "MatchData",
      "spec": "MatchData#end",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#end when passed a String argument returns the character offset for the farthest match when multiple named captures use the same name",
      "group": "MatchData",
      "spec": "MatchData#end",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#end when passed a Symbol argument return the character offset of the start of the named capture",
      "group": "MatchData",
      "spec": "MatchData#end",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#end when passed a Symbol argument returns the character offset for multi byte strings",
      "group": "MatchData",
      "spec": "MatchData#end",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#end when passed a Symbol argument returns the character offset for multi byte strings with unicode regexp",
      "group": "MatchData",
      "spec": "MatchData#end",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#end when passed a Symbol argument returns the character offset for multi-byte names",
      "group": "MatchData",
      "spec": "MatchData#end",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#end when passed a Symbol argument returns the character offset for the farthest match when multiple named captures use the same name",
      "group": "MatchData",
      "spec": "MatchData#end",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#end when passed an integer argument returns nil when the nth match isn't found",
      "group": "MatchData",
      "spec": "MatchData#end",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#end when passed an integer argument returns the character offset for multi-byte strings",
      "group": "MatchData",
      "spec": "MatchData#end",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#end when passed an integer argument returns the character offset for multi-byte strings with unicode regexp",
      "group": "MatchData",
      "spec": "MatchData#end",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#end when passed an integer argument returns the character offset of the end of the nth element",
      "group": "MatchData",
      "spec": "MatchData#end",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#end when passed an integer argument tries to convert the passed argument to an Integer using #to_int",
      "group": "MatchData",
      "spec": "MatchData#end",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#eql? returns false if the argument is not a MatchData object",
      "group": "MatchData",
      "spec": "MatchData#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#eql? returns false if the operands have different patterns",
      "group": "MatchData",
      "spec": "MatchData#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#eql? returns false if the operands have different target strings",
      "group": "MatchData",
      "spec": "MatchData#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#eql? returns true if both operands have equal target strings, patterns, and match positions",
      "group": "MatchData",
      "spec": "MatchData#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#hash needs to be reviewed for spec completeness",
      "group": "MatchData",
      "spec": "MatchData#hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#inspect returns a String",
      "group": "MatchData",
      "spec": "MatchData#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#inspect returns a human readable representation of named captures",
      "group": "MatchData",
      "spec": "MatchData#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#inspect returns a human readable representation that contains entire matched string and the captures",
      "group": "MatchData",
      "spec": "MatchData#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#length length should return the number of elements in the match array",
      "group": "MatchData",
      "spec": "MatchData#length",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#named_captures prefers later captures",
      "group": "MatchData",
      "spec": "MatchData#named_captures",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#named_captures returns a Hash that has captured name and the matched string pairs",
      "group": "MatchData",
      "spec": "MatchData#named_captures",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#named_captures returns the latest matched capture, even if a later one that does not match exists",
      "group": "MatchData",
      "spec": "MatchData#named_captures",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#names equals Regexp#names",
      "group": "MatchData",
      "spec": "MatchData#names",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#names returns [] if there were no named captures",
      "group": "MatchData",
      "spec": "MatchData#names",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#names returns an Array",
      "group": "MatchData",
      "spec": "MatchData#names",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#names returns each name only once",
      "group": "MatchData",
      "spec": "MatchData#names",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#names returns the names of the named capture groups",
      "group": "MatchData",
      "spec": "MatchData#names",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#names sets each element to a String",
      "group": "MatchData",
      "spec": "MatchData#names",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#offset returns [nil, nil] when the nth match isn't found",
      "group": "MatchData",
      "spec": "MatchData#offset",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#offset returns a two element array with the begin and end of the nth match",
      "group": "MatchData",
      "spec": "MatchData#offset",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#offset returns the offset for multi byte strings",
      "group": "MatchData",
      "spec": "MatchData#offset",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#offset returns the offset for multi byte strings with unicode regexp",
      "group": "MatchData",
      "spec": "MatchData#offset",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#post_match keeps taint status from the source string",
      "group": "MatchData",
      "spec": "MatchData#post_match",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:MatchData#post_match keeps untrusted status from the source string",
      "group": "MatchData",
      "spec": "MatchData#post_match",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:MatchData#post_match returns the string after the match equiv. special var $'",
      "group": "MatchData",
      "spec": "MatchData#post_match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#post_match sets an empty result to the encoding of the source String",
      "group": "MatchData",
      "spec": "MatchData#post_match",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:MatchData#post_match sets the encoding to the encoding of the source String",
      "group": "MatchData",
      "spec": "MatchData#post_match",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:MatchData#pre_match keeps taint status from the source string",
      "group": "MatchData",
      "spec": "MatchData#pre_match",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:MatchData#pre_match keeps untrusted status from the source string",
      "group": "MatchData",
      "spec": "MatchData#pre_match",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:MatchData#pre_match returns the string before the match, equiv. special var $`",
      "group": "MatchData",
      "spec": "MatchData#pre_match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#pre_match sets an empty result to the encoding of the source String",
      "group": "MatchData",
      "spec": "MatchData#pre_match",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:MatchData#pre_match sets the encoding to the encoding of the source String",
      "group": "MatchData",
      "spec": "MatchData#pre_match",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:MatchData#regexp returns a Regexp object",
      "group": "MatchData",
      "spec": "MatchData#regexp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#regexp returns the pattern used in the match",
      "group": "MatchData",
      "spec": "MatchData#regexp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#size length should return the number of elements in the match array",
      "group": "MatchData",
      "spec": "MatchData#size",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#string returns a copy of the match string",
      "group": "MatchData",
      "spec": "MatchData#string",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#string returns a frozen copy of the match string",
      "group": "MatchData",
      "spec": "MatchData#string",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#to_a returns an array of matches",
      "group": "MatchData",
      "spec": "MatchData#to_a",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#to_s returns the entire matched string",
      "group": "MatchData",
      "spec": "MatchData#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#values_at returns an array of the matching value",
      "group": "MatchData",
      "spec": "MatchData#values_at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#values_at slices captures with the given names",
      "group": "MatchData",
      "spec": "MatchData#values_at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#values_at takes names and indices",
      "group": "MatchData",
      "spec": "MatchData#values_at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MatchData#values_at when passed a Range returns an array of the matching value",
      "group": "MatchData",
      "spec": "MatchData#values_at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#acos is accessible as a private instance method",
      "group": "Math",
      "spec": "Math#acos",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#acosh is accessible as a private instance method",
      "group": "Math",
      "spec": "Math#acosh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#asin is accessible as a private instance method",
      "group": "Math",
      "spec": "Math#asin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#asinh is accessible as a private instance method",
      "group": "Math",
      "spec": "Math#asinh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#atan is accessible as a private instance method",
      "group": "Math",
      "spec": "Math#atan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#atan2 is accessible as a private instance method",
      "group": "Math",
      "spec": "Math#atan2",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#atanh is a private instance method",
      "group": "Math",
      "spec": "Math#atanh",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Math#atanh raises a Math::DomainError for arguments greater than 1.0",
      "group": "Math",
      "spec": "Math#atanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#atanh raises a Math::DomainError for arguments less than -1.0",
      "group": "Math",
      "spec": "Math#atanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#atanh raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math#atanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#atanh raises a TypeError if the argument is not a Numeric",
      "group": "Math",
      "spec": "Math#atanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#atanh return -Infinity if x == -1.0",
      "group": "Math",
      "spec": "Math#atanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#atanh returns Infinity if x == 1.0",
      "group": "Math",
      "spec": "Math#atanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#atanh returns a float",
      "group": "Math",
      "spec": "Math#atanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#atanh returns the inverse hyperbolic tangent of the argument",
      "group": "Math",
      "spec": "Math#atanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#cos is accessible as a private instance method",
      "group": "Math",
      "spec": "Math#cos",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#cosh is accessible as a private instance method",
      "group": "Math",
      "spec": "Math#cosh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#erf is accessible as a private instance method",
      "group": "Math",
      "spec": "Math#erf",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#erfc is accessible as a private instance method",
      "group": "Math",
      "spec": "Math#erfc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#exp is accessible as a private instance method",
      "group": "Math",
      "spec": "Math#exp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#frexp is accessible as a private instance method",
      "group": "Math",
      "spec": "Math#frexp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#hypot is accessible as a private instance method",
      "group": "Math",
      "spec": "Math#hypot",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#ldexp is accessible as a private instance method",
      "group": "Math",
      "spec": "Math#ldexp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#log is accessible as a private instance method",
      "group": "Math",
      "spec": "Math#log",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#log10 is accessible as a private instance method",
      "group": "Math",
      "spec": "Math#log10",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#sin is accessible as a private instance method",
      "group": "Math",
      "spec": "Math#sin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#sinh is accessible as a private instance method",
      "group": "Math",
      "spec": "Math#sinh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#sqrt is accessible as a private instance method",
      "group": "Math",
      "spec": "Math#sqrt",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#tan is accessible as a private instance method",
      "group": "Math",
      "spec": "Math#tan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math#tanh is accessible as a private instance method",
      "group": "Math",
      "spec": "Math#tanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.acos accepts any argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.acos",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.acos raises a TypeError if the argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.acos",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.acos raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.acos",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.acos raises a TypeError if the string argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.acos",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.acos raises an Math::DomainError if the argument is greater than 1.0",
      "group": "Math",
      "spec": "Math.acos",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.acos raises an Math::DomainError if the argument is less than -1.0",
      "group": "Math",
      "spec": "Math.acos",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.acos returns NaN given NaN",
      "group": "Math",
      "spec": "Math.acos",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.acos returns a float",
      "group": "Math",
      "spec": "Math.acos",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.acos returns the arccosine of the argument",
      "group": "Math",
      "spec": "Math.acos",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.acosh accepts any argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.acosh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.acosh raises Math::DomainError if the passed argument is less than -1.0 or greater than 1.0",
      "group": "Math",
      "spec": "Math.acosh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.acosh raises a TypeError if the argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.acosh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.acosh raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.acosh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.acosh returns NaN given NaN",
      "group": "Math",
      "spec": "Math.acosh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.acosh returns a float",
      "group": "Math",
      "spec": "Math.acosh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.acosh returns the principle value of the inverse hyperbolic cosine of the argument",
      "group": "Math",
      "spec": "Math.acosh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.asin accepts any argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.asin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.asin raises a TypeError if the argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.asin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.asin raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.asin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.asin raises an Math::DomainError if the argument is greater than 1.0",
      "group": "Math",
      "spec": "Math.asin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.asin raises an Math::DomainError if the argument is less than -1.0",
      "group": "Math",
      "spec": "Math.asin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.asin returns NaN given NaN",
      "group": "Math",
      "spec": "Math.asin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.asin returns a float",
      "group": "Math",
      "spec": "Math.asin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.asin returns the arcsine of the argument",
      "group": "Math",
      "spec": "Math.asin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.asinh accepts any argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.asinh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.asinh raises a TypeError if the argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.asinh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.asinh raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.asinh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.asinh returns NaN given NaN",
      "group": "Math",
      "spec": "Math.asinh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.asinh returns a float",
      "group": "Math",
      "spec": "Math.asinh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.asinh returns the inverse hyperbolic sin of the argument",
      "group": "Math",
      "spec": "Math.asinh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atan accepts any argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.atan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atan raises a TypeError if the argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.atan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atan raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.atan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atan returns NaN given NaN",
      "group": "Math",
      "spec": "Math.atan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atan returns a float",
      "group": "Math",
      "spec": "Math.atan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atan returns the arctangent of the argument",
      "group": "Math",
      "spec": "Math.atan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atan2 accepts any argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.atan2",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atan2 raises a TypeError if the argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.atan2",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atan2 raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.atan2",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atan2 returns -Pi when passed -0.0, -0.0",
      "group": "Math",
      "spec": "Math.atan2",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atan2 returns Pi when passed 0.0, -0.0",
      "group": "Math",
      "spec": "Math.atan2",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atan2 returns a float",
      "group": "Math",
      "spec": "Math.atan2",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atan2 returns negative zero when passed -0.0, 0.0",
      "group": "Math",
      "spec": "Math.atan2",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atan2 returns positive zero when passed 0.0, 0.0",
      "group": "Math",
      "spec": "Math.atan2",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atan2 returns the arc tangent of y, x",
      "group": "Math",
      "spec": "Math.atan2",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atanh raises a Math::DomainError for arguments greater than 1.0",
      "group": "Math",
      "spec": "Math.atanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atanh raises a Math::DomainError for arguments less than -1.0",
      "group": "Math",
      "spec": "Math.atanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atanh raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.atanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atanh raises a TypeError if the argument is not a Numeric",
      "group": "Math",
      "spec": "Math.atanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atanh return -Infinity if x == -1.0",
      "group": "Math",
      "spec": "Math.atanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atanh returns Infinity if x == 1.0",
      "group": "Math",
      "spec": "Math.atanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atanh returns a float",
      "group": "Math",
      "spec": "Math.atanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.atanh returns the inverse hyperbolic tangent of the argument",
      "group": "Math",
      "spec": "Math.atanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.cbrt accepts any argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.cbrt",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.cbrt raises a TypeError if the argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.cbrt",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.cbrt raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.cbrt",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.cbrt returns a float",
      "group": "Math",
      "spec": "Math.cbrt",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.cbrt returns the cubic root of the argument",
      "group": "Math",
      "spec": "Math.cbrt",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.cos coerces its argument with #to_f",
      "group": "Math",
      "spec": "Math.cos",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.cos raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.cos",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.cos raises a TypeError unless the argument is Numeric and has #to_f",
      "group": "Math",
      "spec": "Math.cos",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.cos returns NaN given NaN",
      "group": "Math",
      "spec": "Math.cos",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.cos returns a float",
      "group": "Math",
      "spec": "Math.cos",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.cos returns the cosine of the argument expressed in radians",
      "group": "Math",
      "spec": "Math.cos",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.cosh accepts any argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.cosh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.cosh raises a TypeError if the argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.cosh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.cosh raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.cosh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.cosh returns NaN given NaN",
      "group": "Math",
      "spec": "Math.cosh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.cosh returns a float",
      "group": "Math",
      "spec": "Math.cosh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.cosh returns the hyperbolic cosine of the argument",
      "group": "Math",
      "spec": "Math.cosh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.erf accepts any argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.erf",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.erf raises a TypeError if the argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.erf",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.erf raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.erf",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.erf returns NaN given NaN",
      "group": "Math",
      "spec": "Math.erf",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.erf returns a float",
      "group": "Math",
      "spec": "Math.erf",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.erf returns the error function of the argument",
      "group": "Math",
      "spec": "Math.erf",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.erfc accepts any argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.erfc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.erfc raises a TypeError if the argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.erfc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.erfc raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.erfc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.erfc returns NaN given NaN",
      "group": "Math",
      "spec": "Math.erfc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.erfc returns a float",
      "group": "Math",
      "spec": "Math.erfc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.erfc returns the complementary error function of the argument",
      "group": "Math",
      "spec": "Math.erfc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.exp accepts any argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.exp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.exp raises a TypeError if the argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.exp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.exp raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.exp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.exp returns NaN given NaN",
      "group": "Math",
      "spec": "Math.exp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.exp returns a float",
      "group": "Math",
      "spec": "Math.exp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.exp returns the base-e exponential of the argument",
      "group": "Math",
      "spec": "Math.exp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.frexp accepts any argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.frexp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.frexp raises a TypeError if the argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.frexp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.frexp raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.frexp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.frexp returns NaN given NaN",
      "group": "Math",
      "spec": "Math.frexp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.frexp returns the normalized fraction and exponent",
      "group": "Math",
      "spec": "Math.frexp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.gamma raises Math::DomainError given -1",
      "group": "Math",
      "spec": "Math.gamma",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.gamma raises Math::DomainError given negative infinity",
      "group": "Math",
      "spec": "Math.gamma",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.gamma returns +infinity given +infinity",
      "group": "Math",
      "spec": "Math.gamma",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.gamma returns +infinity given 0",
      "group": "Math",
      "spec": "Math.gamma",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.gamma returns -infinity given -0.0",
      "group": "Math",
      "spec": "Math.gamma",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.gamma returns Math.sqrt(Math::PI) given 0.5",
      "group": "Math",
      "spec": "Math.gamma",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.gamma returns NaN given NaN",
      "group": "Math",
      "spec": "Math.gamma",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.gamma returns approximately (n-1)! given n for n between 24 and 30",
      "group": "Math",
      "spec": "Math.gamma",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Math.gamma returns exactly (n-1)! given n for n between 2 and 23",
      "group": "Math",
      "spec": "Math.gamma",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Math.gamma returns good numerical approximation for gamma(-0.00001)",
      "group": "Math",
      "spec": "Math.gamma",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.gamma returns good numerical approximation for gamma(-2.15)",
      "group": "Math",
      "spec": "Math.gamma",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.gamma returns good numerical approximation for gamma(0.00001)",
      "group": "Math",
      "spec": "Math.gamma",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.gamma returns good numerical approximation for gamma(3.2)",
      "group": "Math",
      "spec": "Math.gamma",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.hypot accepts any argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.hypot",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.hypot raises a TypeError if the argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.hypot",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.hypot raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.hypot",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.hypot returns NaN given NaN",
      "group": "Math",
      "spec": "Math.hypot",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.hypot returns a float",
      "group": "Math",
      "spec": "Math.hypot",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.hypot returns the length of the hypotenuse of a right triangle with legs given by the arguments",
      "group": "Math",
      "spec": "Math.hypot",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.ldexp accepts any first argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.ldexp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.ldexp accepts any second argument that can be coerced with Integer()",
      "group": "Math",
      "spec": "Math.ldexp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.ldexp raises RangeError if NaN is given as the second arg",
      "group": "Math",
      "spec": "Math.ldexp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.ldexp raises a TypeError if the first argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.ldexp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.ldexp raises a TypeError if the first argument is nil",
      "group": "Math",
      "spec": "Math.ldexp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.ldexp raises a TypeError if the second argument cannot be coerced with Integer()",
      "group": "Math",
      "spec": "Math.ldexp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.ldexp raises a TypeError if the second argument is nil",
      "group": "Math",
      "spec": "Math.ldexp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.ldexp returns NaN given NaN",
      "group": "Math",
      "spec": "Math.ldexp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.ldexp returns a float",
      "group": "Math",
      "spec": "Math.ldexp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.ldexp returns the argument multiplied by 2**n",
      "group": "Math",
      "spec": "Math.ldexp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.lgamma raises Math::DomainError when passed -Infinity",
      "group": "Math",
      "spec": "Math.lgamma",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.lgamma returns [Infinity, -1] when passed -0.0",
      "group": "Math",
      "spec": "Math.lgamma",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.lgamma returns [Infinity, 1] when passed -1",
      "group": "Math",
      "spec": "Math.lgamma",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.lgamma returns [Infinity, 1] when passed 0",
      "group": "Math",
      "spec": "Math.lgamma",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.lgamma returns [Infinity, 1] when passed Infinity",
      "group": "Math",
      "spec": "Math.lgamma",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.lgamma returns [NaN, 1] when passed NaN",
      "group": "Math",
      "spec": "Math.lgamma",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.lgamma returns [log(2/3*PI, 1] when passed 6.0",
      "group": "Math",
      "spec": "Math.lgamma",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.lgamma returns [log(sqrt(PI)), 1] when passed 0.5",
      "group": "Math",
      "spec": "Math.lgamma",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.lgamma returns an approximate value when passed -0.5",
      "group": "Math",
      "spec": "Math.lgamma",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.lgamma returns an approximate value when passed -1.5",
      "group": "Math",
      "spec": "Math.lgamma",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log accepts a second argument for the base",
      "group": "Math",
      "spec": "Math.log",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log accepts any argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.log",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log raises a TypeError for numerical values passed as string",
      "group": "Math",
      "spec": "Math.log",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log raises a TypeError if the argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.log",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.log",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log raises a TypeError when the numerical base cannot be coerced to a float",
      "group": "Math",
      "spec": "Math.log",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log raises an Math::DomainError if the argument is less than 0",
      "group": "Math",
      "spec": "Math.log",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log returns NaN given NaN",
      "group": "Math",
      "spec": "Math.log",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log returns a float",
      "group": "Math",
      "spec": "Math.log",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log returns the natural logarithm of the argument",
      "group": "Math",
      "spec": "Math.log",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log10 accepts any argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.log10",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log10 raises a TypeError if the argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.log10",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log10 raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.log10",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log10 raises an Math::DomainError if the argument is less than 0",
      "group": "Math",
      "spec": "Math.log10",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log10 returns NaN given NaN",
      "group": "Math",
      "spec": "Math.log10",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log10 returns a float",
      "group": "Math",
      "spec": "Math.log10",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log10 returns the base-10 logarithm of the argument",
      "group": "Math",
      "spec": "Math.log10",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log2 accepts any argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.log2",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log2 raises a TypeError if passed a numerical argument as a string",
      "group": "Math",
      "spec": "Math.log2",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log2 raises a TypeError if the argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.log2",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log2 raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.log2",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log2 raises an Errno::EDOM if the argument is less than 0",
      "group": "Math",
      "spec": "Math.log2",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log2 returns NaN given NaN",
      "group": "Math",
      "spec": "Math.log2",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log2 returns a float",
      "group": "Math",
      "spec": "Math.log2",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.log2 returns the natural logarithm of the argument",
      "group": "Math",
      "spec": "Math.log2",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Math.sin accepts any argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.sin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.sin raises a TypeError if the argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.sin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.sin raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.sin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.sin returns NaN given NaN",
      "group": "Math",
      "spec": "Math.sin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.sin returns a float",
      "group": "Math",
      "spec": "Math.sin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.sin returns the sine of the argument expressed in radians",
      "group": "Math",
      "spec": "Math.sin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.sinh accepts any argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.sinh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.sinh raises a TypeError if the argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.sinh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.sinh raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.sinh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.sinh returns NaN given NaN",
      "group": "Math",
      "spec": "Math.sinh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.sinh returns a float",
      "group": "Math",
      "spec": "Math.sinh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.sinh returns the hyperbolic sin of the argument",
      "group": "Math",
      "spec": "Math.sinh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.sqrt accepts any argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.sqrt",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.sqrt raises a TypeError if the argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.sqrt",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.sqrt raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.sqrt",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.sqrt returns NaN given NaN",
      "group": "Math",
      "spec": "Math.sqrt",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.sqrt returns a float",
      "group": "Math",
      "spec": "Math.sqrt",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.sqrt returns the square root of the argument",
      "group": "Math",
      "spec": "Math.sqrt",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.tan accepts any argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.tan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.tan raises a TypeError if the argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.tan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.tan raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.tan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.tan returns NaN given NaN",
      "group": "Math",
      "spec": "Math.tan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.tan returns NaN if called with +-Infinity",
      "group": "Math",
      "spec": "Math.tan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.tan returns a float",
      "group": "Math",
      "spec": "Math.tan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.tan returns the tangent of the argument",
      "group": "Math",
      "spec": "Math.tan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.tanh accepts any argument that can be coerced with Float()",
      "group": "Math",
      "spec": "Math.tanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.tanh raises a TypeError if the argument cannot be coerced with Float()",
      "group": "Math",
      "spec": "Math.tanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.tanh raises a TypeError if the argument is nil",
      "group": "Math",
      "spec": "Math.tanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.tanh returns NaN given NaN",
      "group": "Math",
      "spec": "Math.tanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.tanh returns a float",
      "group": "Math",
      "spec": "Math.tanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math.tanh returns the hyperbolic tangent of the argument",
      "group": "Math",
      "spec": "Math.tanh",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math::E approximates the value of Napier's constant",
      "group": "Math::E",
      "spec": "Math::E",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math::E is accessible to a class that includes Math",
      "group": "Math::E",
      "spec": "Math::E",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math::PI approximates the value of pi",
      "group": "Math::PI",
      "spec": "Math::PI",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Math::PI is accessible to a class that includes Math",
      "group": "Math::PI",
      "spec": "Math::PI",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#<< accepts any callable object",
      "group": "Method",
      "spec": "Method#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#<< calls passed Proc with arguments and then calls self with result",
      "group": "Method",
      "spec": "Method#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#<< composition is a lambda",
      "group": "Method",
      "spec": "Method#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#<< composition may accept multiple arguments",
      "group": "Method",
      "spec": "Method#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#<< raises NoMethodError when called if passed not callable object",
      "group": "Method",
      "spec": "Method#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#<< returns a Proc that is the composition of self and the passed Proc",
      "group": "Method",
      "spec": "Method#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#<< when called does not try to coerce argument with #to_proc",
      "group": "Method",
      "spec": "Method#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#== missing methods calls respond_to_missing? with true to include private methods",
      "group": "Method",
      "spec": "Method#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#== missing methods returns true for the same method missing",
      "group": "Method",
      "spec": "Method#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#== returns false for a method which is not bound to the same object",
      "group": "Method",
      "spec": "Method#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#== returns false if comparing a method defined via define_method and def",
      "group": "Method",
      "spec": "Method#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#== returns false if the argument is an unbound version of self",
      "group": "Method",
      "spec": "Method#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#== returns false if the argument is not a Method object",
      "group": "Method",
      "spec": "Method#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#== returns false if the two methods are bound to different objects, have the same names, and identical bodies",
      "group": "Method",
      "spec": "Method#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#== returns false if the two methods are bound to the same object but were defined independently",
      "group": "Method",
      "spec": "Method#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#== returns false on a method which is neither aliased nor the same method",
      "group": "Method",
      "spec": "Method#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#== returns true if a method was defined using the other one",
      "group": "Method",
      "spec": "Method#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#== returns true if methods are the same",
      "group": "Method",
      "spec": "Method#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#== returns true if the two core methods are aliases",
      "group": "Method",
      "spec": "Method#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#== returns true on aliased methods",
      "group": "Method",
      "spec": "Method#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#=== for a Method generated by respond_to_missing? does not call the original method name even if it now exists",
      "group": "Method",
      "spec": "Method#===",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#=== for a Method generated by respond_to_missing? invokes method_missing dynamically",
      "group": "Method",
      "spec": "Method#===",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#=== for a Method generated by respond_to_missing? invokes method_missing with the method name and the specified arguments",
      "group": "Method",
      "spec": "Method#===",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#=== for a Method generated by respond_to_missing? invokes method_missing with the specified arguments and returns the result",
      "group": "Method",
      "spec": "Method#===",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#=== invokes the method with the specified arguments, returning the method's return value",
      "group": "Method",
      "spec": "Method#===",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#=== raises an ArgumentError when given incorrect number of arguments",
      "group": "Method",
      "spec": "Method#===",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#>> accepts any callable object",
      "group": "Method",
      "spec": "Method#>>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#>> calls passed Proc with arguments and then calls self with result",
      "group": "Method",
      "spec": "Method#>>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#>> composition is a lambda",
      "group": "Method",
      "spec": "Method#>>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#>> composition may accept multiple arguments",
      "group": "Method",
      "spec": "Method#>>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#>> raises NoMethodError when called if passed not callable object",
      "group": "Method",
      "spec": "Method#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#>> returns a Proc that is the composition of self and the passed Proc",
      "group": "Method",
      "spec": "Method#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#>> when called does not try to coerce argument with #to_proc",
      "group": "Method",
      "spec": "Method#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#[] for a Method generated by respond_to_missing? does not call the original method name even if it now exists",
      "group": "Method",
      "spec": "Method#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#[] for a Method generated by respond_to_missing? invokes method_missing dynamically",
      "group": "Method",
      "spec": "Method#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#[] for a Method generated by respond_to_missing? invokes method_missing with the method name and the specified arguments",
      "group": "Method",
      "spec": "Method#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#[] for a Method generated by respond_to_missing? invokes method_missing with the specified arguments and returns the result",
      "group": "Method",
      "spec": "Method#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#[] invokes the method with the specified arguments, returning the method's return value",
      "group": "Method",
      "spec": "Method#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#[] raises an ArgumentError when given incorrect number of arguments",
      "group": "Method",
      "spec": "Method#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Method#arity returns negative values for method definition \\n    def m(*) end\\n        def n(*a) end\"",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Method#arity returns negative values for method definition \\n    def m(**k, &l) end\\n        def n(*a, **k) end\\n        def o(a: 1, b: 2, **k) end\"",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Method#arity returns negative values for method definition \\n    def m(*a, b) end\\n        def n(*a, b, c) end\\n        def o(*a, b, c, d) end\"",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Method#arity returns negative values for method definition \\n    def m(a, *) end\\n        def n(a, *b) end\\n        def o(a, b, *c) end\\n        def p(a, b, c, *d) end\"",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Method#arity returns negative values for method definition \\n    def m(a, *b, c) end\\n        def n(a, b, *c, d, e) end\"",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Method#arity returns negative values for method definition \\n    def m(a, b=1) end\\n        def n(a, b, c=1, d=2) end\"",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Method#arity returns negative values for method definition \\n    def m(a, b=1, *c, d, e:, f: 2, **k, &l) end\\n        def n(a, b=1, *c, d:, e:, f: 2, **k, &l) end\\n        def o(a=0, b=1, *c, d, e:, f: 2, **k, &l) end\\n        def p(a=0, b=1, *c, d:, e:, f: 2, **k, &l) end\"",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Method#arity returns negative values for method definition \\n    def m(a, b=1, c=2, *d, e, f) end\\n        def n(a, b, c=1, *d, e, f, g) end\"",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Method#arity returns negative values for method definition \\n    def m(a: 1) end\\n        def n(a: 1, b: 2) end\"",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Method#arity returns negative values for method definition \\n    def m(a=1) end\\n        def n(a=1, b=2) end\"",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Method#arity returns negative values for method definition \\n    def m(a=1, *b) end\\n        def n(a=1, b=2, *c) end\"",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Method#arity returns negative values for method definition \\n    def m(a=1, b: 2) end\\n        def n(*a, b: 1) end\\n        def o(a=1, b: 2) end\\n        def p(a=1, *b, c: 2, &l) end\"",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Method#arity returns positive values for method definition \\n    def m(a) end\\n        def n(a, b) end\\n        def o(a, b, c) end\\n        def p(a, b, c, d) end\"",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Method#arity returns positive values for method definition \\n    def m(a, b, c:, d: 1) end\\n        def n(a, b, c:, d: 1, **k, &l) end\"",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Method#arity returns positive values for method definition \\n    def m(a, b:) end\\n        def n(a, b:, &l) end\"",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Method#arity returns positive values for method definition \\n    def m(a:) end\\n        def n(a:, b:) end\\n        def o(a: 1, b:, c:, d: 2) end\"",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#arity for a Method generated by attr_reader return 0",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#arity for a Method generated by attr_writer returns 1",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#arity for a Method generated by respond_to_missing? returns -1",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#arity returns negative values for method definition 'def m(a=1, *b, c:, d: 2, **k, &l) end'",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#arity returns zero for method definition 'def m() end'",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#arity returns zero for method definition 'def n(&b) end'",
      "group": "Method",
      "spec": "Method#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#call for a Method generated by respond_to_missing? does not call the original method name even if it now exists",
      "group": "Method",
      "spec": "Method#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#call for a Method generated by respond_to_missing? invokes method_missing dynamically",
      "group": "Method",
      "spec": "Method#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#call for a Method generated by respond_to_missing? invokes method_missing with the method name and the specified arguments",
      "group": "Method",
      "spec": "Method#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#call for a Method generated by respond_to_missing? invokes method_missing with the specified arguments and returns the result",
      "group": "Method",
      "spec": "Method#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#call invokes the method with the specified arguments, returning the method's return value",
      "group": "Method",
      "spec": "Method#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#call raises an ArgumentError when given incorrect number of arguments",
      "group": "Method",
      "spec": "Method#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#clone returns a copy of the method",
      "group": "Method",
      "spec": "Method#clone",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#curry returns a curried proc",
      "group": "Method",
      "spec": "Method#curry",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#curry with optional arity argument raises ArgumentError when the method requires less arguments than the given arity",
      "group": "Method",
      "spec": "Method#curry",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#curry with optional arity argument raises ArgumentError when the method requires more arguments than the given arity",
      "group": "Method",
      "spec": "Method#curry",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#curry with optional arity argument returns a curried proc when given correct arity",
      "group": "Method",
      "spec": "Method#curry",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#eql? missing methods calls respond_to_missing? with true to include private methods",
      "group": "Method",
      "spec": "Method#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#eql? missing methods returns true for the same method missing",
      "group": "Method",
      "spec": "Method#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#eql? returns false for a method which is not bound to the same object",
      "group": "Method",
      "spec": "Method#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#eql? returns false if comparing a method defined via define_method and def",
      "group": "Method",
      "spec": "Method#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#eql? returns false if the argument is an unbound version of self",
      "group": "Method",
      "spec": "Method#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#eql? returns false if the argument is not a Method object",
      "group": "Method",
      "spec": "Method#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#eql? returns false if the two methods are bound to different objects, have the same names, and identical bodies",
      "group": "Method",
      "spec": "Method#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#eql? returns false if the two methods are bound to the same object but were defined independently",
      "group": "Method",
      "spec": "Method#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#eql? returns false on a method which is neither aliased nor the same method",
      "group": "Method",
      "spec": "Method#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#eql? returns true if a method was defined using the other one",
      "group": "Method",
      "spec": "Method#eql?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#eql? returns true if methods are the same",
      "group": "Method",
      "spec": "Method#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#eql? returns true if the two core methods are aliases",
      "group": "Method",
      "spec": "Method#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#eql? returns true on aliased methods",
      "group": "Method",
      "spec": "Method#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#hash returns the same value for builtin methods that are eql?",
      "group": "Method",
      "spec": "Method#hash",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#hash returns the same value for user methods that are eql?",
      "group": "Method",
      "spec": "Method#hash",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#inspect returns a String",
      "group": "Method",
      "spec": "Method#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#inspect returns a String containing 'Method'",
      "group": "Method",
      "spec": "Method#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#inspect returns a String containing the Module the method is defined in",
      "group": "Method",
      "spec": "Method#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#inspect returns a String containing the Module the method is referenced from",
      "group": "Method",
      "spec": "Method#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#inspect returns a String containing the method name",
      "group": "Method",
      "spec": "Method#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#inspect returns a String for methods defined with attr_accessor",
      "group": "Method",
      "spec": "Method#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#name for a Method generated by respond_to_missing? returns the name passed to respond_to_missing?",
      "group": "Method",
      "spec": "Method#name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#name returns the name even when aliased",
      "group": "Method",
      "spec": "Method#name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#name returns the name of the method",
      "group": "Method",
      "spec": "Method#name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#original_name returns the name of the method",
      "group": "Method",
      "spec": "Method#original_name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#original_name returns the original name even when aliased twice",
      "group": "Method",
      "spec": "Method#original_name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#original_name returns the original name when aliased",
      "group": "Method",
      "spec": "Method#original_name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#owner for a Method generated by respond_to_missing? returns the owner of the method",
      "group": "Method",
      "spec": "Method#owner",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#owner returns the class/module it was defined in",
      "group": "Method",
      "spec": "Method#owner",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#owner returns the owner of the method",
      "group": "Method",
      "spec": "Method#owner",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#owner returns the same owner when aliased in the same classes",
      "group": "Method",
      "spec": "Method#owner",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters adds nameless rest arg for \"star\" argument",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters return [[:req]] for a Method generated by attr_writer",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:block,:blk]] for a method expecting one block argument called 'a'",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:key,:a]] for a method with a single optional keyword argument",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:keyreq,:a]] for a method with a single required keyword argument",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:keyrest,:a]] for a method with a keyword rest argument",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:opt, :x]] for a define_method method with an optional argument 'x'",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:opt,:a],[:block,:b]] for a method expecting one required argument ('a') and one block argument ('b')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:opt,:a]] for a method expecting one optional argument ('a')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req, :x], [:req, :y]] for a define_method method expecting two required arguments 'x' and 'y'",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req, :x]] for a define_method method expecting one required argument 'x'",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req,:a],[:block,:b] for a method expecting a required argument ('a') and a block argument ('b')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req,:a],[:opt,:b],[:block,:c]] for a method expecting one required argument ('a'), one optional argument ('b'), and a block ('c')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req,:a],[:opt,:b],[:opt,:c],[:block,:d]] for a method expecting one required argument ('a'), two optional arguments ('b','c'), and a block ('d')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req,:a],[:opt,:b],[:opt,:c],[:rest,:d]] for a method expecting a required argument ('a'), two optional arguments ('b','c'), and a splat argument ('d')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req,:a],[:opt,:b],[:opt,:c]] for a method expecting one required argument ('a') and two optional arguments ('b','c')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req,:a],[:opt,:b],[:rest,:c],[:block,:d]] for a method expecting a required argument ('a'), a splat argument ('c'), and a block ('d')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req,:a],[:opt,:b],[:rest,:c]] for a method expecting a required argument ('a','b'), an optional argument ('b'), and a splat argument ('c')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req,:a],[:opt,:b]] for a method expecting one required argument ('a') and one optional argument ('b')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req,:a],[:opt,:b]] for a method expecting one required argument ('a') and one optional argument ('b')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req,:a],[:req,:b],[:block,:c] for a method expecting two required arguments ('a','b') and a block argument ('c')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req,:a],[:req,:b],[:opt,:b],[:rest,:d]] for a method expecting two required arguments ('a','b'), an optional argument ('c'), and a splat argument ('d')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req,:a],[:req,:b],[:opt,:c],[:block,:d]] for a method expecting two required arguments ('a','b'), an optional argument ('c'), a splat argument ('d'), and a block ('e')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req,:a],[:req,:b],[:opt,:c]] for a method expecting two required arguments ('a','b') and one optional arguments ('c')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req,:a],[:req,:b],[:rest,:c],[:block,:d]] for a method expecting two required arguments ('a','b'), a splat argument ('c'), and a block ('d')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req,:a],[:req,:b],[:rest,:c]] for a method expecting two required arguments ('a','b') and a splat argument ('c')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req,:a],[:req,:b]] for a method expecting two required arguments called 'a' and 'b''",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req,:a],[:rest,:b],[:block,:c]] for a method expecting a required argument ('a'), a splat argument ('b'), and a block ('c')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req,:a],[:rest,:b]] for a method expecting a splat argument ('a') and a required argument ('b')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req,:name]] for a method expecting one required argument called 'name'",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req]] for a define_method method with a grouping as its only argument",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:req]] for each parameter for core methods with fixed-length argument lists",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:rest, :x]] for a define_method method with rest arg 'x' only",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:rest,:a],[:block,:b]] for a method expecting a splat argument ('a') and a block argument ('b')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:rest,:a],[:req,:b],[:block,:c]] for a method expecting a splat argument ('a'), a required argument ('b'), and a block ('c')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:rest,:a],[:req,:b],[:req,:c]] for a method expecting a splat argument ('a') and two required arguments ('b','c')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:rest,:a],[:req,:b]] for a method expecting a splat argument ('a') and a required argument ('b')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:rest,:a]] for a method expecting a single splat argument ('a')",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:rest]] for a Method generated by respond_to_missing?",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:rest]] for core methods with variable-length argument lists",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [[:rest]] or [[:opt]] for core methods with optional arguments",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [] for a Method generated by attr_reader",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [] for a define_method method with explicit no-args || specification",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns [] for a define_method method with no args specification",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns an empty Array when the method expects no arguments",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters returns the args and block for a splat and block argument",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#parameters works with ->(){} as the value of an optional argument",
      "group": "Method",
      "spec": "Method#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#receiver for a Method generated by respond_to_missing? returns the receiver of the method",
      "group": "Method",
      "spec": "Method#receiver",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#receiver returns the receiver of the method",
      "group": "Method",
      "spec": "Method#receiver",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#receiver returns the right receiver even when aliased",
      "group": "Method",
      "spec": "Method#receiver",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#source_location for a Method generated by respond_to_missing? returns nil",
      "group": "Method",
      "spec": "Method#source_location",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#source_location returns an Array",
      "group": "Method",
      "spec": "Method#source_location",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#source_location returns the last place the method was defined",
      "group": "Method",
      "spec": "Method#source_location",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#source_location returns the location of the original method even if it was aliased",
      "group": "Method",
      "spec": "Method#source_location",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#source_location sets the first value to the path of the file in which the method was defined",
      "group": "Method",
      "spec": "Method#source_location",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#source_location sets the last value to a Fixnum representing the line on which the method was defined",
      "group": "Method",
      "spec": "Method#source_location",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#source_location works for methods defined with a Method",
      "group": "Method",
      "spec": "Method#source_location",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#source_location works for methods defined with a block",
      "group": "Method",
      "spec": "Method#source_location",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#source_location works for methods defined with an UnboundMethod",
      "group": "Method",
      "spec": "Method#source_location",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#source_location works for methods whose visibility has been overridden in a subclass",
      "group": "Method",
      "spec": "Method#source_location",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#super_method returns nil when the parent's method is removed",
      "group": "Method",
      "spec": "Method#super_method",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#super_method returns nil when there's no super method in the parent",
      "group": "Method",
      "spec": "Method#super_method",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#super_method returns the method that would be called by super in the method",
      "group": "Method",
      "spec": "Method#super_method",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#to_proc can be called directly and not unwrap arguments like a block",
      "group": "Method",
      "spec": "Method#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#to_proc executes method with whole array (one argument)",
      "group": "Method",
      "spec": "Method#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#to_proc returns a Proc object corresponding to the method",
      "group": "Method",
      "spec": "Method#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#to_proc returns a Proc object with the correct arity",
      "group": "Method",
      "spec": "Method#to_proc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#to_proc returns a Proc which does not depends on the value of self",
      "group": "Method",
      "spec": "Method#to_proc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#to_proc returns a proc that can be used by define_method",
      "group": "Method",
      "spec": "Method#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#to_proc returns a proc that can be yielded to",
      "group": "Method",
      "spec": "Method#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#to_proc returns a proc that can receive a block",
      "group": "Method",
      "spec": "Method#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#to_proc returns a proc that properly invokes module methods with super",
      "group": "Method",
      "spec": "Method#to_proc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#to_proc returns a proc whose binding has the same receiver as the method",
      "group": "Method",
      "spec": "Method#to_proc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Method#to_proc should correct handle arguments (unwrap)",
      "group": "Method",
      "spec": "Method#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#to_s returns a String",
      "group": "Method",
      "spec": "Method#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#to_s returns a String containing 'Method'",
      "group": "Method",
      "spec": "Method#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#to_s returns a String containing the Module the method is defined in",
      "group": "Method",
      "spec": "Method#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#to_s returns a String containing the Module the method is referenced from",
      "group": "Method",
      "spec": "Method#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#to_s returns a String containing the method name",
      "group": "Method",
      "spec": "Method#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#to_s returns a String for methods defined with attr_accessor",
      "group": "Method",
      "spec": "Method#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#unbind rebinding UnboundMethod to Method's obj produces exactly equivalent Methods",
      "group": "Method",
      "spec": "Method#unbind",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#unbind returns a String containing 'UnboundMethod'",
      "group": "Method",
      "spec": "Method#unbind",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#unbind returns a String containing the Module the method is defined in",
      "group": "Method",
      "spec": "Method#unbind",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#unbind returns a String containing the Module the method is referenced from",
      "group": "Method",
      "spec": "Method#unbind",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#unbind returns a String containing the method name",
      "group": "Method",
      "spec": "Method#unbind",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Method#unbind returns an UnboundMethod",
      "group": "Method",
      "spec": "Method#unbind",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#define_singleton_method defines the given method as an class method with the given name in self",
      "group": "Module",
      "spec": "Module#define_singleton_method",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#deprecate_constant accepts multiple symbols and strings as constant names",
      "group": "Module",
      "spec": "Module#deprecate_constant",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#deprecate_constant raises a NameError when given an undefined name",
      "group": "Module",
      "spec": "Module#deprecate_constant",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#deprecate_constant returns self",
      "group": "Module",
      "spec": "Module#deprecate_constant",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#deprecate_constant when accessing the deprecated module passes the accessing",
      "group": "Module",
      "spec": "Module#deprecate_constant",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#deprecate_constant when accessing the deprecated module warns with a message",
      "group": "Module",
      "spec": "Module#deprecate_constant",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#initialize_copy should produce a duped module with inspectable class methods",
      "group": "Module",
      "spec": "Module#initialize_copy",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#initialize_copy should retain singleton methods when duped",
      "group": "Module",
      "spec": "Module#initialize_copy",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#name changes when the module is reachable through a constant path",
      "group": "Module",
      "spec": "Module#name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#name is nil for an anonymous module",
      "group": "Module",
      "spec": "Module#name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#name is nil when assigned to a constant in an anonymous module",
      "group": "Module",
      "spec": "Module#name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#name is not modified when assigned to a different anonymous module",
      "group": "Module",
      "spec": "Module#name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#name is not modified when assigning to a new constant after it has been accessed",
      "group": "Module",
      "spec": "Module#name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#name is not nil for a nested module created with the module keyword",
      "group": "Module",
      "spec": "Module#name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#name is set after it is removed from a constant",
      "group": "Module",
      "spec": "Module#name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#name is set after it is removed from a constant under an anonymous module",
      "group": "Module",
      "spec": "Module#name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#name is set when a nested module is opened with the module keyword",
      "group": "Module",
      "spec": "Module#name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#name is set when assigning to a constant",
      "group": "Module",
      "spec": "Module#name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#name is set when opened with the module keyword",
      "group": "Module",
      "spec": "Module#name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#name is set when the anonymous outer module name is set",
      "group": "Module",
      "spec": "Module#name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#name is set with a conditional assignment to a constant",
      "group": "Module",
      "spec": "Module#name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#name is set with a conditional assignment to a nested constant",
      "group": "Module",
      "spec": "Module#name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#name preserves the encoding in which the class was defined",
      "group": "Module",
      "spec": "Module#name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#name returns a mutable string",
      "group": "Module",
      "spec": "Module#name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#name returns a mutable string that when mutated does not modify the original module name",
      "group": "Module",
      "spec": "Module#name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#prepended is a private method",
      "group": "Module",
      "spec": "Module#prepended",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#prepended is invoked when self is prepended to another module or class",
      "group": "Module",
      "spec": "Module#prepended",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#private_constant accepts multiple names",
      "group": "Module",
      "spec": "Module#private_constant",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#private_constant accepts strings as constant names",
      "group": "Module",
      "spec": "Module#private_constant",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#private_constant can only be passed constant names defined in the target (self) module",
      "group": "Module",
      "spec": "Module#private_constant",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#public_constant accepts multiple names",
      "group": "Module",
      "spec": "Module#public_constant",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#public_constant accepts strings as constant names",
      "group": "Module",
      "spec": "Module#public_constant",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#public_constant can only be passed constant names defined in the target (self) module",
      "group": "Module",
      "spec": "Module#public_constant",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#refine accepts a module as argument",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine adds methods defined in its block to the anonymous module's public instance methods",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine and alias aliases a method within a refinement module, but not outside it",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine and alias_method aliases a method within a refinement module, but not outside it",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine applies refinements to calls in the refine block",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine does not apply refinements to external scopes not using the module",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine does not list methods defined only in refinement",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine does not make available methods from another refinement module",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine does not override methods in subclasses",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine doesn't apply refinements outside the refine block",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine for methods accessed indirectly is honored by &",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine for methods accessed indirectly is honored by BasicObject#__send__",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine for methods accessed indirectly is honored by Kernel#binding",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine for methods accessed indirectly is honored by Kernel#public_send",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine for methods accessed indirectly is honored by Kernel#respond_to?",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine for methods accessed indirectly is honored by Kernel#send",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine for methods accessed indirectly is honored by Symbol#to_proc",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine for methods accessed indirectly is honored by string interpolation",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine for methods accessed indirectly is not honored by Kernel#instance_method",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine for methods accessed indirectly is not honored by Kernel#method",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine makes available all refinements from the same module",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine method lookup looks in included modules from the refinement then",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine method lookup looks in prepended modules from the refinement first",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine method lookup looks in refinement then",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine method lookup looks in the class then",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine method lookup looks in the object singleton class first",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine module inclusion activates all refinements from all ancestors",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine module inclusion overrides methods of ancestors by methods in descendants",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine raises ArgumentError if not given a block",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine raises ArgumentError if not passed an argument",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine raises TypeError if not passed a class",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine returns created anonymous module",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine runs its block in an anonymous module",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine uses the same anonymous module for future refines of the same class",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine when super is called in a refinement looks in the included to refinery module",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine when super is called in a refinement looks in the refined class",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#refine when super is called in a refinement looks in the refined class even if there is another active refinement",
      "group": "Module",
      "spec": "Module#refine",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#singleton_class? returns false for other classes",
      "group": "Module",
      "spec": "Module#singleton_class?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#singleton_class? returns true for singleton classes",
      "group": "Module",
      "spec": "Module#singleton_class?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#singleton_class? with singleton values returns false for false's singleton class",
      "group": "Module",
      "spec": "Module#singleton_class?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#singleton_class? with singleton values returns false for nil's singleton class",
      "group": "Module",
      "spec": "Module#singleton_class?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#singleton_class? with singleton values returns false for true's singleton class",
      "group": "Module",
      "spec": "Module#singleton_class?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#using accepts module as argument",
      "group": "Module",
      "spec": "Module#using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#using accepts module without refinements",
      "group": "Module",
      "spec": "Module#using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#using activates refinement even for existed objects",
      "group": "Module",
      "spec": "Module#using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#using activates updates when refinement reopens later",
      "group": "Module",
      "spec": "Module#using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#using does not accept class",
      "group": "Module",
      "spec": "Module#using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#using imports class refinements from module into the current class/module",
      "group": "Module",
      "spec": "Module#using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#using raises TypeError if passed something other than module",
      "group": "Module",
      "spec": "Module#using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#using raises error in method scope",
      "group": "Module",
      "spec": "Module#using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#using returns self",
      "group": "Module",
      "spec": "Module#using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#using scope of refinement is active for method defined in a scope wherever it's called",
      "group": "Module",
      "spec": "Module#using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#using scope of refinement is active until the end of current class/module",
      "group": "Module",
      "spec": "Module#using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#using scope of refinement is not active before the `using` call",
      "group": "Module",
      "spec": "Module#using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#using scope of refinement is not active for code defined outside the current scope",
      "group": "Module",
      "spec": "Module#using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#using scope of refinement is not active if `using` call is not evaluated",
      "group": "Module",
      "spec": "Module#using",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module#using scope of refinement is not active when class/module reopens",
      "group": "Module",
      "spec": "Module#using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module#using works in classes too",
      "group": "Module",
      "spec": "Module#using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Module.allocate returns a fully-formed instance of Module",
      "group": "Module",
      "spec": "Module.allocate",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Module.allocate returns an instance of Module",
      "group": "Module",
      "spec": "Module.allocate",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:MonitorMixin#mon_initialize can be called in initialize_copy to get a new Mutex and used with synchronize",
      "group": "MonitorMixin",
      "spec": "MonitorMixin#mon_initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NameError is a superclass of NoMethodError",
      "group": "NameError",
      "spec": "NameError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NameError#name returns a class variable name as a symbol",
      "group": "NameError",
      "spec": "NameError#name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NameError#name returns a constant name as a symbol",
      "group": "NameError",
      "spec": "NameError#name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NameError#name returns a constant name without namespace as a symbol",
      "group": "NameError",
      "spec": "NameError#name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NameError#name returns a method name as a symbol",
      "group": "NameError",
      "spec": "NameError#name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NameError#name returns the first argument passed to the method when a NameError is raised from #class_variable_get",
      "group": "NameError",
      "spec": "NameError#name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NameError#name returns the first argument passed to the method when a NameError is raised from #instance_variable_get",
      "group": "NameError",
      "spec": "NameError#name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NameError#receiver raises an ArgumentError when the receiver is none",
      "group": "NameError",
      "spec": "NameError#receiver",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NameError#receiver returns a class when an undefined class variable is called in a subclass' namespace",
      "group": "NameError",
      "spec": "NameError#receiver",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NameError#receiver returns a class when an undefined constant is called",
      "group": "NameError",
      "spec": "NameError#receiver",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NameError#receiver returns the Object class when an undefined class variable is called",
      "group": "NameError",
      "spec": "NameError#receiver",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NameError#receiver returns the Object class when an undefined constant is called without namespace",
      "group": "NameError",
      "spec": "NameError#receiver",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NameError#receiver returns the object that raised the exception",
      "group": "NameError",
      "spec": "NameError#receiver",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NameError#receiver returns the receiver when raised from #class_variable_get",
      "group": "NameError",
      "spec": "NameError#receiver",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NameError#receiver returns the receiver when raised from #instance_variable_get",
      "group": "NameError",
      "spec": "NameError#receiver",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NameError#to_s needs to be reviewed for spec completeness",
      "group": "NameError",
      "spec": "NameError#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NameError.new accepts a :receiver keyword argument",
      "group": "NameError",
      "spec": "NameError.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NameError.new should take optional name argument",
      "group": "NameError",
      "spec": "NameError.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NilClass .allocate raises a TypeError",
      "group": "NilClass",
      "spec": "NilClass",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NilClass .new is undefined",
      "group": "NilClass",
      "spec": "NilClass",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NilClass#& returns false",
      "group": "NilClass",
      "spec": "NilClass#&",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NilClass#=~ returns nil matching any object",
      "group": "NilClass",
      "spec": "NilClass#=~",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NilClass#^ returns false if other is nil or false, otherwise true",
      "group": "NilClass",
      "spec": "NilClass#^",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NilClass#dup returns self",
      "group": "NilClass",
      "spec": "NilClass#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NilClass#inspect returns the string 'nil'",
      "group": "NilClass",
      "spec": "NilClass#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NilClass#nil? returns true",
      "group": "NilClass",
      "spec": "NilClass#nil?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NilClass#rationalize ignores a single argument",
      "group": "NilClass",
      "spec": "NilClass#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NilClass#rationalize raises ArgumentError when passed more than one argument",
      "group": "NilClass",
      "spec": "NilClass#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NilClass#rationalize returns 0/1",
      "group": "NilClass",
      "spec": "NilClass#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NilClass#to_a returns an empty array",
      "group": "NilClass",
      "spec": "NilClass#to_a",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NilClass#to_c returns Complex(0, 0)",
      "group": "NilClass",
      "spec": "NilClass#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NilClass#to_f does not cause NilClass to be coerced to Float",
      "group": "NilClass",
      "spec": "NilClass#to_f",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NilClass#to_f returns 0.0",
      "group": "NilClass",
      "spec": "NilClass#to_f",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NilClass#to_h returns an empty hash",
      "group": "NilClass",
      "spec": "NilClass#to_h",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NilClass#to_i does not cause NilClass to be coerced to Fixnum",
      "group": "NilClass",
      "spec": "NilClass#to_i",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NilClass#to_i returns 0",
      "group": "NilClass",
      "spec": "NilClass#to_i",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NilClass#to_r returns 0/1",
      "group": "NilClass",
      "spec": "NilClass#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NilClass#to_s returns the string ''",
      "group": "NilClass",
      "spec": "NilClass#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NilClass#| returns false if other is nil or false, otherwise true",
      "group": "NilClass",
      "spec": "NilClass#|",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NoMethodError#args needs to be reviewed for spec completeness",
      "group": "NoMethodError",
      "spec": "NoMethodError#args",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NoMethodError#args returns an array with the same elements as passed to the method",
      "group": "NoMethodError",
      "spec": "NoMethodError#args",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NoMethodError#args returns an empty array if the caller method had no arguments",
      "group": "NoMethodError",
      "spec": "NoMethodError#args",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NoMethodError#message calls receiver.inspect only when calling Exception#message",
      "group": "NoMethodError",
      "spec": "NoMethodError#message",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NoMethodError#message fallbacks to a simpler representation of the receiver when receiver.inspect raises an exception",
      "group": "NoMethodError",
      "spec": "NoMethodError#message",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NoMethodError#message for an protected method match /protected method/",
      "group": "NoMethodError",
      "spec": "NoMethodError#message",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NoMethodError#message for an undefined method match /undefined method/",
      "group": "NoMethodError",
      "spec": "NoMethodError#message",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NoMethodError#message for private method match /private method/",
      "group": "NoMethodError",
      "spec": "NoMethodError#message",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NoMethodError.new accepts a :receiver keyword argument",
      "group": "NoMethodError",
      "spec": "NoMethodError.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:NoMethodError.new allows passing method args",
      "group": "NoMethodError",
      "spec": "NoMethodError.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:NoMethodError.new does not require a name",
      "group": "NoMethodError",
      "spec": "NoMethodError.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric includes Comparable",
      "group": "Numeric",
      "spec": "Numeric",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#% returns self - other * self.div(other)",
      "group": "Numeric",
      "spec": "Numeric#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#+@ returns self",
      "group": "Numeric",
      "spec": "Numeric#+@",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#-@ returns the same value with opposite sign (floats)",
      "group": "Numeric",
      "spec": "Numeric#-@",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#-@ returns the same value with opposite sign (integers)",
      "group": "Numeric",
      "spec": "Numeric#-@",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#-@ returns the same value with opposite sign (two complement)",
      "group": "Numeric",
      "spec": "Numeric#-@",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#-@ with a Numeric subclass calls #coerce(0) on self, then subtracts the second element of the result from the first",
      "group": "Numeric",
      "spec": "Numeric#-@",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#<=> returns 0 if self equals other",
      "group": "Numeric",
      "spec": "Numeric#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#<=> returns nil if self does not equal other",
      "group": "Numeric",
      "spec": "Numeric#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#<=> with subclasses of Numeric is called when instances are compared with #<",
      "group": "Numeric",
      "spec": "Numeric#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#<=> with subclasses of Numeric is called when instances are compared with #<=",
      "group": "Numeric",
      "spec": "Numeric#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#<=> with subclasses of Numeric is called when instances are compared with #>",
      "group": "Numeric",
      "spec": "Numeric#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#<=> with subclasses of Numeric is called when instances are compared with #>=",
      "group": "Numeric",
      "spec": "Numeric#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#abs returns self when self is greater than 0",
      "group": "Numeric",
      "spec": "Numeric#abs",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#abs returns self#@- when self is less than 0",
      "group": "Numeric",
      "spec": "Numeric#abs",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#abs2 calls #* on self",
      "group": "Numeric",
      "spec": "Numeric#abs2",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#abs2 returns NaN when self is NaN",
      "group": "Numeric",
      "spec": "Numeric#abs2",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#abs2 returns the square of the absolute value of self",
      "group": "Numeric",
      "spec": "Numeric#abs2",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#angle returns 0 if positive",
      "group": "Numeric",
      "spec": "Numeric#angle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#angle returns Pi if negative",
      "group": "Numeric",
      "spec": "Numeric#angle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#angle with a Numeric subclass returns 0 if self#<(0) returns false",
      "group": "Numeric",
      "spec": "Numeric#angle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#angle with a Numeric subclass returns Pi if self#<(0) returns true",
      "group": "Numeric",
      "spec": "Numeric#angle",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#arg returns 0 if positive",
      "group": "Numeric",
      "spec": "Numeric#arg",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#arg returns Pi if negative",
      "group": "Numeric",
      "spec": "Numeric#arg",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#arg with a Numeric subclass returns 0 if self#<(0) returns false",
      "group": "Numeric",
      "spec": "Numeric#arg",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#arg with a Numeric subclass returns Pi if self#<(0) returns true",
      "group": "Numeric",
      "spec": "Numeric#arg",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#ceil converts self to a Float (using #to_f) and returns the #ceil'ed result",
      "group": "Numeric",
      "spec": "Numeric#ceil",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#coerce raise TypeError if they are instances of different classes and other does not respond to #to_f",
      "group": "Numeric",
      "spec": "Numeric#coerce",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#coerce raises a TypeError when passed a Symbol",
      "group": "Numeric",
      "spec": "Numeric#coerce",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#coerce raises a TypeError when passed a boolean",
      "group": "Numeric",
      "spec": "Numeric#coerce",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#coerce raises a TypeError when passed nil",
      "group": "Numeric",
      "spec": "Numeric#coerce",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#coerce raises an ArgumentError when passed a non-numeric String",
      "group": "Numeric",
      "spec": "Numeric#coerce",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#coerce returns [other, self] if self and other are instances of the same class",
      "group": "Numeric",
      "spec": "Numeric#coerce",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#coerce returns [other.to_f, self.to_f] if self and other are instances of different classes",
      "group": "Numeric",
      "spec": "Numeric#coerce",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#conj returns self",
      "group": "Numeric",
      "spec": "Numeric#conj",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#conjugate returns self",
      "group": "Numeric",
      "spec": "Numeric#conjugate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#denominator returns 1",
      "group": "Numeric",
      "spec": "Numeric#denominator",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#denominator works with Numeric subclasses",
      "group": "Numeric",
      "spec": "Numeric#denominator",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#div calls self#/ with other, then returns the #floor'ed result",
      "group": "Numeric",
      "spec": "Numeric#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#div raises ZeroDivisionError for 0",
      "group": "Numeric",
      "spec": "Numeric#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#divmod returns [quotient, modulus], with quotient being obtained as in Numeric#div then #floor and modulus being obtained by calling self#- with quotient * other",
      "group": "Numeric",
      "spec": "Numeric#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#eql? returns false if self's and other's types don't match",
      "group": "Numeric",
      "spec": "Numeric#eql?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#eql? returns the result of calling self#== with other when self's and other's types match",
      "group": "Numeric",
      "spec": "Numeric#eql?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#fdiv coerces other with #to_f",
      "group": "Numeric",
      "spec": "Numeric#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#fdiv coerces self with #to_f",
      "group": "Numeric",
      "spec": "Numeric#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#fdiv performs floating-point division",
      "group": "Numeric",
      "spec": "Numeric#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#fdiv returns Infinity if other is 0",
      "group": "Numeric",
      "spec": "Numeric#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#fdiv returns NaN if other is NaN",
      "group": "Numeric",
      "spec": "Numeric#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#fdiv returns a Float",
      "group": "Numeric",
      "spec": "Numeric#fdiv",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#finite? returns true by default",
      "group": "Numeric",
      "spec": "Numeric#finite?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#floor converts self to a Float (using #to_f) and returns the #floor'ed result",
      "group": "Numeric",
      "spec": "Numeric#floor",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#i returns a Complex object",
      "group": "Numeric",
      "spec": "Numeric#i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#i sets the imaginary part to self",
      "group": "Numeric",
      "spec": "Numeric#i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#i sets the real part to 0",
      "group": "Numeric",
      "spec": "Numeric#i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#imag raises an ArgumentError if given any arguments",
      "group": "Numeric",
      "spec": "Numeric#imag",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#imag returns 0",
      "group": "Numeric",
      "spec": "Numeric#imag",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#imaginary raises an ArgumentError if given any arguments",
      "group": "Numeric",
      "spec": "Numeric#imaginary",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#imaginary returns 0",
      "group": "Numeric",
      "spec": "Numeric#imaginary",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#infinite? returns nil by default",
      "group": "Numeric",
      "spec": "Numeric#infinite?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#integer? returns false",
      "group": "Numeric",
      "spec": "Numeric#integer?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#magnitude returns self when self is greater than 0",
      "group": "Numeric",
      "spec": "Numeric#magnitude",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#magnitude returns self#@- when self is less than 0",
      "group": "Numeric",
      "spec": "Numeric#magnitude",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#modulo returns self - other * self.div(other)",
      "group": "Numeric",
      "spec": "Numeric#modulo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#negative? on negative numbers returns true",
      "group": "Numeric",
      "spec": "Numeric#negative?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#negative? on positive numbers returns false",
      "group": "Numeric",
      "spec": "Numeric#negative?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#negative? on zero returns false",
      "group": "Numeric",
      "spec": "Numeric#negative?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#negative? returns false if self is greater than 0",
      "group": "Numeric",
      "spec": "Numeric#negative?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#negative? returns true if self is less than 0",
      "group": "Numeric",
      "spec": "Numeric#negative?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#nonzero? returns nil if self#zero? is true",
      "group": "Numeric",
      "spec": "Numeric#nonzero?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#nonzero? returns self if self#zero? is false",
      "group": "Numeric",
      "spec": "Numeric#nonzero?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#numerator converts self to a Rational object then returns its numerator",
      "group": "Numeric",
      "spec": "Numeric#numerator",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#numerator works with Numeric subclasses",
      "group": "Numeric",
      "spec": "Numeric#numerator",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#phase returns 0 if positive",
      "group": "Numeric",
      "spec": "Numeric#phase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#phase returns Pi if negative",
      "group": "Numeric",
      "spec": "Numeric#phase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#phase with a Numeric subclass returns 0 if self#<(0) returns false",
      "group": "Numeric",
      "spec": "Numeric#phase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#phase with a Numeric subclass returns Pi if self#<(0) returns true",
      "group": "Numeric",
      "spec": "Numeric#phase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#polar returns [NaN, NaN] if self is NaN",
      "group": "Numeric",
      "spec": "Numeric#polar",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#polar returns a two-element Array",
      "group": "Numeric",
      "spec": "Numeric#polar",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#polar sets the first value to the absolute value of self",
      "group": "Numeric",
      "spec": "Numeric#polar",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#polar sets the last value to 0 if self is positive",
      "group": "Numeric",
      "spec": "Numeric#polar",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#polar sets the last value to Pi if self is negative",
      "group": "Numeric",
      "spec": "Numeric#polar",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#positive? on negative numbers returns false",
      "group": "Numeric",
      "spec": "Numeric#positive?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#positive? on positive numbers returns true",
      "group": "Numeric",
      "spec": "Numeric#positive?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#positive? on zero returns false",
      "group": "Numeric",
      "spec": "Numeric#positive?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#positive? returns false if self is less than 0",
      "group": "Numeric",
      "spec": "Numeric#positive?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#positive? returns true if self is greater than 0",
      "group": "Numeric",
      "spec": "Numeric#positive?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#quo calls #to_r to convert the object to a Rational",
      "group": "Numeric",
      "spec": "Numeric#quo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#quo raises a TypeError of #to_r does not return a Rational",
      "group": "Numeric",
      "spec": "Numeric#quo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#quo raises a TypeError when given a non-Integer",
      "group": "Numeric",
      "spec": "Numeric#quo",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#quo raises a ZeroDivisionError when the given Integer is 0",
      "group": "Numeric",
      "spec": "Numeric#quo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#quo returns the result of calling self#/ with other",
      "group": "Numeric",
      "spec": "Numeric#quo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#quo returns the result of self divided by the given Bignum as a Float",
      "group": "Numeric",
      "spec": "Numeric#quo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#quo returns the result of self divided by the given Float as a Float",
      "group": "Numeric",
      "spec": "Numeric#quo",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#quo returns the result of self divided by the given Integer as a Rational",
      "group": "Numeric",
      "spec": "Numeric#quo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#real raises an ArgumentError if given any arguments",
      "group": "Numeric",
      "spec": "Numeric#real",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#real returns self",
      "group": "Numeric",
      "spec": "Numeric#real",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#real? returns true",
      "group": "Numeric",
      "spec": "Numeric#real?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#rect raises an ArgumentError if given any arguments",
      "group": "Numeric",
      "spec": "Numeric#rect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#rect returns 0 as the last element",
      "group": "Numeric",
      "spec": "Numeric#rect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#rect returns a two-element Array",
      "group": "Numeric",
      "spec": "Numeric#rect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#rect returns an Array",
      "group": "Numeric",
      "spec": "Numeric#rect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#rect returns self as the first element",
      "group": "Numeric",
      "spec": "Numeric#rect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#rectangular raises an ArgumentError if given any arguments",
      "group": "Numeric",
      "spec": "Numeric#rectangular",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#rectangular returns 0 as the last element",
      "group": "Numeric",
      "spec": "Numeric#rectangular",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#rectangular returns a two-element Array",
      "group": "Numeric",
      "spec": "Numeric#rectangular",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#rectangular returns an Array",
      "group": "Numeric",
      "spec": "Numeric#rectangular",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#rectangular returns self as the first element",
      "group": "Numeric",
      "spec": "Numeric#rectangular",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#remainder returns the result of calling self#% with other - other if self is greater than 0 and other is less than 0",
      "group": "Numeric",
      "spec": "Numeric#remainder",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#remainder returns the result of calling self#% with other - other if self is less than 0 and other is greater than 0",
      "group": "Numeric",
      "spec": "Numeric#remainder",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#remainder returns the result of calling self#% with other if self and other are greater than 0",
      "group": "Numeric",
      "spec": "Numeric#remainder",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#remainder returns the result of calling self#% with other if self and other are less than 0",
      "group": "Numeric",
      "spec": "Numeric#remainder",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#remainder returns the result of calling self#% with other if self is 0",
      "group": "Numeric",
      "spec": "Numeric#remainder",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#round converts self to a Float (using #to_f) and returns the #round'ed result",
      "group": "Numeric",
      "spec": "Numeric#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#singleton_method_added raises a TypeError when trying to define a singleton method on a Numeric",
      "group": "Numeric",
      "spec": "Numeric#singleton_method_added",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments defaults to an infinite limit with a step size of 1 for Integers",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments defaults to an infinite limit with a step size of 1.0 for Floats",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments defaults to step = 1",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments does not rescue ArgumentError exceptions",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments does not rescue TypeError exceptions",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments doesn't raise an error when step is 0",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments doesn't raise an error when step is 0.0",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments should loop over self when step is 0 or 0.0",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a Infinity stop and a negative step does not yield when self is negative infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a Infinity stop and a negative step does not yield when self is positive infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a Infinity stop and a positive step does not yield when self is infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a negative Infinity step does not yield when self > stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a negative Infinity step does not yield when stop is Infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a negative Infinity step yields once if self > stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a negative Infinity step yields once if stop is -Infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a negative Infinity step yields once when self and stop are Infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a negative Infinity step yields once when self equals stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a negative Infinity stop and a negative step does not yield when self is negative infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a negative Infinity stop and a positive step does not yield when self is negative infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a negative step does not yield when self is less than stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a negative step is careful about not yielding a value smaller than limit",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a negative step yields once when self equals stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a negative step yields while decreasing self by step while self > stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a positive Infinity step does not yield when self > stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a positive Infinity step does not yield when stop is -Infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a positive Infinity step yields once if self < stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a positive Infinity step yields once when self and stop are Infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a positive Infinity step yields once when self equals stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a positive Infinity step yields once when stop is Infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a positive step does not yield when self is greater than stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a positive step is careful about not yielding a value greater than limit",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a positive step yields once when self equals stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float with a positive step yields while increasing self by step while < stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float yields Floats even if only self is a Float",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float yields Floats even if only step is a Float",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when at least one of self, stop or step is a Float yields Floats even if only stop is a Float",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when no block is given returned Enumerator size should return 1 when the both limit and step are -Float::INFINITY",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when no block is given returned Enumerator size should return 1 when the both limit and step are Float::INFINITY",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when no block is given returned Enumerator size should return infinity_value when ascending towards a limit of Float::INFINITY",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when no block is given returned Enumerator size should return infinity_value when descending towards a limit of -Float::INFINITY",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when no block is given returned Enumerator size should return infinity_value when limit is nil",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when no block is given returned Enumerator size should return infinity_value when step is 0",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when no block is given returned Enumerator size should return infinity_value when step is 0.0",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when self, stop and step are Fixnums with a negative step does not yield when self is less than stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when self, stop and step are Fixnums with a negative step yields once when self equals stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when self, stop and step are Fixnums with a negative step yields while decreasing self by step until stop is reached",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when self, stop and step are Fixnums with a positive step does not yield when self is greater than stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when self, stop and step are Fixnums with a positive step yields once when self equals stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when self, stop and step are Fixnums with a positive step yields while increasing self by step until stop is reached",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when self, stop and step are Fixnums yields only Fixnums",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when step is a String with self and stop as Fixnums raises an ArgumentError when step is a numeric representation",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when step is a String with self and stop as Fixnums raises an ArgumentError with step as an alphanumeric string",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when step is a String with self and stop as Floats raises an ArgumentError when step is a numeric representation",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with keyword arguments when step is a String with self and stop as Floats raises an ArgumentError with step as an alphanumeric string",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments defaults to an infinite limit with a step size of 1 for Integers",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments defaults to an infinite limit with a step size of 1.0 for Floats",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments defaults to step = 1",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments does not rescue ArgumentError exceptions",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments does not rescue TypeError exceptions",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments doesn't raise an error when step is 0",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments doesn't raise an error when step is 0.0",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments raises a ArgumentError when limit and to are defined",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments raises a ArgumentError when step and by are defined",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments should loop over self when step is 0 or 0.0",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a Infinity stop and a negative step does not yield when self is negative infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a Infinity stop and a negative step does not yield when self is positive infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a Infinity stop and a positive step does not yield when self is infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a negative Infinity step does not yield when self > stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a negative Infinity step does not yield when stop is Infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a negative Infinity step yields once if self > stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a negative Infinity step yields once if stop is -Infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a negative Infinity step yields once when self and stop are Infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a negative Infinity step yields once when self equals stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a negative Infinity stop and a negative step does not yield when self is negative infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a negative Infinity stop and a positive step does not yield when self is negative infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a negative step does not yield when self is less than stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a negative step is careful about not yielding a value smaller than limit",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a negative step yields once when self equals stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a negative step yields while decreasing self by step while self > stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a positive Infinity step does not yield when self > stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a positive Infinity step does not yield when stop is -Infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a positive Infinity step yields once if self < stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a positive Infinity step yields once when self and stop are Infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a positive Infinity step yields once when self equals stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a positive Infinity step yields once when stop is Infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a positive step does not yield when self is greater than stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a positive step is careful about not yielding a value greater than limit",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a positive step yields once when self equals stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float with a positive step yields while increasing self by step while < stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float yields Floats even if only self is a Float",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float yields Floats even if only step is a Float",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when at least one of self, stop or step is a Float yields Floats even if only stop is a Float",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when no block is given returned Enumerator size should return infinity_value when step is 0",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when no block is given returned Enumerator size should return infinity_value when step is 0.0",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when self, stop and step are Fixnums with a negative step does not yield when self is less than stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when self, stop and step are Fixnums with a negative step yields once when self equals stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when self, stop and step are Fixnums with a negative step yields while decreasing self by step until stop is reached",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when self, stop and step are Fixnums with a positive step does not yield when self is greater than stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when self, stop and step are Fixnums with a positive step yields once when self equals stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when self, stop and step are Fixnums with a positive step yields while increasing self by step until stop is reached",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when self, stop and step are Fixnums yields only Fixnums",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when step is a String with self and stop as Fixnums raises an ArgumentError when step is a numeric representation",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when step is a String with self and stop as Fixnums raises an ArgumentError with step as an alphanumeric string",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when step is a String with self and stop as Floats raises an ArgumentError when step is a numeric representation",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with mixed arguments when step is a String with self and stop as Floats raises an ArgumentError with step as an alphanumeric string",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args defaults to an infinite limit with a step size of 1 for Integers",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args defaults to an infinite limit with a step size of 1.0 for Floats",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args defaults to step = 1",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args does not rescue ArgumentError exceptions",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args does not rescue TypeError exceptions",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args raises an ArgumentError when step is 0",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args raises an ArgumentError when step is 0.0",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a Infinity stop and a negative step does not yield when self is negative infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a Infinity stop and a negative step does not yield when self is positive infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a Infinity stop and a positive step does not yield when self is infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a negative Infinity step does not yield when self > stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a negative Infinity step does not yield when stop is Infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a negative Infinity step yields once if self > stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a negative Infinity step yields once if stop is -Infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a negative Infinity step yields once when self and stop are Infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a negative Infinity step yields once when self equals stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a negative Infinity stop and a negative step does not yield when self is negative infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a negative Infinity stop and a positive step does not yield when self is negative infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a negative step does not yield when self is less than stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a negative step is careful about not yielding a value smaller than limit",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a negative step yields once when self equals stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a negative step yields while decreasing self by step while self > stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a positive Infinity step does not yield when self > stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a positive Infinity step does not yield when stop is -Infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a positive Infinity step yields once if self < stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a positive Infinity step yields once when self and stop are Infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a positive Infinity step yields once when self equals stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a positive Infinity step yields once when stop is Infinity",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a positive step does not yield when self is greater than stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a positive step is careful about not yielding a value greater than limit",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a positive step yields once when self equals stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float with a positive step yields while increasing self by step while < stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float yields Floats even if only self is a Float",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float yields Floats even if only step is a Float",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when at least one of self, stop or step is a Float yields Floats even if only stop is a Float",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when self, stop and step are Fixnums with a negative step does not yield when self is less than stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when self, stop and step are Fixnums with a negative step yields once when self equals stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when self, stop and step are Fixnums with a negative step yields while decreasing self by step until stop is reached",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when self, stop and step are Fixnums with a positive step does not yield when self is greater than stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when self, stop and step are Fixnums with a positive step yields once when self equals stop",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when self, stop and step are Fixnums with a positive step yields while increasing self by step until stop is reached",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when self, stop and step are Fixnums yields only Fixnums",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when step is a String with self and stop as Fixnums raises an ArgumentError when step is a numeric representation",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when step is a String with self and stop as Fixnums raises an ArgumentError with step as an alphanumeric string",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when step is a String with self and stop as Floats raises an ArgumentError when step is a numeric representation",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#step with positional args when step is a String with self and stop as Floats raises an ArgumentError with step as an alphanumeric string",
      "group": "Numeric",
      "spec": "Numeric#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#to_int returns self#to_i",
      "group": "Numeric",
      "spec": "Numeric#to_int",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#truncate converts self to a Float (using #to_f) and returns the #truncate'd result",
      "group": "Numeric",
      "spec": "Numeric#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Numeric#zero? returns false if self is not 0",
      "group": "Numeric",
      "spec": "Numeric#zero?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Numeric#zero? returns true if self is 0",
      "group": "Numeric",
      "spec": "Numeric#zero?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc as a block pass argument remains the same object if re-vivified by the target method",
      "group": "Proc",
      "spec": "Proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc as a block pass argument remains the same object if reconstructed with Proc.new",
      "group": "Proc",
      "spec": "Proc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc as an implicit block pass argument remains the same object if re-vivified by the target method",
      "group": "Proc",
      "spec": "Proc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc as an implicit block pass argument remains the same object if reconstructed with Proc.new",
      "group": "Proc",
      "spec": "Proc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#<< accepts any callable object",
      "group": "Proc",
      "spec": "Proc#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#<< calls passed Proc with arguments and then calls self with result",
      "group": "Proc",
      "spec": "Proc#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#<< composition is a Proc",
      "group": "Proc",
      "spec": "Proc#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#<< composition may accept multiple arguments",
      "group": "Proc",
      "spec": "Proc#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#<< composition passes blocks to the second proc",
      "group": "Proc",
      "spec": "Proc#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#<< raises NoMethodError when called if passed not callable object",
      "group": "Proc",
      "spec": "Proc#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#<< returns a Proc that is the composition of self and the passed Proc",
      "group": "Proc",
      "spec": "Proc#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#<< when called does not try to coerce argument with #to_proc",
      "group": "Proc",
      "spec": "Proc#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#== is not defined",
      "group": "Proc",
      "spec": "Proc#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#== returns false if other is a dup of the original",
      "group": "Proc",
      "spec": "Proc#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#=== can call its block argument declared with a block argument",
      "group": "Proc",
      "spec": "Proc#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#=== can receive block arguments",
      "group": "Proc",
      "spec": "Proc#===",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#=== invokes self",
      "group": "Proc",
      "spec": "Proc#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#=== on a Proc created with Kernel#lambda or Kernel#proc ignores excess arguments when self is a proc",
      "group": "Proc",
      "spec": "Proc#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#=== on a Proc created with Kernel#lambda or Kernel#proc raises an ArgumentError on excess arguments when self is a lambda",
      "group": "Proc",
      "spec": "Proc#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#=== on a Proc created with Kernel#lambda or Kernel#proc raises an ArgumentError on missing arguments when self is a lambda",
      "group": "Proc",
      "spec": "Proc#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#=== on a Proc created with Kernel#lambda or Kernel#proc substitutes nil for missing arguments when self is a proc",
      "group": "Proc",
      "spec": "Proc#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#=== on a Proc created with Kernel#lambda or Kernel#proc treats a single Array argument as a single argument when self is a lambda",
      "group": "Proc",
      "spec": "Proc#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#=== on a Proc created with Kernel#lambda or Kernel#proc treats a single Array argument as a single argument when self is a proc",
      "group": "Proc",
      "spec": "Proc#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#=== on a Proc created with Kernel#lambda or Kernel#proc will call #to_ary on argument and return self if return is nil",
      "group": "Proc",
      "spec": "Proc#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#=== on a Proc created with Proc.new auto-explodes a single Array argument",
      "group": "Proc",
      "spec": "Proc#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#=== on a Proc created with Proc.new replaces missing arguments with nil",
      "group": "Proc",
      "spec": "Proc#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#=== on a Proc created with Proc.new silently ignores extra arguments",
      "group": "Proc",
      "spec": "Proc#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#=== sets self's parameters to the given values",
      "group": "Proc",
      "spec": "Proc#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#=== yields to the block given at declaration and not to the block argument",
      "group": "Proc",
      "spec": "Proc#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#>> accepts any callable object",
      "group": "Proc",
      "spec": "Proc#>>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#>> calls passed Proc with arguments and then calls self with result",
      "group": "Proc",
      "spec": "Proc#>>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#>> composition is a Proc",
      "group": "Proc",
      "spec": "Proc#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#>> composition may accept multiple arguments",
      "group": "Proc",
      "spec": "Proc#>>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#>> composition passes blocks to the first proc",
      "group": "Proc",
      "spec": "Proc#>>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#>> raises NoMethodError when called if passed not callable object",
      "group": "Proc",
      "spec": "Proc#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#>> returns a Proc that is the composition of self and the passed Proc",
      "group": "Proc",
      "spec": "Proc#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#>> when called does not try to coerce argument with #to_proc",
      "group": "Proc",
      "spec": "Proc#>>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#[] can call its block argument declared with a block argument",
      "group": "Proc",
      "spec": "Proc#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#[] can receive block arguments",
      "group": "Proc",
      "spec": "Proc#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#[] invokes self",
      "group": "Proc",
      "spec": "Proc#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#[] sets self's parameters to the given values",
      "group": "Proc",
      "spec": "Proc#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#[] with frozen_string_literals doesn't duplicate frozen strings",
      "group": "Proc",
      "spec": "Proc#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#[] yields to the block given at declaration and not to the block argument",
      "group": "Proc",
      "spec": "Proc#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with -> () { } returns negative values for definition \\n    @a = -> (*) { }\\n          @b = -> (*a) { }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with -> () { } returns negative values for definition \\n    @a = -> (**k, &l) { }\\n          @b= -> (*a, **k) { }\\n          @c = ->(a: 1, b: 2, **k) { }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with -> () { } returns negative values for definition \\n    @a = -> (*a, b) { }\\n          @b = -> (*a, b, c) { }\\n          @c = -> (*a, b, c, d) { }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with -> () { } returns negative values for definition \\n    @a = -> (a, *) { }\\n          @b = -> (a, *b) { }\\n          @c = -> (a, b, *c) { }\\n          @d = -> (a, b, c, *d) { }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with -> () { } returns negative values for definition \\n    @a = -> (a, *b, c) { }\\n          @b = -> (a, b, *c, d, e) { }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with -> () { } returns negative values for definition \\n    @a = -> (a, b=1) { }\\n          @b = -> (a, b, c=1, d=2) { }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with -> () { } returns negative values for definition \\n    @a = -> (a, b=1, *c, d, e:, f: 2, **k, &l) { }\\n          @b = -> (a, b=1, *c, d:, e:, f: 2, **k, &l) { }\\n          @c = -> (a=0, b=1, *c, d, e:, f: 2, **k, &l) { }\\n          @d = -> (a=0, b=1, *c, d:, e:, f: 2, **k, &l) { }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with -> () { } returns negative values for definition \\n    @a = -> (a, b=1, c=2, *d, e, f) { }\\n          @b = -> (a, b, c=1, *d, e, f, g) { }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with -> () { } returns negative values for definition \\n    @a = -> (a: 1) { }\\n          @b = -> (a: 1, b: 2) { }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with -> () { } returns negative values for definition \\n    @a = -> (a=1) { }\\n          @b = -> (a=1, b=2) { }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with -> () { } returns negative values for definition \\n    @a = -> (a=1, *b) { }\\n          @b = -> (a=1, b=2, *c) { }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with -> () { } returns negative values for definition \\n    @a = -> (a=1, b: 2) { }\\n          @b = -> (*a, b: 1) { }\\n          @c = -> (a=1, b: 2) { }\\n          @d = -> (a=1, *b, c: 2, &l) { }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with -> () { } returns positive values for definition \\n    @a = -> ((a, (*b, c))) { }\\n          @b = -> (a, (*b, c), d, (*e), (*)) { }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with -> () { } returns positive values for definition \\n    @a = -> (a) { }\\n          @b = -> (a, b) { }\\n          @c = -> (a, b, c) { }\\n          @d = -> (a, b, c, d) { }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with -> () { } returns positive values for definition \\n    @a = -> (a, b, c:, d: 1) { }\\n          @b = -> (a, b, c:, d: 1, **k, &l) { }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with -> () { } returns positive values for definition \\n    @a = -> (a, b:) { }\\n          @b = -> (a, b:, &l) { }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with -> () { } returns positive values for definition \\n    @a = -> (a:) { }\\n          @b = -> (a:, b:) { }\\n          @c = -> (a: 1, b:, c:, d: 2) { }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with lambda { || } returns negative values for definition \\n    @a = lambda { |(a, (*b, c)), d=1| }\\n          @b = lambda { |a, (*b, c), d, (*e), (*), **k| }\\n          @c = lambda { |a, (b, c), *, d:, e: 2, **| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with lambda { || } returns negative values for definition \\n    @a = lambda { |**k, &l| }\\n          @b = lambda { |*a, **k| }\\n          @c = lambda { |a: 1, b: 2, **k| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with lambda { || } returns negative values for definition \\n    @a = lambda { |*a, b| }\\n          @b = lambda { |*a, b, c| }\\n          @c = lambda { |*a, b, c, d| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with lambda { || } returns negative values for definition \\n    @a = lambda { |*| }\\n          @b = lambda { |*a| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with lambda { || } returns negative values for definition \\n    @a = lambda { |a, *b, c| }\\n          @b = lambda { |a, b, *c, d, e| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with lambda { || } returns negative values for definition \\n    @a = lambda { |a, *| }\\n          @b = lambda { |a, *b| }\\n          @c = lambda { |a, b, *c| }\\n          @d = lambda { |a, b, c, *d| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with lambda { || } returns negative values for definition \\n    @a = lambda { |a, b=1, *c, d, e:, f: 2, **k, &l| }\\n          @b = lambda { |a, b=1, *c, d:, e:, f: 2, **k, &l| }\\n          @c = lambda { |a=0, b=1, *c, d, e:, f: 2, **k, &l| }\\n          @d = lambda { |a=0, b=1, *c, d:, e:, f: 2, **k, &l| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with lambda { || } returns negative values for definition \\n    @a = lambda { |a, b=1, c=2, *d, e, f| }\\n          @b = lambda { |a, b, c=1, *d, e, f, g| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with lambda { || } returns negative values for definition \\n    @a = lambda { |a, b=1| }\\n          @b = lambda { |a, b, c=1, d=2| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with lambda { || } returns negative values for definition \\n    @a = lambda { |a: 1| }\\n          @b = lambda { |a: 1, b: 2| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with lambda { || } returns negative values for definition \\n    @a = lambda { |a=1, *b| }\\n          @b = lambda { |a=1, b=2, *c| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with lambda { || } returns negative values for definition \\n    @a = lambda { |a=1, b: 2| }\\n          @b = lambda { |*a, b: 1| }\\n          @c = lambda { |a=1, b: 2| }\\n          @d = lambda { |a=1, *b, c: 2, &l| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with lambda { || } returns negative values for definition \\n    @a = lambda { |a=1| }\\n          @b = lambda { |a=1, b=2| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with lambda { || } returns positive values for definition \\n    @a = lambda { |a, b, c:, d: 1| }\\n          @b = lambda { |a, b, c:, d: 1, **k, &l| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with lambda { || } returns positive values for definition \\n    @a = lambda { |a, b:| }\\n          @b = lambda { |a, b:, &l| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with lambda { || } returns positive values for definition \\n    @a = lambda { |a:| }\\n          @b = lambda { |a:, b:| }\\n          @c = lambda { |a: 1, b:, c:, d: 2| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with lambda { || } returns positive values for definition \\n    @a = lambda { |a| }\\n          @b = lambda { |a, b| }\\n          @c = lambda { |a, b, c| }\\n          @d = lambda { |a, b, c, d| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with lambda { || } returns zero for definition \\n    @a = lambda { }\\n          @b = lambda { || }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with proc { || } returns negative values for definition \\n    @a = proc { |*a, b: 1| }\\n          @b = proc { |a=1, *b, c: 2, &l| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with proc { || } returns negative values for definition \\n    @a = proc { |*a, b| }\\n          @b = proc { |*a, b, c| }\\n          @c = proc { |*a, b, c, d| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with proc { || } returns negative values for definition \\n    @a = proc { |*| }\\n          @b = proc { |*a| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with proc { || } returns negative values for definition \\n    @a = proc { |a, *b, c| }\\n          @b = proc { |a, b, *c, d, e| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with proc { || } returns negative values for definition \\n    @a = proc { |a, *| }\\n          @b = proc { |a, *b| }\\n          @c = proc { |a, b, *c| }\\n          @d = proc { |a, b, c, *d| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with proc { || } returns negative values for definition \\n    @a = proc { |a, b=1, *c, d, e:, f: 2, **k, &l| }\\n          @b = proc { |a, b=1, *c, d:, e:, f: 2, **k, &l| }\\n          @c = proc { |a=0, b=1, *c, d, e:, f: 2, **k, &l| }\\n          @d = proc { |a=0, b=1, *c, d:, e:, f: 2, **k, &l| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with proc { || } returns negative values for definition \\n    @a = proc { |a, b=1, c=2, *d, e, f| }\\n          @b = proc { |a, b, c=1, *d, e, f, g| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with proc { || } returns negative values for definition \\n    @a = proc { |a=1, *b| }\\n          @b = proc { |a=1, b=2, *c| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with proc { || } returns positive values for definition \\n    @a = lambda { |a:| }\\n          @b = lambda { |a:, b:| }\\n          @c = lambda { |a: 1, b:, c:, d: 2| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with proc { || } returns positive values for definition \\n    @a = proc { |(a, (*b, c)), d=1| }\\n          @b = proc { |a, (*b, c), d, (*e), (*), **k| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with proc { || } returns positive values for definition \\n    @a = proc { |a, b, c:, d: 1| }\\n          @b = proc { |a, b, c:, d: 1, **k, &l| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with proc { || } returns positive values for definition \\n    @a = proc { |a, b:| }\\n          @b = proc { |a, b:, &l| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with proc { || } returns positive values for definition \\n    @a = proc { |a, b=1| }\\n          @b = proc { |a, b, c=1, d=2| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with proc { || } returns positive values for definition \\n    @a = proc { |a| }\\n          @b = proc { |a, b| }\\n          @c = proc { |a, b, c| }\\n          @d = proc { |a, b, c, d| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with proc { || } returns zero for definition \\n    @a = proc { |**k, &l| }\\n          @b = proc { |a: 1, b: 2, **k| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with proc { || } returns zero for definition \\n    @a = proc { |a: 1| }\\n          @b = proc { |a: 1, b: 2| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with proc { || } returns zero for definition \\n    @a = proc { |a=1, b: 2| }\\n          @b = proc { |a=1, b: 2| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with proc { || } returns zero for definition \\n    @a = proc { |a=1| }\\n          @b = proc { |a=1, b=2| }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"Proc#arity for instances created with proc { || } returns zero for definition \\n    @a = proc { }\\n          @b = proc { || }\"",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#arity for instances created with -> () { } returns negative values for definition '@a = -> (a=1, *b, c:, d: 2, **k, &l) { }'",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#arity for instances created with -> () { } returns zero for definition '@a = -> (&b) {}'",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#arity for instances created with -> () { } returns zero for definition '@a = -> () {}'",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#arity for instances created with lambda { || } returns negative values for definition '@a = lambda { |a=1, *b, c:, d: 2, **k, &l| }'",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#arity for instances created with lambda { || } returns zero for definition '@a = lambda { |&b| }'",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#arity for instances created with proc { || } returns negative values for definition '@a = proc { |*a, **k| }'",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#arity for instances created with proc { || } returns negative values for definition '@a = proc { |a, (b, c), *, d:, e: 2, **| }'",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#arity for instances created with proc { || } returns negative values for definition '@a = proc { |a=1, *b, c:, d: 2, **k, &l| }'",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#arity for instances created with proc { || } returns zero for definition '@a = proc { |&b| }'",
      "group": "Proc",
      "spec": "Proc#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#binding returns a Binding instance",
      "group": "Proc",
      "spec": "Proc#binding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#binding returns the binding associated with self",
      "group": "Proc",
      "spec": "Proc#binding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#call can call its block argument declared with a block argument",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call can receive block arguments",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call invokes self",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call on a Proc created with Kernel#lambda or Kernel#proc ignores excess arguments when self is a proc",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call on a Proc created with Kernel#lambda or Kernel#proc ignores excess arguments when self is a proc",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call on a Proc created with Kernel#lambda or Kernel#proc raises an ArgumentError on excess arguments when self is a lambda",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call on a Proc created with Kernel#lambda or Kernel#proc raises an ArgumentError on excess arguments when self is a lambda",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call on a Proc created with Kernel#lambda or Kernel#proc raises an ArgumentError on missing arguments when self is a lambda",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call on a Proc created with Kernel#lambda or Kernel#proc raises an ArgumentError on missing arguments when self is a lambda",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call on a Proc created with Kernel#lambda or Kernel#proc substitutes nil for missing arguments when self is a proc",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call on a Proc created with Kernel#lambda or Kernel#proc substitutes nil for missing arguments when self is a proc",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call on a Proc created with Kernel#lambda or Kernel#proc treats a single Array argument as a single argument when self is a lambda",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call on a Proc created with Kernel#lambda or Kernel#proc treats a single Array argument as a single argument when self is a lambda",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call on a Proc created with Kernel#lambda or Kernel#proc treats a single Array argument as a single argument when self is a proc",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call on a Proc created with Kernel#lambda or Kernel#proc treats a single Array argument as a single argument when self is a proc",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call on a Proc created with Kernel#lambda or Kernel#proc will call #to_ary on argument and return self if return is nil",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call on a Proc created with Kernel#lambda or Kernel#proc will call #to_ary on argument and return self if return is nil",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call on a Proc created with Proc.new auto-explodes a single Array argument",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call on a Proc created with Proc.new auto-explodes a single Array argument",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call on a Proc created with Proc.new replaces missing arguments with nil",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call on a Proc created with Proc.new replaces missing arguments with nil",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call on a Proc created with Proc.new silently ignores extra arguments",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call on a Proc created with Proc.new silently ignores extra arguments",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call sets self's parameters to the given values",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#call yields to the block given at declaration and not to the block argument",
      "group": "Proc",
      "spec": "Proc#call",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#clone returns a copy of self",
      "group": "Proc",
      "spec": "Proc#clone",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry calls the curried proc with the arguments if sufficient arguments have been given",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry can be called multiple times on the same Proc",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry can be passed superfluous arguments if created from a proc",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry combines arguments and calculates incoming arity accurately for successively currying",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry produces Procs that can be passed as the block for instance_exec",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry produces Procs that raise ArgumentError for #binding",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry produces Procs that return [[:rest]] for #parameters",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry produces Procs that return nil for #source_location",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry raises an ArgumentError if passed superfluous arguments when created from a lambda",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry returns Procs with arities of -1",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry returns a Proc that consumes the remainder of the arguments unless sufficient arguments have been given",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry returns a Proc when called on a lambda",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry returns a Proc when called on a proc",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry with arity argument accepts an optional Integer argument for the arity",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry with arity argument calls the curried proc with the arguments if _arity_ arguments have been given",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry with arity argument can be passed more than _arity_ arguments if created from a proc",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry with arity argument can be specified multiple times on the same Proc",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry with arity argument raises an ArgumentError if called on a lambda that requires fewer than _arity_ arguments",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry with arity argument raises an ArgumentError if called on a lambda that requires more than _arity_ arguments",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry with arity argument raises an ArgumentError if passed more than _arity_ arguments when created from a lambda",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry with arity argument retains the lambda-ness of the Proc on which its called",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry with arity argument returns Procs with arities of -1 regardless of the value of _arity_",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry with arity argument returns a Proc if called on a lambda that requires fewer than _arity_ arguments but may take more",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry with arity argument returns a Proc that consumes the remainder of the arguments when fewer than _arity_ arguments are given",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry with arity argument returns a Proc when called on a lambda",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#curry with arity argument returns a Proc when called on a proc",
      "group": "Proc",
      "spec": "Proc#curry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#dup returns a copy of self",
      "group": "Proc",
      "spec": "Proc#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#eql? is not defined",
      "group": "Proc",
      "spec": "Proc#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#eql? returns false if other is a dup of the original",
      "group": "Proc",
      "spec": "Proc#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#hash is provided",
      "group": "Proc",
      "spec": "Proc#hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#hash is stable",
      "group": "Proc",
      "spec": "Proc#hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#hash returns an Integer",
      "group": "Proc",
      "spec": "Proc#hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#inspect for a proc created with Proc.new has a binary encoding",
      "group": "Proc",
      "spec": "Proc#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#inspect for a proc created with Proc.new returns a description optionally including file and line number",
      "group": "Proc",
      "spec": "Proc#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#inspect for a proc created with Symbol#to_proc has a binary encoding",
      "group": "Proc",
      "spec": "Proc#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#inspect for a proc created with Symbol#to_proc returns a description including '(&:symbol)'",
      "group": "Proc",
      "spec": "Proc#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#inspect for a proc created with UnboundMethod#to_proc has a binary encoding",
      "group": "Proc",
      "spec": "Proc#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#inspect for a proc created with UnboundMethod#to_proc returns a description including '(lambda)' and optionally including file and line number",
      "group": "Proc",
      "spec": "Proc#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#inspect for a proc created with lambda has a binary encoding",
      "group": "Proc",
      "spec": "Proc#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#inspect for a proc created with lambda returns a description including '(lambda)' and optionally including file and line number",
      "group": "Proc",
      "spec": "Proc#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#inspect for a proc created with proc has a binary encoding",
      "group": "Proc",
      "spec": "Proc#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#inspect for a proc created with proc returns a description optionally including file and line number",
      "group": "Proc",
      "spec": "Proc#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#lambda? is preserved when a Proc is curried",
      "group": "Proc",
      "spec": "Proc#lambda?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#lambda? is preserved when a curried Proc is called without enough arguments",
      "group": "Proc",
      "spec": "Proc#lambda?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#lambda? is preserved when passing a Proc with & to Proc.new",
      "group": "Proc",
      "spec": "Proc#lambda?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#lambda? is preserved when passing a Proc with & to the lambda keyword",
      "group": "Proc",
      "spec": "Proc#lambda?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#lambda? is preserved when passing a Proc with & to the proc keyword",
      "group": "Proc",
      "spec": "Proc#lambda?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#lambda? is preserved when the Proc was passed using &",
      "group": "Proc",
      "spec": "Proc#lambda?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#lambda? returns false if the Proc was created from a block with &",
      "group": "Proc",
      "spec": "Proc#lambda?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#lambda? returns false if the Proc was created from a block with Proc.new",
      "group": "Proc",
      "spec": "Proc#lambda?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#lambda? returns false if the Proc was created from a block with the proc keyword",
      "group": "Proc",
      "spec": "Proc#lambda?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#lambda? returns true for a Method converted to a Proc",
      "group": "Proc",
      "spec": "Proc#lambda?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#lambda? returns true if the Proc was created from a block with the lambda keyword",
      "group": "Proc",
      "spec": "Proc#lambda?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#parameters adds nameless rest arg for \"star\" argument",
      "group": "Proc",
      "spec": "Proc#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#parameters does not add locals as block options with a block and splat",
      "group": "Proc",
      "spec": "Proc#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#parameters ignores unnamed rest args",
      "group": "Proc",
      "spec": "Proc#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#parameters regards keyword parameters in lambdas as required",
      "group": "Proc",
      "spec": "Proc#parameters",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#parameters regards named parameters in lambdas as required",
      "group": "Proc",
      "spec": "Proc#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#parameters regards named parameters in procs as optional",
      "group": "Proc",
      "spec": "Proc#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#parameters regards optional keyword parameters in procs as optional",
      "group": "Proc",
      "spec": "Proc#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#parameters regards parameters with default values as optional",
      "group": "Proc",
      "spec": "Proc#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#parameters returns an Array of Arrays for a proc expecting parameters",
      "group": "Proc",
      "spec": "Proc#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#parameters returns an empty Array for a proc expecting no parameters",
      "group": "Proc",
      "spec": "Proc#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#parameters sets the first element of each sub-Array to :block for parameters prefixed with ampersands",
      "group": "Proc",
      "spec": "Proc#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#parameters sets the first element of each sub-Array to :keyrest for parameters prefixed with double asterisks",
      "group": "Proc",
      "spec": "Proc#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#parameters sets the first element of each sub-Array to :opt for optional arguments",
      "group": "Proc",
      "spec": "Proc#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#parameters sets the first element of each sub-Array to :req for required arguments",
      "group": "Proc",
      "spec": "Proc#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#parameters sets the first element of each sub-Array to :rest for parameters prefixed with asterisks",
      "group": "Proc",
      "spec": "Proc#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#parameters sets the second element of each sub-Array to the name of the argument",
      "group": "Proc",
      "spec": "Proc#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#source_location returns an Array",
      "group": "Proc",
      "spec": "Proc#source_location",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#source_location returns nil for a core method that has been proc-ified",
      "group": "Proc",
      "spec": "Proc#source_location",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#source_location returns the first line of a multi-line proc (i.e. the line containing 'proc do')",
      "group": "Proc",
      "spec": "Proc#source_location",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#source_location returns the location of the proc's body; not necessarily the proc itself",
      "group": "Proc",
      "spec": "Proc#source_location",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#source_location returns the same value for a proc-ified method as the method reports",
      "group": "Proc",
      "spec": "Proc#source_location",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#source_location sets the first value to the path of the file in which the proc was defined",
      "group": "Proc",
      "spec": "Proc#source_location",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#source_location sets the last value to a Fixnum representing the line on which the proc was defined",
      "group": "Proc",
      "spec": "Proc#source_location",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#source_location works even if the proc was created on the same line",
      "group": "Proc",
      "spec": "Proc#source_location",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#to_proc returns self",
      "group": "Proc",
      "spec": "Proc#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#to_s for a proc created with Proc.new has a binary encoding",
      "group": "Proc",
      "spec": "Proc#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#to_s for a proc created with Proc.new returns a description optionally including file and line number",
      "group": "Proc",
      "spec": "Proc#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#to_s for a proc created with Symbol#to_proc has a binary encoding",
      "group": "Proc",
      "spec": "Proc#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#to_s for a proc created with Symbol#to_proc returns a description including '(&:symbol)'",
      "group": "Proc",
      "spec": "Proc#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#to_s for a proc created with UnboundMethod#to_proc has a binary encoding",
      "group": "Proc",
      "spec": "Proc#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#to_s for a proc created with UnboundMethod#to_proc returns a description including '(lambda)' and optionally including file and line number",
      "group": "Proc",
      "spec": "Proc#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#to_s for a proc created with lambda has a binary encoding",
      "group": "Proc",
      "spec": "Proc#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#to_s for a proc created with lambda returns a description including '(lambda)' and optionally including file and line number",
      "group": "Proc",
      "spec": "Proc#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#to_s for a proc created with proc has a binary encoding",
      "group": "Proc",
      "spec": "Proc#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#to_s for a proc created with proc returns a description optionally including file and line number",
      "group": "Proc",
      "spec": "Proc#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#yield can call its block argument declared with a block argument",
      "group": "Proc",
      "spec": "Proc#yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#yield can receive block arguments",
      "group": "Proc",
      "spec": "Proc#yield",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc#yield invokes self",
      "group": "Proc",
      "spec": "Proc#yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#yield on a Proc created with Kernel#lambda or Kernel#proc ignores excess arguments when self is a proc",
      "group": "Proc",
      "spec": "Proc#yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#yield on a Proc created with Kernel#lambda or Kernel#proc raises an ArgumentError on excess arguments when self is a lambda",
      "group": "Proc",
      "spec": "Proc#yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#yield on a Proc created with Kernel#lambda or Kernel#proc raises an ArgumentError on missing arguments when self is a lambda",
      "group": "Proc",
      "spec": "Proc#yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#yield on a Proc created with Kernel#lambda or Kernel#proc substitutes nil for missing arguments when self is a proc",
      "group": "Proc",
      "spec": "Proc#yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#yield on a Proc created with Kernel#lambda or Kernel#proc treats a single Array argument as a single argument when self is a lambda",
      "group": "Proc",
      "spec": "Proc#yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#yield on a Proc created with Kernel#lambda or Kernel#proc treats a single Array argument as a single argument when self is a proc",
      "group": "Proc",
      "spec": "Proc#yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#yield on a Proc created with Kernel#lambda or Kernel#proc will call #to_ary on argument and return self if return is nil",
      "group": "Proc",
      "spec": "Proc#yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#yield on a Proc created with Proc.new auto-explodes a single Array argument",
      "group": "Proc",
      "spec": "Proc#yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#yield on a Proc created with Proc.new replaces missing arguments with nil",
      "group": "Proc",
      "spec": "Proc#yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#yield on a Proc created with Proc.new silently ignores extra arguments",
      "group": "Proc",
      "spec": "Proc#yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#yield sets self's parameters to the given values",
      "group": "Proc",
      "spec": "Proc#yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc#yield yields to the block given at declaration and not to the block argument",
      "group": "Proc",
      "spec": "Proc#yield",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc.allocate raises a TypeError",
      "group": "Proc",
      "spec": "Proc.allocate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc.new with a block argument called indirectly from a subclass returns the passed proc created from a block",
      "group": "Proc",
      "spec": "Proc.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc.new with a block argument called indirectly from a subclass returns the passed proc created from a method",
      "group": "Proc",
      "spec": "Proc.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc.new with a block argument called indirectly from a subclass returns the passed proc created from a symbol",
      "group": "Proc",
      "spec": "Proc.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc.new with a block argument returns the passed proc created from a block",
      "group": "Proc",
      "spec": "Proc.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc.new with a block argument returns the passed proc created from a method",
      "group": "Proc",
      "spec": "Proc.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc.new with a block argument returns the passed proc created from a symbol",
      "group": "Proc",
      "spec": "Proc.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc.new with an associated block called on a subclass of Proc returns an instance of the subclass",
      "group": "Proc",
      "spec": "Proc.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc.new with an associated block called on a subclass of Proc that does not 'super' in 'initialize' still constructs a functional proc",
      "group": "Proc",
      "spec": "Proc.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc.new with an associated block called on a subclass of Proc using a reified block parameter returns an instance of the subclass",
      "group": "Proc",
      "spec": "Proc.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc.new with an associated block calls initialize on the Proc object",
      "group": "Proc",
      "spec": "Proc.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc.new with an associated block raises a LocalJumpError when context of the block no longer exists",
      "group": "Proc",
      "spec": "Proc.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc.new with an associated block returns a new Proc instance from the block passed to the containing method",
      "group": "Proc",
      "spec": "Proc.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc.new with an associated block returns a new Proc instance from the block passed to the containing method",
      "group": "Proc",
      "spec": "Proc.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc.new with an associated block returns a proc that represents the block",
      "group": "Proc",
      "spec": "Proc.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc.new with an associated block returns a subclass of Proc",
      "group": "Proc",
      "spec": "Proc.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc.new with an associated block returns from within enclosing method when 'return' is used in the block",
      "group": "Proc",
      "spec": "Proc.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc.new without a block raises an ArgumentError",
      "group": "Proc",
      "spec": "Proc.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc.new without a block raises an ArgumentError if invoked from within a method with no block",
      "group": "Proc",
      "spec": "Proc.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc.new without a block raises an ArgumentError if invoked on a subclass from within a method with no block",
      "group": "Proc",
      "spec": "Proc.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Proc.new without a block uses the implicit block from an enclosing method",
      "group": "Proc",
      "spec": "Proc.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Proc.new without a block uses the implicit block from an enclosing method when called inside a block",
      "group": "Proc",
      "spec": "Proc.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#<< adds an element to the Queue",
      "group": "Queue",
      "spec": "Queue#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#<< is an error for a closed queue",
      "group": "Queue",
      "spec": "Queue#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#clear removes all objects from the queue",
      "group": "Queue",
      "spec": "Queue#clear",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#close may be called multiple times",
      "group": "Queue",
      "spec": "Queue#close",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#close returns self",
      "group": "Queue",
      "spec": "Queue#close",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#closed? returns false initially",
      "group": "Queue",
      "spec": "Queue#closed?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#closed? returns true when the queue is closed",
      "group": "Queue",
      "spec": "Queue#closed?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#deq blocks the thread until there are items in the queue",
      "group": "Queue",
      "spec": "Queue#deq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#deq in non-blocking mode raises a ThreadError for a closed empty queue",
      "group": "Queue",
      "spec": "Queue#deq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#deq in non-blocking mode raises a ThreadError if the queue is empty",
      "group": "Queue",
      "spec": "Queue#deq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#deq in non-blocking mode removes an item from a closed queue",
      "group": "Queue",
      "spec": "Queue#deq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#deq in non-blocking mode removes an item from the queue",
      "group": "Queue",
      "spec": "Queue#deq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#deq removes an item from a closed queue",
      "group": "Queue",
      "spec": "Queue#deq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#deq removes an item from the queue",
      "group": "Queue",
      "spec": "Queue#deq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#deq returns items in the order they were added",
      "group": "Queue",
      "spec": "Queue#deq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#deq returns nil for a closed empty queue",
      "group": "Queue",
      "spec": "Queue#deq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#deq returns nil for an empty queue that becomes closed",
      "group": "Queue",
      "spec": "Queue#deq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#empty? returns false when Queue is not empty",
      "group": "Queue",
      "spec": "Queue#empty?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#empty? returns true on an empty Queue",
      "group": "Queue",
      "spec": "Queue#empty?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#enq adds an element to the Queue",
      "group": "Queue",
      "spec": "Queue#enq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#enq is an error for a closed queue",
      "group": "Queue",
      "spec": "Queue#enq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#length returns the number of elements",
      "group": "Queue",
      "spec": "Queue#length",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#num_waiting reports the number of threads waiting on the queue",
      "group": "Queue",
      "spec": "Queue#num_waiting",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#pop blocks the thread until there are items in the queue",
      "group": "Queue",
      "spec": "Queue#pop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#pop in non-blocking mode raises a ThreadError for a closed empty queue",
      "group": "Queue",
      "spec": "Queue#pop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#pop in non-blocking mode raises a ThreadError if the queue is empty",
      "group": "Queue",
      "spec": "Queue#pop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#pop in non-blocking mode removes an item from a closed queue",
      "group": "Queue",
      "spec": "Queue#pop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#pop in non-blocking mode removes an item from the queue",
      "group": "Queue",
      "spec": "Queue#pop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#pop removes an item from a closed queue",
      "group": "Queue",
      "spec": "Queue#pop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#pop removes an item from the queue",
      "group": "Queue",
      "spec": "Queue#pop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#pop returns items in the order they were added",
      "group": "Queue",
      "spec": "Queue#pop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#pop returns nil for a closed empty queue",
      "group": "Queue",
      "spec": "Queue#pop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#pop returns nil for an empty queue that becomes closed",
      "group": "Queue",
      "spec": "Queue#pop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#push adds an element to the Queue",
      "group": "Queue",
      "spec": "Queue#push",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#push is an error for a closed queue",
      "group": "Queue",
      "spec": "Queue#push",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#shift blocks the thread until there are items in the queue",
      "group": "Queue",
      "spec": "Queue#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#shift in non-blocking mode raises a ThreadError for a closed empty queue",
      "group": "Queue",
      "spec": "Queue#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#shift in non-blocking mode raises a ThreadError if the queue is empty",
      "group": "Queue",
      "spec": "Queue#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#shift in non-blocking mode removes an item from a closed queue",
      "group": "Queue",
      "spec": "Queue#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#shift in non-blocking mode removes an item from the queue",
      "group": "Queue",
      "spec": "Queue#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#shift removes an item from a closed queue",
      "group": "Queue",
      "spec": "Queue#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#shift removes an item from the queue",
      "group": "Queue",
      "spec": "Queue#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#shift returns items in the order they were added",
      "group": "Queue",
      "spec": "Queue#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#shift returns nil for a closed empty queue",
      "group": "Queue",
      "spec": "Queue#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#shift returns nil for an empty queue that becomes closed",
      "group": "Queue",
      "spec": "Queue#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Queue#size returns the number of elements",
      "group": "Queue",
      "spec": "Queue#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:RUBY_COPYRIGHT is a String",
      "group": "RUBY_COPYRIGHT",
      "spec": "RUBY_COPYRIGHT",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:RUBY_DESCRIPTION is a String",
      "group": "RUBY_DESCRIPTION",
      "spec": "RUBY_DESCRIPTION",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:RUBY_ENGINE is a String",
      "group": "RUBY_ENGINE",
      "spec": "RUBY_ENGINE",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:RUBY_PATCHLEVEL is a Fixnum",
      "group": "RUBY_PATCHLEVEL",
      "spec": "RUBY_PATCHLEVEL",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:RUBY_PLATFORM is a String",
      "group": "RUBY_PLATFORM",
      "spec": "RUBY_PLATFORM",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:RUBY_RELEASE_DATE is a String",
      "group": "RUBY_RELEASE_DATE",
      "spec": "RUBY_RELEASE_DATE",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:RUBY_REVISION is an Integer",
      "group": "RUBY_REVISION",
      "spec": "RUBY_REVISION",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:RUBY_VERSION is a String",
      "group": "RUBY_VERSION",
      "spec": "RUBY_VERSION",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random#== returns false if the other object is not a Random",
      "group": "Random",
      "spec": "Random#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random#== returns false if the two objects have a different seed",
      "group": "Random",
      "spec": "Random#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random#== returns false if the two objects have different state",
      "group": "Random",
      "spec": "Random#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random#== returns true if the two objects have the same seed",
      "group": "Random",
      "spec": "Random#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random#== returns true if the two objects have the same state",
      "group": "Random",
      "spec": "Random#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random#bytes returns a String",
      "group": "Random",
      "spec": "Random#bytes",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random#bytes returns a String of the length given as argument",
      "group": "Random",
      "spec": "Random#bytes",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random#bytes returns a binary String",
      "group": "Random",
      "spec": "Random#bytes",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random#bytes returns a random binary String",
      "group": "Random",
      "spec": "Random#bytes",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random#bytes returns the same numeric output for a given huge seed across all implementations and platforms",
      "group": "Random",
      "spec": "Random#bytes",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random#bytes returns the same numeric output for a given seed across all implementations and platforms",
      "group": "Random",
      "spec": "Random#bytes",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random#bytes returns the same output for a given seed",
      "group": "Random",
      "spec": "Random#bytes",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random#seed returns an Integer",
      "group": "Random",
      "spec": "Random#seed",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random#seed returns an arbitrary seed if the constructor was called without arguments",
      "group": "Random",
      "spec": "Random#seed",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random#seed returns the given seed coerced with #to_int",
      "group": "Random",
      "spec": "Random#seed",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random#seed returns the same generated seed when repeatedly called on the same object",
      "group": "Random",
      "spec": "Random#seed",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random#seed returns the seed given in the constructor",
      "group": "Random",
      "spec": "Random#seed",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random.bytes returns a String",
      "group": "Random",
      "spec": "Random.bytes",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random.bytes returns a String of the length given as argument",
      "group": "Random",
      "spec": "Random.bytes",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random.bytes returns a binary String",
      "group": "Random",
      "spec": "Random.bytes",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random.bytes returns a random binary String",
      "group": "Random",
      "spec": "Random.bytes",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random.new accepts (and converts to Integer) a Complex (without imaginary part) seed value as an argument",
      "group": "Random",
      "spec": "Random.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random.new accepts (and converts to Integer) a Rational seed value as an argument",
      "group": "Random",
      "spec": "Random.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random.new accepts (and truncates) a Float seed value as an argument",
      "group": "Random",
      "spec": "Random.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random.new accepts an Integer seed value as an argument",
      "group": "Random",
      "spec": "Random.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random.new raises a RangeError if passed a Complex (with imaginary part) seed value as an argument",
      "group": "Random",
      "spec": "Random.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random.new returns Random instances initialized with different seeds",
      "group": "Random",
      "spec": "Random.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random.new returns a new instance of Random",
      "group": "Random",
      "spec": "Random.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random.new uses a random seed value if none is supplied",
      "group": "Random",
      "spec": "Random.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random.new_seed is not affected by Kernel#srand",
      "group": "Random",
      "spec": "Random.new_seed",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random.new_seed returns a Bignum",
      "group": "Random",
      "spec": "Random.new_seed",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random.new_seed returns an arbitrary seed value each time",
      "group": "Random",
      "spec": "Random.new_seed",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random.srand returns an arbitrary seed if .srand wasn't called previously with an argument and 0 is supplied this time",
      "group": "Random",
      "spec": "Random.srand",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random.srand returns an arbitrary seed if .srand wasn't called previously with an argument and no argument is supplied this time",
      "group": "Random",
      "spec": "Random.srand",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random.srand returns the previous argument to .srand if one was given and 0 is supplied",
      "group": "Random",
      "spec": "Random.srand",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random.srand returns the previous argument to .srand if one was given and no argument is supplied",
      "group": "Random",
      "spec": "Random.srand",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random.srand seeds Kernel.rand such that its return value is deterministic",
      "group": "Random",
      "spec": "Random.srand",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random.srand seeds Random.rand such that its return value is deterministic",
      "group": "Random",
      "spec": "Random.srand",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random.urandom raises an ArgumentError on a negative size",
      "group": "Random",
      "spec": "Random.urandom",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random.urandom returns a String",
      "group": "Random",
      "spec": "Random.urandom",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random.urandom returns a String of the length given as argument",
      "group": "Random",
      "spec": "Random.urandom",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random.urandom returns a binary String",
      "group": "Random",
      "spec": "Random.urandom",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Random.urandom returns a random binary String",
      "group": "Random",
      "spec": "Random.urandom",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Random::DEFAULT returns a Random instance",
      "group": "Random::DEFAULT",
      "spec": "Random::DEFAULT",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range includes Enumerable",
      "group": "Range",
      "spec": "Range",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#% produces an arithmetic sequence with a percent sign in #inspect",
      "group": "Range",
      "spec": "Range#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#% works as a Range#step",
      "group": "Range",
      "spec": "Range#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#== returns false if one of the attributes differs",
      "group": "Range",
      "spec": "Range#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#== returns false if other is not a Range",
      "group": "Range",
      "spec": "Range#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#== returns true for subclasses of Range",
      "group": "Range",
      "spec": "Range#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#== returns true if other has same begin, end, and exclude_end? values",
      "group": "Range",
      "spec": "Range#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#== returns true if the endpoints are ==",
      "group": "Range",
      "spec": "Range#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#=== returns the result of calling #cover? on self",
      "group": "Range",
      "spec": "Range#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#begin returns the first element of self",
      "group": "Range",
      "spec": "Range#begin",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch raises a TypeError if the Range has Object values",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch raises a TypeError if the Range has String values",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch raises a TypeError if the block returns a String",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch raises a TypeError if the block returns an Object",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch returns an Enumerator when not passed a block",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch when no block is given returned Enumerator size returns nil",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch with Float values with a block returning negative, zero, positive numbers accepts (+/-)Float::INFINITY from the block",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch with Float values with a block returning negative, zero, positive numbers returns an element at an index for which block returns 0",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch with Float values with a block returning negative, zero, positive numbers returns an element at an index for which block returns 0.0",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch with Float values with a block returning negative, zero, positive numbers returns nil if the block never returns zero",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch with Float values with a block returning negative, zero, positive numbers returns nil if the block returns greater than zero for every element",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch with Float values with a block returning negative, zero, positive numbers returns nil if the block returns less than zero for every element",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch with Float values with a block returning true or false returns minimum element if the block returns true for every element",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch with Float values with a block returning true or false returns nil if the block returns false for every element",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch with Float values with a block returning true or false returns nil if the block returns nil for every element",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch with Float values with a block returning true or false returns the smallest element for which block returns true",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch with Integer values with a block returning negative, zero, positive numbers accepts (+/-)Float::INFINITY from the block",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch with Integer values with a block returning negative, zero, positive numbers returns an element at an index for which block returns 0",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch with Integer values with a block returning negative, zero, positive numbers returns an element at an index for which block returns 0.0",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch with Integer values with a block returning negative, zero, positive numbers returns nil if the block never returns zero",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch with Integer values with a block returning negative, zero, positive numbers returns nil if the block returns greater than zero for every element",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch with Integer values with a block returning negative, zero, positive numbers returns nil if the block returns less than zero for every element",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch with Integer values with a block returning true or false returns minimum element if the block returns true for every element",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch with Integer values with a block returning true or false returns nil if the block returns false for every element",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch with Integer values with a block returning true or false returns nil if the block returns nil for every element",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch with Integer values with a block returning true or false returns the last element if the block returns true for the last element",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#bsearch with Integer values with a block returning true or false returns the smallest element for which block returns true",
      "group": "Range",
      "spec": "Range#bsearch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? compares values using <=>",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? on string elements returns true if other is matched by element.succ",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? on string elements returns true if other is not matched by element.succ",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? raises an ArgumentError without exactly one argument",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? range argument accepts range argument",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? range argument honors exclusion of right boundary (:exclude_end option)",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? range argument returns false if types are not comparable",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? range argument supports boundaries of different comparable types",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? returns false if range is empty",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? returns false if the range does not contain the argument",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? returns true if argument is equal to the first value of the range",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? returns true if argument is equal to the last value of the range",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? returns true if argument is less than the last value of the range and greater than the first value",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? returns true if argument is sole element in the range",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? returns true if other is an element of self",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? uses a continuous inclusion test",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? uses the range element's <=> to make the comparison",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? with weird succ when excluded end value returns false if other is equal as last element but not matched by element.succ",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? with weird succ when excluded end value returns false if other is greater than last element but matched by element.succ",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? with weird succ when excluded end value returns false if other is less than first element",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? with weird succ when excluded end value returns true if other is equal as first element",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? with weird succ when excluded end value returns true if other is matched by element.succ",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? with weird succ when excluded end value returns true if other is not matched by element.succ",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? with weird succ when included end value returns false if other is greater than last element but matched by element.succ",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? with weird succ when included end value returns false if other is less than first element",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? with weird succ when included end value returns true if other is equal as first element",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? with weird succ when included end value returns true if other is equal as last element but not matched by element.succ",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? with weird succ when included end value returns true if other is matched by element.succ",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#cover? with weird succ when included end value returns true if other is not matched by element.succ",
      "group": "Range",
      "spec": "Range#cover?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#dup duplicates the range",
      "group": "Range",
      "spec": "Range#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#each passes each Symbol element by using #succ",
      "group": "Range",
      "spec": "Range#each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#each passes each element to the given block by using #succ",
      "group": "Range",
      "spec": "Range#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#each raises a TypeError if the first element does not respond to #succ",
      "group": "Range",
      "spec": "Range#each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#each raises a TypeError if the first element is a Time object",
      "group": "Range",
      "spec": "Range#each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#each returns an enumerator when no block given",
      "group": "Range",
      "spec": "Range#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#each returns self",
      "group": "Range",
      "spec": "Range#each",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#each when no block is given returned Enumerator size returns the enumerable size",
      "group": "Range",
      "spec": "Range#each",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#end end returns the last element of self",
      "group": "Range",
      "spec": "Range#end",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#eql? returns false if one of the attributes differs",
      "group": "Range",
      "spec": "Range#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#eql? returns false if other is not a Range",
      "group": "Range",
      "spec": "Range#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#eql? returns false if the endpoints are not eql?",
      "group": "Range",
      "spec": "Range#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#eql? returns true for subclasses of Range",
      "group": "Range",
      "spec": "Range#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#eql? returns true if other has same begin, end, and exclude_end? values",
      "group": "Range",
      "spec": "Range#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#exclude_end? returns false if the range does not exclude the end value",
      "group": "Range",
      "spec": "Range#exclude_end?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#exclude_end? returns true if the range excludes the end value",
      "group": "Range",
      "spec": "Range#exclude_end?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#first calls #to_int to convert the argument",
      "group": "Range",
      "spec": "Range#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#first raises a TypeError if #to_int does not return an Integer",
      "group": "Range",
      "spec": "Range#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#first raises a TypeError when passed a String",
      "group": "Range",
      "spec": "Range#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#first raises a TypeError when passed nil",
      "group": "Range",
      "spec": "Range#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#first raises an ArgumentError when count is negative",
      "group": "Range",
      "spec": "Range#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#first returns all elements in the range when count exceeds the number of elements",
      "group": "Range",
      "spec": "Range#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#first returns an empty array for an empty Range",
      "group": "Range",
      "spec": "Range#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#first returns an empty array when passed zero",
      "group": "Range",
      "spec": "Range#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#first returns the first element of self",
      "group": "Range",
      "spec": "Range#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#first returns the specified number of elements from the beginning",
      "group": "Range",
      "spec": "Range#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#first truncates the value when passed a Float",
      "group": "Range",
      "spec": "Range#first",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#hash generates a Fixnum for the hash value",
      "group": "Range",
      "spec": "Range#hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#hash generates the same hash values for Ranges with the same start, end and exclude_end? values",
      "group": "Range",
      "spec": "Range#hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#hash is provided",
      "group": "Range",
      "spec": "Range#hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#include? compares values using <=>",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#include? on string elements returns false if other is not matched by element.succ",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#include? on string elements returns true if other is matched by element.succ",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#include? raises an ArgumentError without exactly one argument",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#include? returns false if range is empty",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#include? returns false if the range does not contain the argument",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#include? returns true if argument is equal to the first value of the range",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#include? returns true if argument is equal to the last value of the range",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#include? returns true if argument is less than the last value of the range and greater than the first value",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#include? returns true if argument is sole element in the range",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#include? returns true if other is an element of self",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#include? with Time endpoints uses cover? logic",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#include? with weird succ when excluded end value returns false if other is equal as last element but not matched by element.succ",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#include? with weird succ when excluded end value returns false if other is greater than last element but matched by element.succ",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#include? with weird succ when excluded end value returns false if other is less than first element",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#include? with weird succ when excluded end value returns false if other is not matched by element.succ",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#include? with weird succ when excluded end value returns true if other is equal as first element",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#include? with weird succ when excluded end value returns true if other is matched by element.succ",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#include? with weird succ when included end value returns false if other is equal as last element but not matched by element.succ",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#include? with weird succ when included end value returns false if other is greater than last element but matched by element.succ",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#include? with weird succ when included end value returns false if other is less than first element",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#include? with weird succ when included end value returns false if other is not matched by element.succ",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#include? with weird succ when included end value returns true if other is equal as first element",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#include? with weird succ when included end value returns true if other is matched by element.succ",
      "group": "Range",
      "spec": "Range#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#initialize initializes correctly the Range object when given 2 arguments",
      "group": "Range",
      "spec": "Range#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#initialize initializes correctly the Range object when given 3 arguments",
      "group": "Range",
      "spec": "Range#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#initialize is private",
      "group": "Range",
      "spec": "Range#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#initialize raises a NameError if called on an already initialized Range",
      "group": "Range",
      "spec": "Range#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#initialize raises an ArgumentError if arguments don't respond to <=>",
      "group": "Range",
      "spec": "Range#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#initialize raises an ArgumentError if passed with four or more arguments",
      "group": "Range",
      "spec": "Range#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#initialize raises an ArgumentError if passed without or with only one argument",
      "group": "Range",
      "spec": "Range#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#inspect provides a printable form, using #inspect to convert the start and end objects",
      "group": "Range",
      "spec": "Range#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#inspect returns a tainted string if either end is tainted",
      "group": "Range",
      "spec": "Range#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#inspect returns a untrusted string if either end is untrusted",
      "group": "Range",
      "spec": "Range#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#last calls #to_int to convert the argument",
      "group": "Range",
      "spec": "Range#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#last end returns the last element of self",
      "group": "Range",
      "spec": "Range#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#last raises a TypeError if #to_int does not return an Integer",
      "group": "Range",
      "spec": "Range#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#last raises a TypeError when passed a String",
      "group": "Range",
      "spec": "Range#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#last raises a TypeError when passed nil",
      "group": "Range",
      "spec": "Range#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#last raises an ArgumentError when count is negative",
      "group": "Range",
      "spec": "Range#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#last returns all elements in the range when count exceeds the number of elements",
      "group": "Range",
      "spec": "Range#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#last returns an empty array for an empty Range",
      "group": "Range",
      "spec": "Range#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#last returns an empty array when passed zero",
      "group": "Range",
      "spec": "Range#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#last returns the specified number of elements from the end",
      "group": "Range",
      "spec": "Range#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#last truncates the value when passed a Float",
      "group": "Range",
      "spec": "Range#last",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#max given a block calls #> and #< on the return value of the block",
      "group": "Range",
      "spec": "Range#max",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#max given a block passes each pair of elements to the block in reversed order",
      "group": "Range",
      "spec": "Range#max",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#max given a block passes each pair of values in the range to the block",
      "group": "Range",
      "spec": "Range#max",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#max given a block returns nil when the endpoint is less than the start point",
      "group": "Range",
      "spec": "Range#max",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#max given a block returns the element the block determines to be the maximum",
      "group": "Range",
      "spec": "Range#max",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#max raises TypeError when called on a Time...Time(excluded end point)",
      "group": "Range",
      "spec": "Range#max",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#max raises TypeError when called on an exclusive range and a non Integer value",
      "group": "Range",
      "spec": "Range#max",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#max returns end point when the range is Time..Time(included end point)",
      "group": "Range",
      "spec": "Range#max",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#max returns nil when the endpoint equals the start point and the range is exclusive",
      "group": "Range",
      "spec": "Range#max",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#max returns nil when the endpoint is less than the start point",
      "group": "Range",
      "spec": "Range#max",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#max returns nil when the endpoint is less than the start point in a Float range",
      "group": "Range",
      "spec": "Range#max",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#max returns the endpoint when the endpoint equals the start point and the range is inclusive",
      "group": "Range",
      "spec": "Range#max",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#max returns the maximum value in the Float range when called with no arguments",
      "group": "Range",
      "spec": "Range#max",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#max returns the maximum value in the range when called with no arguments",
      "group": "Range",
      "spec": "Range#max",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#member? compares values using <=>",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#member? on string elements returns false if other is not matched by element.succ",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#member? on string elements returns true if other is matched by element.succ",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#member? raises an ArgumentError without exactly one argument",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#member? returns false if range is empty",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#member? returns false if the range does not contain the argument",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#member? returns true if argument is equal to the first value of the range",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#member? returns true if argument is equal to the last value of the range",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#member? returns true if argument is less than the last value of the range and greater than the first value",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#member? returns true if argument is sole element in the range",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#member? returns true if other is an element of self",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#member? with Time endpoints uses cover? logic",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#member? with weird succ when excluded end value returns false if other is equal as last element but not matched by element.succ",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#member? with weird succ when excluded end value returns false if other is greater than last element but matched by element.succ",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#member? with weird succ when excluded end value returns false if other is less than first element",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#member? with weird succ when excluded end value returns false if other is not matched by element.succ",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#member? with weird succ when excluded end value returns true if other is equal as first element",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#member? with weird succ when excluded end value returns true if other is matched by element.succ",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#member? with weird succ when included end value returns false if other is equal as last element but not matched by element.succ",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#member? with weird succ when included end value returns false if other is greater than last element but matched by element.succ",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#member? with weird succ when included end value returns false if other is less than first element",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#member? with weird succ when included end value returns false if other is not matched by element.succ",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#member? with weird succ when included end value returns true if other is equal as first element",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#member? with weird succ when included end value returns true if other is matched by element.succ",
      "group": "Range",
      "spec": "Range#member?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#min given a block calls #> and #< on the return value of the block",
      "group": "Range",
      "spec": "Range#min",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#min given a block passes each pair of elements to the block where the first argument is the current element, and the last is the first element",
      "group": "Range",
      "spec": "Range#min",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#min given a block passes each pair of values in the range to the block",
      "group": "Range",
      "spec": "Range#min",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#min given a block returns nil when the start point is greater than the endpoint",
      "group": "Range",
      "spec": "Range#min",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#min given a block returns the element the block determines to be the minimum",
      "group": "Range",
      "spec": "Range#min",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#min returns nil when the endpoint equals the start point and the range is exclusive",
      "group": "Range",
      "spec": "Range#min",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#min returns nil when the start point is greater than the endpoint",
      "group": "Range",
      "spec": "Range#min",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#min returns nil when the start point is greater than the endpoint in a Float range",
      "group": "Range",
      "spec": "Range#min",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#min returns start point when the range is Time...Time(excluded end point)",
      "group": "Range",
      "spec": "Range#min",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#min returns start point when the range is Time..Time(included end point)",
      "group": "Range",
      "spec": "Range#min",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#min returns the minimum value in the Float range when called with no arguments",
      "group": "Range",
      "spec": "Range#min",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#min returns the minimum value in the range when called with no arguments",
      "group": "Range",
      "spec": "Range#min",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#min returns the start point when the endpoint equals the start point and the range is inclusive",
      "group": "Range",
      "spec": "Range#min",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#size returns 0 if last is less than first",
      "group": "Range",
      "spec": "Range#size",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#size returns Float::INFINITY for increasing, infinite ranges",
      "group": "Range",
      "spec": "Range#size",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#size returns nil if first and last are not Numeric",
      "group": "Range",
      "spec": "Range#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#size returns the number of elements in the range",
      "group": "Range",
      "spec": "Range#size",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#step calls #to_int to coerce step to an Integer",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step coerces the argument to integer by invoking to_int",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step raises TypeError if step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step raises a TypeError if #to_int does not return an Integer",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step raises a TypeError if step does not respond to #to_int",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step raises a TypeError if the first element does not respond to #succ",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step raises an ArgumentError if step is 0",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step raises an ArgumentError if step is 0.0",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step raises an ArgumentError if step is negative",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step returns self",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step when no block is given returned Enumerator size raises a TypeError if #to_int does not return an Integer",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step when no block is given returned Enumerator size raises a TypeError if step does not respond to #to_int",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step when no block is given returned Enumerator size return nil and not raises a TypeError if the first element does not respond to #succ",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step when no block is given returned Enumerator size returns Float::INFINITY for zero step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step when no block is given returned Enumerator size returns nil with begin and end are String",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step when no block is given returned Enumerator size returns the ceil of range size divided by the number of steps",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step when no block is given returned Enumerator size returns the ceil of range size divided by the number of steps even if step is negative",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step when no block is given returned Enumerator size returns the correct number of steps when one of the arguments is a float",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step when no block is given returned Enumerator size returns the range size when there's no step_size",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step when no block is given returned Enumerator type when begin and end are not numerics returns an instance of Enumerator",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step when no block is given returned Enumerator type when both begin and end are numerics returns an instance of Enumerator::ArithmeticSequence",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with exclusive end and Float values handles infinite values at either end",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with exclusive end and Float values returns Float values of 'step * n + begin < end'",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with exclusive end and Float values yields Float values incremented by 1 and less than end when not passed a step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with exclusive end and Float values yields Float values incremented by a Float step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with exclusive end and Float values yields Float values incremented by an Integer step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with exclusive end and Float, Integer values yields Float values incremented by 1 and less than end when not passed a step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with exclusive end and Float, Integer values yields Float values incremented by a Float step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with exclusive end and Float, Integer values yields Float values incremented by an Integer step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with exclusive end and Integer values yields Float values incremented by a Float step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with exclusive end and Integer values yields Integer values incremented by 1 and less than end when not passed a step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with exclusive end and Integer values yields Integer values incremented by an Integer step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with exclusive end and Integer, Float values yields Float values incremented by 1 and less than end when not passed a step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with exclusive end and Integer, Float values yields Float values incremented by an Integer step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with exclusive end and Integer, Float values yields an Float and then Float values incremented by a Float step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with exclusive end and String values raises a TypeError when passed a Float step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with exclusive end and String values yields String values incremented by #succ and less than or equal to end when not passed a step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with exclusive end and String values yields String values incremented by #succ called Integer step times",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with inclusive end and Float values handles infinite values at either end",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with inclusive end and Float values returns Float values of 'step * n + begin <= end'",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with inclusive end and Float values yields Float values incremented by 1 and less than or equal to end when not passed a step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with inclusive end and Float values yields Float values incremented by a Float step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with inclusive end and Float values yields Float values incremented by an Integer step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with inclusive end and Float, Integer values yields Float values incremented by 1 and less than or equal to end when not passed a step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with inclusive end and Float, Integer values yields Float values incremented by a Float step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with inclusive end and Float, Integer values yields Float values incremented by an Integer step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with inclusive end and Integer values yields Float values incremented by a Float step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with inclusive end and Integer values yields Integer values incremented by 1 and less than or equal to end when not passed a step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with inclusive end and Integer values yields Integer values incremented by an Integer step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with inclusive end and Integer, Float values yields Float values incremented by 1 and less than or equal to end when not passed a step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with inclusive end and Integer, Float values yields Float values incremented by a Float step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with inclusive end and Integer, Float values yields Float values incremented by an Integer step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with inclusive end and String values calls #succ on begin and each element returned by #succ",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with inclusive end and String values raises a TypeError when passed a Float step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with inclusive end and String values yields String values incremented by #succ and less than or equal to end when not passed a step",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#step with inclusive end and String values yields String values incremented by #succ called Integer step times",
      "group": "Range",
      "spec": "Range#step",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#to_a converts self to an array",
      "group": "Range",
      "spec": "Range#to_a",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#to_a returns empty array for descending-ordered",
      "group": "Range",
      "spec": "Range#to_a",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#to_a works with Ranges of Symbols",
      "group": "Range",
      "spec": "Range#to_a",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#to_s provides a printable form of self",
      "group": "Range",
      "spec": "Range#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range#to_s returns a tainted string if either end is tainted",
      "group": "Range",
      "spec": "Range#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range#to_s returns a untrusted string if either end is untrusted",
      "group": "Range",
      "spec": "Range#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range.new beginless/endless range allows endless right boundary",
      "group": "Range",
      "spec": "Range.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range.new beginless/endless range distinguishes ranges with included and excluded right boundary",
      "group": "Range",
      "spec": "Range.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range.new beginless/endless range does not allow range without left boundary",
      "group": "Range",
      "spec": "Range.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Range.new constructs a range using the given start and end",
      "group": "Range",
      "spec": "Range.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range.new does not rescue exception raised in #<=> when compares the given start and end",
      "group": "Range",
      "spec": "Range.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range.new includes the end object when the third parameter is omitted or false",
      "group": "Range",
      "spec": "Range.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Range.new raises an ArgumentError when the given start and end can't be compared by using #<=>",
      "group": "Range",
      "spec": "Range.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:RangeError is a superclass of FloatDomainError",
      "group": "RangeError",
      "spec": "RangeError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Rational includes Comparable",
      "group": "Rational",
      "spec": "Rational",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#% raises ZeroDivisionError on zero denominator",
      "group": "Rational",
      "spec": "Rational#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#% raises a ZeroDivisionError when the argument is 0.0",
      "group": "Rational",
      "spec": "Rational#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#% returns a Float value when the argument is Float",
      "group": "Rational",
      "spec": "Rational#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#% returns the remainder when this value is divided by other",
      "group": "Rational",
      "spec": "Rational#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#* calls #* on the coerced Rational with the coerced Object",
      "group": "Rational",
      "spec": "Rational#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#* calls #coerce on the passed argument with self",
      "group": "Rational",
      "spec": "Rational#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#* does not rescue exception raised in other#coerce",
      "group": "Rational",
      "spec": "Rational#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#* passed a Float returns self divided by other as a Float",
      "group": "Rational",
      "spec": "Rational#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#* passed a Rational returns self divided by other as a Rational",
      "group": "Rational",
      "spec": "Rational#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#* passed an Integer returns self divided by other as a Rational",
      "group": "Rational",
      "spec": "Rational#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#** calls #** on the coerced Rational with the coerced Object",
      "group": "Rational",
      "spec": "Rational#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#** calls #coerce on the passed argument with self",
      "group": "Rational",
      "spec": "Rational#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#** raises ZeroDivisionError for Rational(0, 1) passed a negative Integer",
      "group": "Rational",
      "spec": "Rational#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#** raises ZeroDivisionError for Rational(0, 1) passed a negative Rational",
      "group": "Rational",
      "spec": "Rational#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#** raises ZeroDivisionError for Rational(0, 1) passed a negative Rational with denominator 1",
      "group": "Rational",
      "spec": "Rational#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#** returns Infinity for Rational(0, 1) passed a negative Float",
      "group": "Rational",
      "spec": "Rational#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#** when passed Bignum raises ZeroDivisionError when self is Rational(0) and the exponent is negative",
      "group": "Rational",
      "spec": "Rational#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#** when passed Bignum returns 0.0 when self is > 1 and the exponent is negative",
      "group": "Rational",
      "spec": "Rational#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#** when passed Bignum returns Rational(-1) when self is Rational(-1) and the exponent is positive and odd",
      "group": "Rational",
      "spec": "Rational#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#** when passed Bignum returns Rational(0) when self is Rational(0) and the exponent is positive",
      "group": "Rational",
      "spec": "Rational#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#** when passed Bignum returns Rational(1) when self is Rational(-1) and the exponent is positive and even",
      "group": "Rational",
      "spec": "Rational#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#** when passed Bignum returns Rational(1) when self is Rational(1)",
      "group": "Rational",
      "spec": "Rational#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#** when passed Bignum returns positive Infinity when self is > 1",
      "group": "Rational",
      "spec": "Rational#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#** when passed Float returns Complex(1.0) when the passed argument is 0.0",
      "group": "Rational",
      "spec": "Rational#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#** when passed Float returns a complex number if self is negative and the passed argument is not 0",
      "group": "Rational",
      "spec": "Rational#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#** when passed Float returns self converted to Float and raised to the passed argument",
      "group": "Rational",
      "spec": "Rational#**",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#+ calls #+ on the coerced Rational with the coerced Object",
      "group": "Rational",
      "spec": "Rational#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#+ calls #coerce on the passed argument with self",
      "group": "Rational",
      "spec": "Rational#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#+ does not rescue exception raised in other#coerce",
      "group": "Rational",
      "spec": "Rational#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#+ with a Float returns the result of subtracting other from self as a Float",
      "group": "Rational",
      "spec": "Rational#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#+ with a Rational returns the result of subtracting other from self as a Rational",
      "group": "Rational",
      "spec": "Rational#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#+ with an Integer returns the result of subtracting other from self as a Rational",
      "group": "Rational",
      "spec": "Rational#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#- calls #- on the coerced Rational with the coerced Object",
      "group": "Rational",
      "spec": "Rational#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#- calls #coerce on the passed argument with self",
      "group": "Rational",
      "spec": "Rational#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#- does not rescue exception raised in other#coerce",
      "group": "Rational",
      "spec": "Rational#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#/ calls #/ on the coerced Rational with the coerced Object",
      "group": "Rational",
      "spec": "Rational#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#/ calls #coerce on the passed argument with self",
      "group": "Rational",
      "spec": "Rational#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#/ does not rescue exception raised in other#coerce",
      "group": "Rational",
      "spec": "Rational#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#/ when passed a Float returns infinity when passed 0",
      "group": "Rational",
      "spec": "Rational#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#/ when passed a Float returns self divided by other as a Float",
      "group": "Rational",
      "spec": "Rational#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#/ when passed a Rational raises a ZeroDivisionError when passed a Rational with a numerator of 0",
      "group": "Rational",
      "spec": "Rational#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#/ when passed a Rational returns self divided by other as a Rational",
      "group": "Rational",
      "spec": "Rational#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#/ when passed an Integer raises a ZeroDivisionError when passed 0",
      "group": "Rational",
      "spec": "Rational#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#/ when passed an Integer returns self divided by other as a Rational",
      "group": "Rational",
      "spec": "Rational#/",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#<=> when passed a Float object returns -1 when self is less than the passed argument",
      "group": "Rational",
      "spec": "Rational#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#<=> when passed a Float object returns 0 when self is equal to the passed argument",
      "group": "Rational",
      "spec": "Rational#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#<=> when passed a Float object returns 1 when self is greater than the passed argument",
      "group": "Rational",
      "spec": "Rational#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#<=> when passed a Integer object returns -1 when self is less than the passed argument",
      "group": "Rational",
      "spec": "Rational#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#<=> when passed a Integer object returns 0 when self is equal to the passed argument",
      "group": "Rational",
      "spec": "Rational#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#<=> when passed a Integer object returns 1 when self is greater than the passed argument",
      "group": "Rational",
      "spec": "Rational#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#<=> when passed a Rational object returns -1 when self is less than the passed argument",
      "group": "Rational",
      "spec": "Rational#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#<=> when passed a Rational object returns 0 when self is equal to the passed argument",
      "group": "Rational",
      "spec": "Rational#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#<=> when passed a Rational object returns 1 when self is greater than the passed argument",
      "group": "Rational",
      "spec": "Rational#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#<=> when passed a non-Numeric Object that doesn't respond to #coerce returns nil",
      "group": "Rational",
      "spec": "Rational#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#<=> when passed an Object that responds to #coerce calls #<=> on the coerced Rational with the coerced Object",
      "group": "Rational",
      "spec": "Rational#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#<=> when passed an Object that responds to #coerce calls #coerce on the passed argument with self",
      "group": "Rational",
      "spec": "Rational#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#<=> when passed an Object that responds to #coerce does not rescue exception raised in other#coerce",
      "group": "Rational",
      "spec": "Rational#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#== returns the result of calling #== with self on the passed argument",
      "group": "Rational",
      "spec": "Rational#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#== when passed a Float converts self to a Float and compares it with the passed argument",
      "group": "Rational",
      "spec": "Rational#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#== when passed a Rational returns true if self has the same numerator and denominator as the passed argument",
      "group": "Rational",
      "spec": "Rational#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#== when passed an Integer returns true if self has the passed argument as numerator and a denominator of 1",
      "group": "Rational",
      "spec": "Rational#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#abs returns self's absolute value",
      "group": "Rational",
      "spec": "Rational#abs",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#abs returns self's absolute value",
      "group": "Rational",
      "spec": "Rational#abs",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#ceil with a precision < 0 moves the truncation point n decimal places left",
      "group": "Rational",
      "spec": "Rational#ceil",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#ceil with a precision < 0 returns an Integer",
      "group": "Rational",
      "spec": "Rational#ceil",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#ceil with no arguments (precision = 0) returns an Integer",
      "group": "Rational",
      "spec": "Rational#ceil",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#ceil with no arguments (precision = 0) returns the truncated value toward positive infinity",
      "group": "Rational",
      "spec": "Rational#ceil",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#ceil with precision > 0 moves the truncation point n decimal places right",
      "group": "Rational",
      "spec": "Rational#ceil",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#ceil with precision > 0 returns a Rational",
      "group": "Rational",
      "spec": "Rational#ceil",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#denominator returns 1 if no denominator was given",
      "group": "Rational",
      "spec": "Rational#denominator",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#denominator returns the denominator",
      "group": "Rational",
      "spec": "Rational#denominator",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#div passed a Float performs integer division and returns the result",
      "group": "Rational",
      "spec": "Rational#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#div passed a Float raises a ZeroDivisionError when the argument is 0.0",
      "group": "Rational",
      "spec": "Rational#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#div passed a Rational performs integer division and returns the result",
      "group": "Rational",
      "spec": "Rational#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#div passed a Rational raises a ZeroDivisionError when the argument has a numerator of 0",
      "group": "Rational",
      "spec": "Rational#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#div passed a Rational raises a ZeroDivisionError when the argument has a numerator of 0.0",
      "group": "Rational",
      "spec": "Rational#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#div passed an Integer performs integer division and returns the result",
      "group": "Rational",
      "spec": "Rational#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#div passed an Integer raises a ZeroDivisionError when the argument is 0",
      "group": "Rational",
      "spec": "Rational#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#div raises a TypeError if passed a non-numeric argument",
      "group": "Rational",
      "spec": "Rational#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#div raises an ArgumentError if passed more than one argument",
      "group": "Rational",
      "spec": "Rational#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#div returns an Integer",
      "group": "Rational",
      "spec": "Rational#div",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#divmod when passed a Float raises a ZeroDivisionError when passed 0",
      "group": "Rational",
      "spec": "Rational#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#divmod when passed a Float returns the quotient as Integer and the remainder as Float",
      "group": "Rational",
      "spec": "Rational#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#divmod when passed a Float returns the quotient as Integer and the remainder as Float",
      "group": "Rational",
      "spec": "Rational#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#divmod when passed a Rational raises a ZeroDivisonError when passed a Rational with a numerator of 0",
      "group": "Rational",
      "spec": "Rational#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#divmod when passed a Rational returns the quotient as Integer and the remainder as Rational",
      "group": "Rational",
      "spec": "Rational#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#divmod when passed an Integer raises a ZeroDivisionError when passed 0",
      "group": "Rational",
      "spec": "Rational#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#divmod when passed an Integer returns the quotient as Integer and the remainder as Rational",
      "group": "Rational",
      "spec": "Rational#divmod",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#fdiv needs to be reviewed for spec completeness",
      "group": "Rational",
      "spec": "Rational#fdiv",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Rational#floor with a precision < 0 moves the truncation point n decimal places left",
      "group": "Rational",
      "spec": "Rational#floor",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#floor with a precision < 0 returns an integer",
      "group": "Rational",
      "spec": "Rational#floor",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#floor with a precision > 0 moves the truncation point n decimal places right",
      "group": "Rational",
      "spec": "Rational#floor",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#floor with a precision > 0 returns a Rational",
      "group": "Rational",
      "spec": "Rational#floor",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#floor with no arguments (precision = 0) returns an integer",
      "group": "Rational",
      "spec": "Rational#floor",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#floor with no arguments (precision = 0) returns the truncated value toward negative infinity",
      "group": "Rational",
      "spec": "Rational#floor",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#hash is static",
      "group": "Rational",
      "spec": "Rational#hash",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#inspect returns a string representation of self",
      "group": "Rational",
      "spec": "Rational#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#marshal_dump dumps numerator and denominator",
      "group": "Rational",
      "spec": "Rational#marshal_dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#marshal_dump is a private method",
      "group": "Rational",
      "spec": "Rational#marshal_dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#numerator returns the numerator",
      "group": "Rational",
      "spec": "Rational#numerator",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#quo calls #/ on the coerced Rational with the coerced Object",
      "group": "Rational",
      "spec": "Rational#quo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#quo calls #coerce on the passed argument with self",
      "group": "Rational",
      "spec": "Rational#quo",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#rationalize raises ArgumentError when passed more than one argument",
      "group": "Rational",
      "spec": "Rational#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#rationalize returns self with no argument",
      "group": "Rational",
      "spec": "Rational#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#rationalize simplifies self to the degree specified by a Float argument",
      "group": "Rational",
      "spec": "Rational#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#rationalize simplifies self to the degree specified by a Rational argument",
      "group": "Rational",
      "spec": "Rational#rationalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#remainder needs to be reviewed for spec completeness",
      "group": "Rational",
      "spec": "Rational#remainder",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Rational#round with a precision < 0 moves the truncation point n decimal places left",
      "group": "Rational",
      "spec": "Rational#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#round with a precision < 0 returns an integer",
      "group": "Rational",
      "spec": "Rational#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#round with a precision > 0 doesn't alter the value if the precision is too great",
      "group": "Rational",
      "spec": "Rational#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#round with a precision > 0 doesn't fail when rounding to an absurdly large positive precision",
      "group": "Rational",
      "spec": "Rational#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#round with a precision > 0 moves the truncation point n decimal places right",
      "group": "Rational",
      "spec": "Rational#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#round with a precision > 0 returns a Rational",
      "group": "Rational",
      "spec": "Rational#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#round with half option raise for a non-existent round mode",
      "group": "Rational",
      "spec": "Rational#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#round with half option returns a Rational when the precision is greater than 0",
      "group": "Rational",
      "spec": "Rational#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#round with half option returns an Integer when precision is not passed",
      "group": "Rational",
      "spec": "Rational#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#round with no arguments (precision = 0) returns an integer",
      "group": "Rational",
      "spec": "Rational#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#round with no arguments (precision = 0) returns the rounded value toward the nearest integer",
      "group": "Rational",
      "spec": "Rational#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#round with no arguments (precision = 0) returns the truncated value toward the nearest integer",
      "group": "Rational",
      "spec": "Rational#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#to_f returns self converted to a Float",
      "group": "Rational",
      "spec": "Rational#to_f",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#to_i converts self to an Integer by truncation",
      "group": "Rational",
      "spec": "Rational#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#to_i converts self to an Integer by truncation",
      "group": "Rational",
      "spec": "Rational#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#to_r fails when a BasicObject's to_r does not return a Rational",
      "group": "Rational",
      "spec": "Rational#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#to_r raises TypeError trying to convert BasicObject",
      "group": "Rational",
      "spec": "Rational#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#to_r returns self",
      "group": "Rational",
      "spec": "Rational#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#to_r works when a BasicObject has to_r",
      "group": "Rational",
      "spec": "Rational#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#to_s returns a string representation of self",
      "group": "Rational",
      "spec": "Rational#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#truncate with a precision < 0 moves the truncation point n decimal places left",
      "group": "Rational",
      "spec": "Rational#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#truncate with a precision < 0 returns an integer",
      "group": "Rational",
      "spec": "Rational#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#truncate with a precision > 0 moves the truncation point n decimal places right",
      "group": "Rational",
      "spec": "Rational#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#truncate with a precision > 0 returns a Rational",
      "group": "Rational",
      "spec": "Rational#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#truncate with no arguments (precision = 0) returns an integer",
      "group": "Rational",
      "spec": "Rational#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#truncate with no arguments (precision = 0) returns the truncated value toward 0",
      "group": "Rational",
      "spec": "Rational#truncate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#zero? returns false if the numerator isn't 0",
      "group": "Rational",
      "spec": "Rational#zero?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#zero? returns true if the numerator is 0",
      "group": "Rational",
      "spec": "Rational#zero?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Rational#zero? returns true if the numerator is 0.0",
      "group": "Rational",
      "spec": "Rational#zero?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp#== is true if other has the same #casefold? values",
      "group": "Regexp",
      "spec": "Regexp#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#== is true if self and other have the same character set code",
      "group": "Regexp",
      "spec": "Regexp#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#== is true if self and other have the same pattern",
      "group": "Regexp",
      "spec": "Regexp#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#== is true if self does not specify /n option and other does",
      "group": "Regexp",
      "spec": "Regexp#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#== is true if self specifies /n option and other does not",
      "group": "Regexp",
      "spec": "Regexp#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#=== is false if there is no match",
      "group": "Regexp",
      "spec": "Regexp#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#=== is true if there is a match",
      "group": "Regexp",
      "spec": "Regexp#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#=== returns false if it does not match a Symbol",
      "group": "Regexp",
      "spec": "Regexp#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#=== returns false if the other value cannot be coerced to a string",
      "group": "Regexp",
      "spec": "Regexp#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#=== returns true if it matches a Symbol",
      "group": "Regexp",
      "spec": "Regexp#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#=~ returns nil if the object is nil",
      "group": "Regexp",
      "spec": "Regexp#=~",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#=~ returns nil if there is no match",
      "group": "Regexp",
      "spec": "Regexp#=~",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#=~ returns the index of the first character of the matching region",
      "group": "Regexp",
      "spec": "Regexp#=~",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#=~ returns the index too, when argument is a Symbol",
      "group": "Regexp",
      "spec": "Regexp#=~",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#casefold? returns the value of the case-insensitive flag",
      "group": "Regexp",
      "spec": "Regexp#casefold?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#encoding defaults to US-ASCII if the Regexp contains only US-ASCII character",
      "group": "Regexp",
      "spec": "Regexp#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp#encoding defaults to UTF-8 if \\u escapes appear",
      "group": "Regexp",
      "spec": "Regexp#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp#encoding defaults to UTF-8 if a literal UTF-8 character appears",
      "group": "Regexp",
      "spec": "Regexp#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp#encoding ignores the default_internal encoding",
      "group": "Regexp",
      "spec": "Regexp#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp#encoding ignores the encoding and uses US-ASCII if the string has only ASCII characters",
      "group": "Regexp",
      "spec": "Regexp#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp#encoding returns BINARY if the 'n' modifier is supplied and non-US-ASCII characters are present",
      "group": "Regexp",
      "spec": "Regexp#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp#encoding returns EUC_JP if the 'e' modifier is supplied",
      "group": "Regexp",
      "spec": "Regexp#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp#encoding returns US_ASCII if the 'n' modifier is supplied and only US-ASCII characters are present",
      "group": "Regexp",
      "spec": "Regexp#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp#encoding returns UTF-8 if the 'u' modifier is supplied",
      "group": "Regexp",
      "spec": "Regexp#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp#encoding returns Windows-31J if the 's' modifier is supplied",
      "group": "Regexp",
      "spec": "Regexp#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp#encoding returns an Encoding object",
      "group": "Regexp",
      "spec": "Regexp#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp#encoding upgrades the encoding to that of an embedded String",
      "group": "Regexp",
      "spec": "Regexp#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp#eql? is true if other has the same #casefold? values",
      "group": "Regexp",
      "spec": "Regexp#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#eql? is true if self and other have the same character set code",
      "group": "Regexp",
      "spec": "Regexp#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#eql? is true if self and other have the same pattern",
      "group": "Regexp",
      "spec": "Regexp#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#eql? is true if self does not specify /n option and other does",
      "group": "Regexp",
      "spec": "Regexp#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#eql? is true if self specifies /n option and other does not",
      "group": "Regexp",
      "spec": "Regexp#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#fixed_encoding? returns false by default",
      "group": "Regexp",
      "spec": "Regexp#fixed_encoding?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#fixed_encoding? returns false if the 'n' modifier was supplied to the Regexp",
      "group": "Regexp",
      "spec": "Regexp#fixed_encoding?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#fixed_encoding? returns true if the 'e' modifier was supplied to the Regexp",
      "group": "Regexp",
      "spec": "Regexp#fixed_encoding?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#fixed_encoding? returns true if the 's' modifier was supplied to the Regexp",
      "group": "Regexp",
      "spec": "Regexp#fixed_encoding?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#fixed_encoding? returns true if the 'u' modifier was supplied to the Regexp",
      "group": "Regexp",
      "spec": "Regexp#fixed_encoding?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#fixed_encoding? returns true if the Regexp contains a UTF-8 literal",
      "group": "Regexp",
      "spec": "Regexp#fixed_encoding?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp#fixed_encoding? returns true if the Regexp contains a \\u escape",
      "group": "Regexp",
      "spec": "Regexp#fixed_encoding?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp#fixed_encoding? returns true if the Regexp was created with the Regexp::FIXEDENCODING option",
      "group": "Regexp",
      "spec": "Regexp#fixed_encoding?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#hash is based on the text and options of Regexp",
      "group": "Regexp",
      "spec": "Regexp#hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#hash is provided",
      "group": "Regexp",
      "spec": "Regexp#hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#hash returns the same value for two Regexps differing only in the /n option",
      "group": "Regexp",
      "spec": "Regexp#hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#initialize is a private method",
      "group": "Regexp",
      "spec": "Regexp#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#initialize raises a SecurityError on a Regexp literal",
      "group": "Regexp",
      "spec": "Regexp#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp#initialize raises a TypeError on an initialized non-literal Regexp",
      "group": "Regexp",
      "spec": "Regexp#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#inspect correctly escapes forward slashes /",
      "group": "Regexp",
      "spec": "Regexp#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#inspect does not include a character set code",
      "group": "Regexp",
      "spec": "Regexp#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#inspect does not include the 'o' option",
      "group": "Regexp",
      "spec": "Regexp#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#inspect does not over escape",
      "group": "Regexp",
      "spec": "Regexp#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#inspect doesn't over escape forward slashes",
      "group": "Regexp",
      "spec": "Regexp#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#inspect escapes 2 slashes in a row properly",
      "group": "Regexp",
      "spec": "Regexp#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#inspect returns a formatted string that would eval to the same regexp",
      "group": "Regexp",
      "spec": "Regexp#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#inspect returns options in the order 'mixn'",
      "group": "Regexp",
      "spec": "Regexp#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#match raises TypeError when the given argument cannot be coerced to String",
      "group": "Regexp",
      "spec": "Regexp#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#match raises TypeError when the given argument is an Exception",
      "group": "Regexp",
      "spec": "Regexp#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#match raises a TypeError on an uninitialized Regexp",
      "group": "Regexp",
      "spec": "Regexp#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#match resets $~ if passed nil",
      "group": "Regexp",
      "spec": "Regexp#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#match returns a MatchData object",
      "group": "Regexp",
      "spec": "Regexp#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#match returns a MatchData object, when argument is a Symbol",
      "group": "Regexp",
      "spec": "Regexp#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#match returns nil if the object is nil",
      "group": "Regexp",
      "spec": "Regexp#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#match returns nil if there is no match",
      "group": "Regexp",
      "spec": "Regexp#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#match with [string, position] when given a negative position matches the input at a given position",
      "group": "Regexp",
      "spec": "Regexp#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#match with [string, position] when given a negative position raises an ArgumentError for an invalid encoding",
      "group": "Regexp",
      "spec": "Regexp#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#match with [string, position] when given a negative position uses the start as a character offset",
      "group": "Regexp",
      "spec": "Regexp#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#match with [string, position] when given a positive position matches the input at a given position",
      "group": "Regexp",
      "spec": "Regexp#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#match with [string, position] when given a positive position raises an ArgumentError for an invalid encoding",
      "group": "Regexp",
      "spec": "Regexp#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#match with [string, position] when given a positive position uses the start as a character offset",
      "group": "Regexp",
      "spec": "Regexp#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#match with [string, position] when passed a block does not yield if there is no match",
      "group": "Regexp",
      "spec": "Regexp#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#match with [string, position] when passed a block returns the block result",
      "group": "Regexp",
      "spec": "Regexp#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#match with [string, position] when passed a block yields the MatchData",
      "group": "Regexp",
      "spec": "Regexp#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#match? returns false when does not match the given value",
      "group": "Regexp",
      "spec": "Regexp#match?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#match? returns false when given nil",
      "group": "Regexp",
      "spec": "Regexp#match?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#match? takes matching position as the 2nd argument",
      "group": "Regexp",
      "spec": "Regexp#match?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#match? when matches the given value returns true but does not set Regexp.last_match",
      "group": "Regexp",
      "spec": "Regexp#match?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#named_captures returns a Hash",
      "group": "Regexp",
      "spec": "Regexp#named_captures",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#named_captures returns an empty Hash when there are no capture groups",
      "group": "Regexp",
      "spec": "Regexp#named_captures",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#named_captures sets each element of the Array to the corresponding group's index",
      "group": "Regexp",
      "spec": "Regexp#named_captures",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#named_captures sets the keys of the Hash to the names of the capture groups",
      "group": "Regexp",
      "spec": "Regexp#named_captures",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#named_captures sets the values of the Hash to Arrays",
      "group": "Regexp",
      "spec": "Regexp#named_captures",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#named_captures works with duplicate capture group names",
      "group": "Regexp",
      "spec": "Regexp#named_captures",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#names returns all of the named captures",
      "group": "Regexp",
      "spec": "Regexp#names",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#names returns an Array",
      "group": "Regexp",
      "spec": "Regexp#names",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#names returns an empty Array if there are no named captures",
      "group": "Regexp",
      "spec": "Regexp#names",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#names returns each capture name only once",
      "group": "Regexp",
      "spec": "Regexp#names",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#names returns each named capture as a String",
      "group": "Regexp",
      "spec": "Regexp#names",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#names works with nested named captures",
      "group": "Regexp",
      "spec": "Regexp#names",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#options allows checking for presence of a certain option with bitwise &",
      "group": "Regexp",
      "spec": "Regexp#options",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#options does not include Regexp::FIXEDENCODING for a Regexp literal with the 'n' option",
      "group": "Regexp",
      "spec": "Regexp#options",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#options includes Regexp::FIXEDENCODING for a Regexp literal with the 'e' option",
      "group": "Regexp",
      "spec": "Regexp#options",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#options includes Regexp::FIXEDENCODING for a Regexp literal with the 's' option",
      "group": "Regexp",
      "spec": "Regexp#options",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#options includes Regexp::FIXEDENCODING for a Regexp literal with the 'u' option",
      "group": "Regexp",
      "spec": "Regexp#options",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#options includes Regexp::NOENCODING for a Regexp literal with the 'n' option",
      "group": "Regexp",
      "spec": "Regexp#options",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#options raises a TypeError on an uninitialized Regexp",
      "group": "Regexp",
      "spec": "Regexp#options",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#options returns 0 for a Regexp literal without options",
      "group": "Regexp",
      "spec": "Regexp#options",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#options returns a Fixnum bitvector of regexp options for the Regexp object",
      "group": "Regexp",
      "spec": "Regexp#options",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#source has US-ASCII encoding when created from an ASCII-only \\u{} literal",
      "group": "Regexp",
      "spec": "Regexp#source",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp#source has UTF-8 encoding when created from a non-ASCII-only \\u{} literal",
      "group": "Regexp",
      "spec": "Regexp#source",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp#source returns the original string of the pattern",
      "group": "Regexp",
      "spec": "Regexp#source",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#source will remove escape characters",
      "group": "Regexp",
      "spec": "Regexp#source",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#to_s deals properly with the two types of lookahead groups",
      "group": "Regexp",
      "spec": "Regexp#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#to_s deals properly with uncaptured groups",
      "group": "Regexp",
      "spec": "Regexp#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#to_s displays groups with options",
      "group": "Regexp",
      "spec": "Regexp#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#to_s displays options if included",
      "group": "Regexp",
      "spec": "Regexp#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#to_s displays single group with same options as main regex as the main regex",
      "group": "Regexp",
      "spec": "Regexp#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#to_s handles abusive option groups",
      "group": "Regexp",
      "spec": "Regexp#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#to_s returns a string in (?xxx:yyy) notation",
      "group": "Regexp",
      "spec": "Regexp#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#to_s shows all options as excluded if none are selected",
      "group": "Regexp",
      "spec": "Regexp#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#to_s shows non-included options after a - sign",
      "group": "Regexp",
      "spec": "Regexp#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#to_s shows the pattern after the options",
      "group": "Regexp",
      "spec": "Regexp#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp#~ matches against the contents of $_",
      "group": "Regexp",
      "spec": "Regexp#~",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a Regexp does not honour options given as additional arguments",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a Regexp preserves any options given in the Regexp literal",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a Regexp sets the encoding to EUC-JP if the Regexp literal has the 'e' option",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a Regexp sets the encoding to US-ASCII if the Regexp literal has the 'n' option and the source String is ASCII only",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a Regexp sets the encoding to UTF-8 if the Regexp literal has the 'u' option",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a Regexp sets the encoding to Windows-31J if the Regexp literal has the 's' option",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a Regexp sets the encoding to source String's encoding if the Regexp literal has the 'n' option and the source String is not ASCII only",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a Regexp uses the argument as a literal to construct a Regexp object",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String accepts a Fixnum of two or more options ORed together as the second argument",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String does not set Regexp options if only given one argument",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String does not set Regexp options if second argument is nil or false",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String ignores the third argument if it is 'e' or 'euc' (case-insensitive)",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String ignores the third argument if it is 's' or 'sjis' (case-insensitive)",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String ignores the third argument if it is 'u' or 'utf8' (case-insensitive)",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String raises a RegexpError when passed an incorrect regexp",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String sets options from second argument if it is one of the Fixnum option constants",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String treats any non-Fixnum, non-nil, non-false second argument as IGNORECASE",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String uses ASCII_8BIT encoding if third argument is 'n' or 'none' (case insensitive) and non-ascii characters",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String uses US_ASCII encoding if third argument is 'n' or 'none' (case insensitive) and only ascii characters",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String uses the String argument as an unescaped literal to construct a Regexp object",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\C-\\a'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\C-\\e'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\C-\\f'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\C-\\n'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\C-\\r'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\C-\\t'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\C-\\v'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\M-\\C-\\a'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\M-\\C-\\e'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\M-\\C-\\f'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\M-\\C-\\n'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\M-\\C-\\r'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\M-\\C-\\t'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\M-\\C-\\v'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\M-\\a'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\M-\\e'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\M-\\f'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\M-\\n'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\M-\\r'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\M-\\t'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\M-\\v'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\a'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\e'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\f'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\n'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\r'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\t'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts '\\v'",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts \\uHHHH followed by characters",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts \\uHHHH for a single Unicode codepoint",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts \\u{HHHHHH} for a single Unicode codepoint",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts \\u{HHHHH} for a single Unicode codepoint",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts \\u{HHHH} followed by characters",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts \\u{HHHH} for a single Unicode codepoint",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts \\u{HHH} for a single Unicode codepoint",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts \\u{HH} for a single Unicode codepoint",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts \\u{H} for a single Unicode codepoint",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts a backspace followed by a character",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts a combination of escaped octal and hexadecimal digits and \\uHHHH",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts a combination of escaped octal and hexadecimal digits and \\u{HHHH}",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts a one-digit hexadecimal value",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts a one-digit octal value",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts a three-digit octal value",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts a two-digit hexadecimal value",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts a two-digit octal value",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts an escaped string interpolation",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts characters and escaped hexadecimal digits",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts characters and escaped octal digits",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts characters followed by \\uHHHH",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts characters followed by \\u{HHHH}",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts escaped hexadecimal and octal digits",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts escaped hexadecimal digits and characters",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts escaped hexadecimal digits followed by \\uHHHH",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts escaped hexadecimal digits followed by \\u{HHHH}",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts escaped octal digits and characters",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts escaped octal digits followed by \\uHHHH",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts escaped octal digits followed by \\u{HHHH}",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters accepts multiple consecutive '\\' characters",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters does not raise a Regexp error if there is an escaped trailing backslash",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters interprets a digit following a three-digit octal value as a character",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters interprets a digit following a two-digit hexadecimal value as a character",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters raises a Regexp error if there is a trailing backslash",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters raises a RegexpError if \\x is not followed by any hexadecimal digits",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters raises a RegexpError if less than four digits are given for \\uHHHH",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters raises a RegexpError if more than six hexadecimal digits are given",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters raises a RegexpError if the \\u{} escape is empty",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters returns a Regexp with US-ASCII encoding if UTF-8 escape sequences using only 7-bit ASCII are present",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters returns a Regexp with US-ASCII encoding if only 7-bit ASCII characters are present regardless of the input String's encoding",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters returns a Regexp with UTF-8 encoding if any UTF-8 escape sequences outside 7-bit ASCII are present",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters returns a Regexp with source String having US-ASCII encoding if UTF-8 escape sequences using only 7-bit ASCII are present",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters returns a Regexp with source String having US-ASCII encoding if only 7-bit ASCII characters are present regardless of the input String's encoding",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters returns a Regexp with source String having UTF-8 encoding if any UTF-8 escape sequences outside 7-bit ASCII are present",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters returns a Regexp with source String having the input String's encoding",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile given a String with escaped characters returns a Regexp with the input String's encoding",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile requires one argument and creates a new regular expression object",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.compile works by default for subclasses with overridden #initialize",
      "group": "Regexp",
      "spec": "Regexp.compile",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.escape escapes any characters with special meaning in a regular expression",
      "group": "Regexp",
      "spec": "Regexp.escape",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.escape sets the encoding of the result to BINARY if any non-US-ASCII characters are present in an input String with invalid encoding",
      "group": "Regexp",
      "spec": "Regexp.escape",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.escape sets the encoding of the result to US-ASCII if there are only US-ASCII characters present in the input String",
      "group": "Regexp",
      "spec": "Regexp.escape",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.escape sets the encoding of the result to the encoding of the String if any non-US-ASCII characters are present in an input String with valid encoding",
      "group": "Regexp",
      "spec": "Regexp.escape",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.escape works with symbols",
      "group": "Regexp",
      "spec": "Regexp.escape",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.last_match returns MatchData instance when not passed arguments",
      "group": "Regexp",
      "spec": "Regexp.last_match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.last_match returns the nth field in this MatchData when passed a Fixnum",
      "group": "Regexp",
      "spec": "Regexp.last_match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Fixnum raises a TypeError",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Float raises a TypeError",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp does not honour options given as additional arguments",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp preserves any options given in the Regexp literal",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp sets the encoding to EUC-JP if the Regexp literal has the 'e' option",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp sets the encoding to US-ASCII if the Regexp literal has the 'n' option and the source String is ASCII only",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp sets the encoding to UTF-8 if the Regexp literal has the 'u' option",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp sets the encoding to Windows-31J if the Regexp literal has the 's' option",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp sets the encoding to source String's encoding if the Regexp literal has the 'n' option and the source String is not ASCII only",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp uses the argument as a literal to construct a Regexp object",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp with escaped characters accepts '\\M-\\C-\\a'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp with escaped characters accepts '\\M-\\C-\\e'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp with escaped characters accepts '\\M-\\C-\\f'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp with escaped characters accepts '\\M-\\C-\\n'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp with escaped characters accepts '\\M-\\C-\\r'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp with escaped characters accepts '\\M-\\C-\\t'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp with escaped characters accepts '\\M-\\C-\\v'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp with escaped characters accepts '\\M-\\a'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp with escaped characters accepts '\\M-\\e'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp with escaped characters accepts '\\M-\\f'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp with escaped characters accepts '\\M-\\n'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp with escaped characters accepts '\\M-\\r'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp with escaped characters accepts '\\M-\\t'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp with escaped characters accepts '\\M-\\v'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp with escaped characters accepts a three-digit octal value",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a Regexp with escaped characters interprets a digit following a three-digit octal value as a character",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String accepts a Fixnum of two or more options ORed together as the second argument",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String does not set Regexp options if only given one argument",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String does not set Regexp options if second argument is nil or false",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String ignores the third argument if it is 'e' or 'euc' (case-insensitive)",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String ignores the third argument if it is 's' or 'sjis' (case-insensitive)",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String ignores the third argument if it is 'u' or 'utf8' (case-insensitive)",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String raises a RegexpError when passed an incorrect regexp",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String sets options from second argument if it is one of the Fixnum option constants",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String treats any non-Fixnum, non-nil, non-false second argument as IGNORECASE",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String uses ASCII_8BIT encoding if third argument is 'n' or 'none' (case insensitive) and non-ascii characters",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String uses US_ASCII encoding if third argument is 'n' or 'none' (case insensitive) and only ascii characters",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String uses the String argument as an unescaped literal to construct a Regexp object",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts '\\C-\\a'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts '\\C-\\e'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts '\\C-\\f'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts '\\C-\\n'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts '\\C-\\r'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts '\\C-\\t'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts '\\C-\\v'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts '\\a'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts '\\e'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts '\\f'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts '\\n'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts '\\r'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts '\\t'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts '\\v'",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts \\uHHHH followed by characters",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts \\uHHHH for a single Unicode codepoint",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts \\u{HHHHHH} for a single Unicode codepoint",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts \\u{HHHHH} for a single Unicode codepoint",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts \\u{HHHH} followed by characters",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts \\u{HHHH} for a single Unicode codepoint",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts \\u{HHH} for a single Unicode codepoint",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts \\u{HH} for a single Unicode codepoint",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts \\u{H} for a single Unicode codepoint",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts a backspace followed by a character",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts a combination of escaped octal and hexadecimal digits and \\uHHHH",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts a combination of escaped octal and hexadecimal digits and \\u{HHHH}",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts a one-digit hexadecimal value",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts a one-digit octal value",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts a two-digit hexadecimal value",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts a two-digit octal value",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts an escaped string interpolation",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts characters and escaped hexadecimal digits",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts characters and escaped octal digits",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts characters followed by \\uHHHH",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts characters followed by \\u{HHHH}",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts escaped hexadecimal and octal digits",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts escaped hexadecimal digits and characters",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts escaped hexadecimal digits followed by \\uHHHH",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts escaped hexadecimal digits followed by \\u{HHHH}",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts escaped octal digits and characters",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts escaped octal digits followed by \\uHHHH",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts escaped octal digits followed by \\u{HHHH}",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters accepts multiple consecutive '\\' characters",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters does not raise a Regexp error if there is an escaped trailing backslash",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters interprets a digit following a two-digit hexadecimal value as a character",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters raises a Regexp error if there is a trailing backslash",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters raises a RegexpError if \\x is not followed by any hexadecimal digits",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters raises a RegexpError if less than four digits are given for \\uHHHH",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters raises a RegexpError if more than six hexadecimal digits are given",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters raises a RegexpError if the \\u{} escape is empty",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters returns a Regexp with US-ASCII encoding if UTF-8 escape sequences using only 7-bit ASCII are present",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters returns a Regexp with US-ASCII encoding if only 7-bit ASCII characters are present regardless of the input String's encoding",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters returns a Regexp with UTF-8 encoding if any UTF-8 escape sequences outside 7-bit ASCII are present",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters returns a Regexp with source String having US-ASCII encoding if UTF-8 escape sequences using only 7-bit ASCII are present",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters returns a Regexp with source String having US-ASCII encoding if only 7-bit ASCII characters are present regardless of the input String's encoding",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters returns a Regexp with source String having UTF-8 encoding if any UTF-8 escape sequences outside 7-bit ASCII are present",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters returns a Regexp with source String having the input String's encoding",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new given a String with escaped characters returns a Regexp with the input String's encoding",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new requires one argument and creates a new regular expression object",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.new works by default for subclasses with overridden #initialize",
      "group": "Regexp",
      "spec": "Regexp.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.quote escapes any characters with special meaning in a regular expression",
      "group": "Regexp",
      "spec": "Regexp.quote",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.quote sets the encoding of the result to BINARY if any non-US-ASCII characters are present in an input String with invalid encoding",
      "group": "Regexp",
      "spec": "Regexp.quote",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.quote sets the encoding of the result to US-ASCII if there are only US-ASCII characters present in the input String",
      "group": "Regexp",
      "spec": "Regexp.quote",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.quote sets the encoding of the result to the encoding of the String if any non-US-ASCII characters are present in an input String with valid encoding",
      "group": "Regexp",
      "spec": "Regexp.quote",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.quote works with symbols",
      "group": "Regexp",
      "spec": "Regexp.quote",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.try_convert returns nil if given an argument that can't be converted to a Regexp",
      "group": "Regexp",
      "spec": "Regexp.try_convert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.try_convert returns the argument if given a Regexp",
      "group": "Regexp",
      "spec": "Regexp.try_convert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.try_convert tries to coerce the argument by calling #to_regexp",
      "group": "Regexp",
      "spec": "Regexp.try_convert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union accepts a single array of patterns as arguments",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union quotes any string arguments",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union raises ArgumentError if the arguments include a String containing non-ASCII-compatible characters and a fixed encoding Regexp in a different encoding",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union raises ArgumentError if the arguments include a fixed encoding Regexp and a String containing non-ASCII-compatible characters in a different encoding",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible Regexp and a Regexp containing non-ASCII-compatible characters in a different encoding",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible Regexp and a String containing non-ASCII-compatible characters in a different encoding",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible Regexp and an ASCII-only Regexp",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible Regexp and an ASCII-only String",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible String and a Regexp containing non-ASCII-compatible characters in a different encoding",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible String and a String containing non-ASCII-compatible characters in a different encoding",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible String and an ASCII-only Regexp",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union raises ArgumentError if the arguments include an ASCII-incompatible String and an ASCII-only String",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union raises ArgumentError if the arguments include conflicting ASCII-incompatible Regexps",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union raises ArgumentError if the arguments include conflicting ASCII-incompatible Strings",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union raises ArgumentError if the arguments include conflicting fixed encoding Regexps",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union returns /(?!)/ when passed no arguments",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union returns a Regexp if an array of string with special characters is passed",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union returns a Regexp with US-ASCII encoding if all arguments are ASCII-only",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union returns a Regexp with UTF-8 if one part is UTF-8",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union returns a Regexp with the encoding of a String containing non-ASCII-compatible characters",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union returns a Regexp with the encoding of a String containing non-ASCII-compatible characters and another ASCII-only String",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union returns a Regexp with the encoding of an ASCII-incompatible String argument",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union returns a Regexp with the encoding of multiple non-conflicting ASCII-incompatible String arguments",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union returns a Regexp with the encoding of multiple non-conflicting Strings containing non-ASCII-compatible characters",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union returns a regular expression that will match passed arguments",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Regexp.union uses to_str to convert arguments (if not Regexp)",
      "group": "Regexp",
      "spec": "Regexp.union",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ScriptError is a superclass of LoadError",
      "group": "ScriptError",
      "spec": "ScriptError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ScriptError is a superclass of NotImplementedError",
      "group": "ScriptError",
      "spec": "ScriptError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:ScriptError is a superclass of SyntaxError",
      "group": "ScriptError",
      "spec": "ScriptError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SecureRandom.base64 generates a random base64 string out of 32 random bytes",
      "group": "SecureRandom",
      "spec": "SecureRandom.base64",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SecureRandom.base64 generates a random base64 string out of specified number of random bytes",
      "group": "SecureRandom",
      "spec": "SecureRandom.base64",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SecureRandom.base64 generates different base64 strings with subsequent invocations",
      "group": "SecureRandom",
      "spec": "SecureRandom.base64",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SecureRandom.base64 raises ArgumentError on negative arguments",
      "group": "SecureRandom",
      "spec": "SecureRandom.base64",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SecureRandom.base64 returns an empty string when argument is 0",
      "group": "SecureRandom",
      "spec": "SecureRandom.base64",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SecureRandom.base64 treats nil argument as default one and generates a random base64 string",
      "group": "SecureRandom",
      "spec": "SecureRandom.base64",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SecureRandom.base64 tries to convert the passed argument to an Integer using #to_int",
      "group": "SecureRandom",
      "spec": "SecureRandom.base64",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SecureRandom.hex generates a random hex string of length 32 if no argument is provided",
      "group": "SecureRandom",
      "spec": "SecureRandom.hex",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SecureRandom.hex generates a random hex string of length twice the specified argument",
      "group": "SecureRandom",
      "spec": "SecureRandom.hex",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SecureRandom.hex generates different hex strings with subsequent invocations",
      "group": "SecureRandom",
      "spec": "SecureRandom.hex",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SecureRandom.hex raises ArgumentError on negative arguments",
      "group": "SecureRandom",
      "spec": "SecureRandom.hex",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SecureRandom.hex returns an empty string when argument is 0",
      "group": "SecureRandom",
      "spec": "SecureRandom.hex",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SecureRandom.hex treats nil argument as default one and generates a random hex string of length 32",
      "group": "SecureRandom",
      "spec": "SecureRandom.hex",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SecureRandom.hex tries to convert the passed argument to an Integer using #to_int",
      "group": "SecureRandom",
      "spec": "SecureRandom.hex",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Signal.signame raises a TypeError when the passed argument can't be coerced to Integer",
      "group": "Signal",
      "spec": "Signal.signame",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.signame returns nil if the argument is an invalid signal number",
      "group": "Signal",
      "spec": "Signal.signame",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.signame takes a signal name with a well known signal number",
      "group": "Signal",
      "spec": "Signal.signame",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.signame the original should take precedence over alias when looked up by number",
      "group": "Signal",
      "spec": "Signal.signame",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap accepts 'DEFAULT' in place of a proc",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap accepts 'IGNORE' in place of a proc",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap accepts 'SIG_DFL' in place of a proc",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap accepts 'SIG_IGN' in place of a proc",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap accepts 'SYSTEM_DEFAULT' and uses the OS handler for SIGPIPE",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap accepts :DEFAULT in place of a proc",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap accepts :IGNORE in place of a proc",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap accepts :SIG_DFL in place of a proc",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap accepts :SIG_IGN in place of a proc",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap accepts a block in place of a proc/command argument",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap accepts long names as Strings",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap accepts long names as Symbols",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap accepts short names as Strings",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap accepts short names as Symbols",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap allows to register a handler for all known signals, except reserved signals for which it raises ArgumentError",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap ignores the signal when passed nil",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap is possible to create a new Thread when the handler runs",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap raises ArgumentError or Errno::EINVAL for SIGKILL",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap raises ArgumentError or Errno::EINVAL for SIGSTOP",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap registers an handler doing nothing with :IGNORE",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap returns 'DEFAULT' for the initial SIGINT handler",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap returns SYSTEM_DEFAULT if passed DEFAULT and no handler was ever set",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap returns the previous handler",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap the special EXIT signal code accepts the EXIT code",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap the special EXIT signal code can unset the handler",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Signal.trap the special EXIT signal code runs the proc before at_exit handlers",
      "group": "Signal",
      "spec": "Signal.trap",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SignalException#signm needs to be reviewed for spec completeness",
      "group": "SignalException",
      "spec": "SignalException#signm",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SignalException#signo needs to be reviewed for spec completeness",
      "group": "SignalException",
      "spec": "SignalException#signo",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SignalException.new raises an exception for an optional argument with a signal name",
      "group": "SignalException",
      "spec": "SignalException.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SignalException.new raises an exception with an invalid signal name",
      "group": "SignalException",
      "spec": "SignalException.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SignalException.new raises an exception with an invalid signal name",
      "group": "SignalException",
      "spec": "SignalException.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SignalException.new raises an exception with an invalid signal number",
      "group": "SignalException",
      "spec": "SignalException.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SignalException.new takes a signal name with SIG prefix as the first argument",
      "group": "SignalException",
      "spec": "SignalException.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SignalException.new takes a signal name without SIG prefix as the first argument",
      "group": "SignalException",
      "spec": "SignalException.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SignalException.new takes a signal number as the first argument",
      "group": "SignalException",
      "spec": "SignalException.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SignalException.new takes a signal symbol with SIG prefix as the first argument",
      "group": "SignalException",
      "spec": "SignalException.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SignalException.new takes a signal symbol without SIG prefix as the first argument",
      "group": "SignalException",
      "spec": "SignalException.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SignalException.new takes an optional message argument with a signal number",
      "group": "SignalException",
      "spec": "SignalException.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#<< adds an element to the Queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#<< blocks if queued elements exceed size",
      "group": "SizedQueue",
      "spec": "SizedQueue#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#<< interrupts enqueuing threads with ClosedQueueError when the queue is closed",
      "group": "SizedQueue",
      "spec": "SizedQueue#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#<< is an error for a closed queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#<< raises a ThreadError if queued elements exceed size when not blocking",
      "group": "SizedQueue",
      "spec": "SizedQueue#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#clear removes all objects from the queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#clear",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#close may be called multiple times",
      "group": "SizedQueue",
      "spec": "SizedQueue#close",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#close returns self",
      "group": "SizedQueue",
      "spec": "SizedQueue#close",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#closed? returns false initially",
      "group": "SizedQueue",
      "spec": "SizedQueue#closed?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#closed? returns true when the queue is closed",
      "group": "SizedQueue",
      "spec": "SizedQueue#closed?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#deq blocks the thread until there are items in the queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#deq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#deq in non-blocking mode raises a ThreadError for a closed empty queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#deq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#deq in non-blocking mode raises a ThreadError if the queue is empty",
      "group": "SizedQueue",
      "spec": "SizedQueue#deq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#deq in non-blocking mode removes an item from a closed queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#deq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#deq in non-blocking mode removes an item from the queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#deq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#deq removes an item from a closed queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#deq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#deq removes an item from the queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#deq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#deq returns items in the order they were added",
      "group": "SizedQueue",
      "spec": "SizedQueue#deq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#deq returns nil for a closed empty queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#deq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#deq returns nil for an empty queue that becomes closed",
      "group": "SizedQueue",
      "spec": "SizedQueue#deq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#empty? returns false when Queue is not empty",
      "group": "SizedQueue",
      "spec": "SizedQueue#empty?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#empty? returns true on an empty Queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#empty?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#enq adds an element to the Queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#enq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#enq blocks if queued elements exceed size",
      "group": "SizedQueue",
      "spec": "SizedQueue#enq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#enq interrupts enqueuing threads with ClosedQueueError when the queue is closed",
      "group": "SizedQueue",
      "spec": "SizedQueue#enq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#enq is an error for a closed queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#enq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#enq raises a ThreadError if queued elements exceed size when not blocking",
      "group": "SizedQueue",
      "spec": "SizedQueue#enq",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#length returns the number of elements",
      "group": "SizedQueue",
      "spec": "SizedQueue#length",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#max returns the size of the queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#max",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#max= does not remove items already in the queue beyond the maximum",
      "group": "SizedQueue",
      "spec": "SizedQueue#max=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#max= raises a TypeError when given a non-numeric value",
      "group": "SizedQueue",
      "spec": "SizedQueue#max=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#max= raises an argument error when set to a negative number",
      "group": "SizedQueue",
      "spec": "SizedQueue#max=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#max= raises an argument error when set to zero",
      "group": "SizedQueue",
      "spec": "SizedQueue#max=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#max= sets the size of the queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#max=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#num_waiting reports the number of threads waiting to push",
      "group": "SizedQueue",
      "spec": "SizedQueue#num_waiting",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#pop blocks the thread until there are items in the queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#pop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#pop in non-blocking mode raises a ThreadError for a closed empty queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#pop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#pop in non-blocking mode raises a ThreadError if the queue is empty",
      "group": "SizedQueue",
      "spec": "SizedQueue#pop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#pop in non-blocking mode removes an item from a closed queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#pop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#pop in non-blocking mode removes an item from the queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#pop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#pop removes an item from a closed queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#pop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#pop removes an item from the queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#pop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#pop returns items in the order they were added",
      "group": "SizedQueue",
      "spec": "SizedQueue#pop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#pop returns nil for a closed empty queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#pop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#pop returns nil for an empty queue that becomes closed",
      "group": "SizedQueue",
      "spec": "SizedQueue#pop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#push adds an element to the Queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#push",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#push blocks if queued elements exceed size",
      "group": "SizedQueue",
      "spec": "SizedQueue#push",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#push interrupts enqueuing threads with ClosedQueueError when the queue is closed",
      "group": "SizedQueue",
      "spec": "SizedQueue#push",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#push is an error for a closed queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#push",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#push raises a ThreadError if queued elements exceed size when not blocking",
      "group": "SizedQueue",
      "spec": "SizedQueue#push",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#shift blocks the thread until there are items in the queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#shift in non-blocking mode raises a ThreadError for a closed empty queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#shift in non-blocking mode raises a ThreadError if the queue is empty",
      "group": "SizedQueue",
      "spec": "SizedQueue#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#shift in non-blocking mode removes an item from a closed queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#shift in non-blocking mode removes an item from the queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#shift removes an item from a closed queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#shift removes an item from the queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#shift returns items in the order they were added",
      "group": "SizedQueue",
      "spec": "SizedQueue#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#shift returns nil for a closed empty queue",
      "group": "SizedQueue",
      "spec": "SizedQueue#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#shift returns nil for an empty queue that becomes closed",
      "group": "SizedQueue",
      "spec": "SizedQueue#shift",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue#size returns the number of elements",
      "group": "SizedQueue",
      "spec": "SizedQueue#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue.new raises a TypeError when the given argument is not Numeric",
      "group": "SizedQueue",
      "spec": "SizedQueue.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue.new raises an argument error when no argument is given",
      "group": "SizedQueue",
      "spec": "SizedQueue.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue.new raises an argument error when the given argument is negative",
      "group": "SizedQueue",
      "spec": "SizedQueue.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SizedQueue.new raises an argument error when the given argument is zero",
      "group": "SizedQueue",
      "spec": "SizedQueue.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:StandardError is a superclass of ArgumentError",
      "group": "StandardError",
      "spec": "StandardError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StandardError is a superclass of FrozenError",
      "group": "StandardError",
      "spec": "StandardError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StandardError is a superclass of IOError",
      "group": "StandardError",
      "spec": "StandardError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StandardError is a superclass of IndexError",
      "group": "StandardError",
      "spec": "StandardError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StandardError is a superclass of LocalJumpError",
      "group": "StandardError",
      "spec": "StandardError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StandardError is a superclass of NameError",
      "group": "StandardError",
      "spec": "StandardError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StandardError is a superclass of RangeError",
      "group": "StandardError",
      "spec": "StandardError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StandardError is a superclass of RegexpError",
      "group": "StandardError",
      "spec": "StandardError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StandardError is a superclass of RuntimeError",
      "group": "StandardError",
      "spec": "StandardError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StandardError is a superclass of SystemCallError",
      "group": "StandardError",
      "spec": "StandardError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StandardError is a superclass of ThreadError",
      "group": "StandardError",
      "spec": "StandardError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StandardError is a superclass of TypeError",
      "group": "StandardError",
      "spec": "StandardError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StandardError is a superclass of ZeroDivisionError",
      "group": "StandardError",
      "spec": "StandardError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StopIteration is a subclass of IndexError",
      "group": "StopIteration",
      "spec": "StopIteration",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StopIteration#result returns the method-returned-object from an Enumerator",
      "group": "StopIteration",
      "spec": "StopIteration#result",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String includes Comparable",
      "group": "String",
      "spec": "String",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% allows a star to take an argument number to use as the width",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% allows more than one digit of position",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% allows negative width to imply '-' flag",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% allows positional arguments for width star and precision star arguments",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% allows reuse of the one argument multiple via absolute argument numbers",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% always allows unused arguments when positional argument style is used",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% always interprets an array argument as a list of argument parameters",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% always interprets an array subclass argument as a list of argument parameters",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% always taints the result when the format string is tainted",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% behaves as if calling Kernel#Float for %E arguments, when the passed argument does not respond to #to_ary",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% behaves as if calling Kernel#Float for %E arguments, when the passed argument is hexadecimal string",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% behaves as if calling Kernel#Float for %G arguments, when the passed argument does not respond to #to_ary",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% behaves as if calling Kernel#Float for %G arguments, when the passed argument is hexadecimal string",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% behaves as if calling Kernel#Float for %e arguments, when the passed argument does not respond to #to_ary",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% behaves as if calling Kernel#Float for %e arguments, when the passed argument is hexadecimal string",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% behaves as if calling Kernel#Float for %f arguments, when the passed argument does not respond to #to_ary",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% behaves as if calling Kernel#Float for %f arguments, when the passed argument is hexadecimal string",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% behaves as if calling Kernel#Float for %g arguments, when the passed argument does not respond to #to_ary",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% behaves as if calling Kernel#Float for %g arguments, when the passed argument is hexadecimal string",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% behaves as if calling Kernel#Integer for %X argument, if it does not respond to #to_ary",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% behaves as if calling Kernel#Integer for %b argument, if it does not respond to #to_ary",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% behaves as if calling Kernel#Integer for %d argument, if it does not respond to #to_ary",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% behaves as if calling Kernel#Integer for %i argument, if it does not respond to #to_ary",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% behaves as if calling Kernel#Integer for %o argument, if it does not respond to #to_ary",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% behaves as if calling Kernel#Integer for %u argument, if it does not respond to #to_ary",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% behaves as if calling Kernel#Integer for %x argument, if it does not respond to #to_ary",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% calls #to_ary on argument for %c formats",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% calls #to_ary to convert the argument",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% calls #to_int on argument for %c formats, if the argument does not respond to #to_ary",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% calls inspect on arguments for %p format",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% calls to_int on width star and precision star tokens",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% calls to_s on non-String arguments for %s format",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% calls to_str on argument for %c formats",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% does not call #to_a to convert the argument",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% doesn't return subclass instances when called on a subclass",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% doesn't taint the result for %E when argument is tainted",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% doesn't taint the result for %G when argument is tainted",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% doesn't taint the result for %e when argument is tainted",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% doesn't taint the result for %f when argument is tainted",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% doesn't taint the result for %g when argument is tainted",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% faulty key raises a KeyError",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% faulty key sets the Hash as the receiver of KeyError",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% faulty key sets the unmatched key as the key of KeyError",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% flags # applies to format o does nothing for negative argument",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% flags # applies to format o increases the precision until the first digit will be `0' if it is not formatted as complements",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% flags # applies to formats aAeEfgG changes format from dd.dddd to exponential form for gG",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% flags # applies to formats aAeEfgG forces a decimal point to be added, even if no digits follow",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% flags # applies to formats bBxX does nothing for zero argument",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% flags # applies to formats bBxX prefixes the result with 0x, 0X, 0b and 0B respectively for non-zero argument",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% flags # applies to gG does not remove trailing zeros",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% flags (digit)$ ignores '-' sign",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% flags (digit)$ raises ArgumentError exception when absolute and relative argument numbers are mixed",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% flags (digit)$ raises exception if argument number is bigger than actual arguments list",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% flags (digit)$ specifies the absolute argument number for this field",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% flags * left-justifies the result if specified with $ argument is negative",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% flags * left-justifies the result if width is negative",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% flags * raises ArgumentError when is mixed with width",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% flags * uses the previous argument as the field width",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% flags * uses the specified argument as the width if * is followed by a number and $",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% flags + applies to numeric formats bBdiouxXaAeEfgG adds a leading plus sign to non-negative numbers",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% flags + applies to numeric formats bBdiouxXaAeEfgG does not use two's complement form for negative numbers for formats bBoxX",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% flags - left-justifies the result of conversion if width is specified",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% flags 0 (zero) applies to numeric formats bBdiouxXaAeEfgG and width is specified pads with zeros, not spaces",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% flags 0 (zero) applies to numeric formats bBdiouxXaAeEfgG and width is specified uses radix-1 when displays negative argument as a two's complement",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% flags space applies to numeric formats bBdiouxXeEfgGaA does not leave a space at the start of negative numbers",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% flags space applies to numeric formats bBdiouxXeEfgGaA leaves a space at the start of non-negative numbers",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% flags space applies to numeric formats bBdiouxXeEfgGaA prevents converting negative argument to two's complement form",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% flags space applies to numeric formats bBdiouxXeEfgGaA treats several white spaces as one",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats A converts floating point argument as [-]0xh.hhhhp[+-]dd and use uppercase X and P",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats A displays Float::INFINITY as Inf",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats A displays Float::NAN as NaN",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats E converts argument into exponential notation [-]d.dddddde[+-]dd",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats E cuts excessive digits and keeps only 6 ones",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats E displays Float::INFINITY as Inf",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats E displays Float::NAN as NaN",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats E rounds the last significant digit to the closest one",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats G displays Float::INFINITY as Inf",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats G displays Float::NAN as NaN",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats G otherwise converts a floating point number in dd.dddd form",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats G otherwise cuts excessive digits in fractional part and keeps only 4 ones",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats G otherwise cuts fraction part to have only 6 digits at all",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats G otherwise rounds the last significant digit to the closest one in fractional part",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats G the exponent is greater than or equal to the precision (6 by default) converts a floating point number using exponential form",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats G the exponent is less than -4 converts a floating point number using exponential form",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats a converts floating point argument as [-]0xh.hhhhp[+-]dd",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats a displays Float::INFINITY as Inf",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats a displays Float::NAN as NaN",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats converts argument into Float",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats e converts argument into exponential notation [-]d.dddddde[+-]dd",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats e cuts excessive digits and keeps only 6 ones",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats e displays Float::INFINITY as Inf",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats e displays Float::NAN as NaN",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats e rounds the last significant digit to the closest one",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats f converts floating point argument as [-]ddd.dddddd",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats f cuts excessive digits and keeps only 6 ones",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats f displays Float::INFINITY as Inf",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats f displays Float::NAN as NaN",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats f rounds the last significant digit to the closest one",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats g displays Float::INFINITY as Inf",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats g displays Float::NAN as NaN",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats g otherwise converts a floating point number in dd.dddd form",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats g otherwise cuts excessive digits in fractional part and keeps only 4 ones",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats g otherwise cuts fraction part to have only 6 digits at all",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats g otherwise rounds the last significant digit to the closest one in fractional part",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats g the exponent is greater than or equal to the precision (6 by default) converts a floating point number using exponential form",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats g the exponent is less than -4 converts a floating point number using exponential form",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% float formats raises TypeError exception if cannot convert to Float",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% formats %% into %",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% formats expressions mid string",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% formats multiple expressions",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% formats negative values with a leading sign using %u",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% formats single % character before a NUL as literal %",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% formats single % character before a newline as literal %",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% formats zero without prefix using %#X",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% formats zero without prefix using %#x",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% ignores negative precision",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% ignores unused arguments when $DEBUG is false",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats B collapse negative number representation if it equals 1",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats B converts argument as a binary number",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats B displays negative number as a two's complement prefixed with '..1'",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats X collapse negative number representation if it equals F",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats X converts argument as a hexadecimal number with uppercase letters",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats X displays negative number as a two's complement prefixed with '..f'",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats b collapse negative number representation if it equals 1",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats b converts argument as a binary number",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats b displays negative number as a two's complement prefixed with '..1'",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats converts String argument with Kernel#Integer",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats converts argument into Integer with to_i if to_int isn't available",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats converts argument into Integer with to_int",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats d converts argument as a decimal number",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats d works well with large numbers",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats i converts argument as a decimal number",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats i works well with large numbers",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats o collapse negative number representation if it equals 7",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats o converts argument as an octal number",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats o displays negative number as a two's complement prefixed with '..7'",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats raises TypeError exception if cannot convert to Integer",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats u converts argument as a decimal number",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats u works well with large numbers",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats x collapse negative number representation if it equals f",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats x converts argument as a hexadecimal number",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% integer formats x displays negative number as a two's complement prefixed with '..f'",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% other formats % alone raises an ArgumentError",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% other formats % is escaped by %",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% other formats c displays character if argument is a numeric code of character",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% other formats c displays character if argument is a single character string",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% other formats c raises ArgumentError if argument is a string of several characters",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% other formats c raises ArgumentError if argument is an empty string",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% other formats c supports Unicode characters",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% other formats p displays argument.inspect value",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% other formats s converts argument to string with to_s",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% other formats s does not try to convert with to_str",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% other formats s substitute argument passes as a string",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% output's encoding is the same as the format string if passed value is encoding-compatible",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% output's encoding negotiates a compatible encoding if necessary",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% output's encoding raises if a compatible encoding can't be found",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% pads with spaces for %E with Inf, -Inf, and NaN",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% precision float types controls the number of decimal places displayed in fraction part",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% precision float types does not affect G format",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% precision integer types controls the number of decimal places displayed",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% precision string formats determines the maximum number of characters to be copied from the string",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% raises Encoding::CompatibilityError if both encodings are ASCII compatible and there ano not ASCII characters",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% raises a TypeError if #to_ary does not return an Array",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% raises an ArgumentError for huge precisions for %s",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% raises an ArgumentError for unused arguments when $DEBUG is true",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% raises an ArgumentError when a width star token is seen after a width token",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% raises an ArgumentError when absolute and relative argument numbers are mixed",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% raises an ArgumentError when given invalid argument specifiers",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% raises an ArgumentError when multiple positional argument tokens are given for one format specifier",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% raises an ArgumentError when multiple precision tokens are given",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% raises an ArgumentError when multiple width star tokens are given for one format specifier",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% raises an ArgumentError when there are less arguments than format specifiers",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% raises an error if NULL or \\n appear anywhere else in the format string",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% raises an error if single % appears anywhere else",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% raises an error if single % appears at the end",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% raises an exception for multiple character strings as argument for %c",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% reference by name %<name>s style allows to place name in any position",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% reference by name %<name>s style cannot be mixed with unnamed style",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% reference by name %<name>s style supports flags, width, precision and type",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% reference by name %<name>s style uses value passed in a hash argument",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% reference by name %{name} style cannot be mixed with unnamed style",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% reference by name %{name} style converts value to String with to_s",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% reference by name %{name} style does not support type style",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% reference by name %{name} style raises KeyError when there is no matching key",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% reference by name %{name} style supports flags, width and precision",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% reference by name %{name} style uses value passed in a hash argument",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% replaces trailing absolute argument specifier without type with percent sign",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% respects a space padding request not as part of the width",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% respects positional arguments and precision tokens given for one format specifier",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% returns a String in the argument's encoding if format encoding is more restrictive",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% returns a String in the same encoding as the format String if compatible",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% supports binary formats using %B with same behaviour as %b except for using 0B instead of 0b for #",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% supports binary formats using %b for negative numbers",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% supports binary formats using %b for positive numbers",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% supports character formats using %c",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% supports float formats using %E",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% supports float formats using %E, but Inf, -Inf, and NaN are not floats",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% supports float formats using %G",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% supports float formats using %e",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% supports float formats using %e, but Inf, -Inf, and NaN are not floats",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% supports float formats using %f",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% supports float formats using %g",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% supports hex formats using %X for negative numbers",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% supports hex formats using %X for positive numbers",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% supports hex formats using %x for negative numbers",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% supports hex formats using %x for positive numbers",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% supports inspect formats using %p",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% supports integer formats using %d",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% supports integer formats using %i",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% supports negative bignums with %u or %d",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% supports negative integers using %d",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% supports negative integers using %d, giving priority to `-`",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% supports negative integers using %i",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% supports negative integers using %i, giving priority to `-`",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% supports octal formats using %o for negative numbers",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% supports octal formats using %o for positive numbers",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% supports single character strings as argument for %c",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% supports string formats using %s",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% supports unsigned formats using %u",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% taints result for %p when argument.inspect is tainted",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% taints result for %s when argument is tainted",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% tries to convert the argument to Array by calling #to_ary",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% tries to convert the passed argument to an Array using #to_ary",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% tries to convert the passed argument to an Array using #to_ary",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% tries to convert the passed argument to an Array using #to_ary",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% tries to convert the passed argument to an Array using #to_ary",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% tries to convert the passed argument to an Array using #to_ary",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% when format string contains %<> formats raises KeyError if key is missing from passed-in hash",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% when format string contains %<> formats should raise ArgumentError if no hash given",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% when format string contains %<> formats uses the named argument for the format's value",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% when format string contains %{} sections replaces %{} sections with values from passed-in hash",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% when format string contains %{} sections should raise ArgumentError if no hash given",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% when key is missing from passed-in hash raises a KeyError",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% when key is missing from passed-in hash sets the Hash as the receiver of KeyError",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% when key is missing from passed-in hash sets the unmatched key as the key of KeyError",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#% width is ignored if argument's actual length is greater",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% width specifies the minimum number of characters that will be written to the result",
      "group": "String",
      "spec": "String#%",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#% wraps the object in an Array if #to_ary returns nil",
      "group": "String",
      "spec": "String#%",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#* always taints the result when self is tainted",
      "group": "String",
      "spec": "String#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#* raises a RangeError when given integer is a Bignum",
      "group": "String",
      "spec": "String#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#* raises an ArgumentError if the length of the resulting string doesn't fit into a long",
      "group": "String",
      "spec": "String#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#* raises an ArgumentError when given integer is negative",
      "group": "String",
      "spec": "String#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#* returns a String in the same encoding as self",
      "group": "String",
      "spec": "String#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#* returns a new string containing count copies of self",
      "group": "String",
      "spec": "String#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#* returns subclass instances",
      "group": "String",
      "spec": "String#*",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#* tries to convert the given argument to an integer using to_int",
      "group": "String",
      "spec": "String#*",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#+ converts any non-String argument with #to_str",
      "group": "String",
      "spec": "String#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#+ doesn't return subclass instances",
      "group": "String",
      "spec": "String#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#+ raises a TypeError when given any object that fails #to_str",
      "group": "String",
      "spec": "String#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#+ returns a new string containing the given string concatenated to self",
      "group": "String",
      "spec": "String#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#+ taints the result when self or other is tainted",
      "group": "String",
      "spec": "String#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#+ when self and the argument are in different ASCII-compatible encodings raises Encoding::CompatibilityError if neither are ASCII-only",
      "group": "String",
      "spec": "String#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#+ when self and the argument are in different ASCII-compatible encodings uses self's encoding if both are ASCII-only",
      "group": "String",
      "spec": "String#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#+ when self and the argument are in different ASCII-compatible encodings uses self's encoding if the argument is ASCII-only",
      "group": "String",
      "spec": "String#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#+ when self and the argument are in different ASCII-compatible encodings uses the argument's encoding if self is ASCII-only",
      "group": "String",
      "spec": "String#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#+ when self is BINARY and argument is US-ASCII uses BINARY encoding",
      "group": "String",
      "spec": "String#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#+ when self is in an ASCII-incompatible encoding incompatible with the argument's encoding raises Encoding::CompatibilityError if neither are empty",
      "group": "String",
      "spec": "String#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#+ when self is in an ASCII-incompatible encoding incompatible with the argument's encoding uses self's encoding if both are empty",
      "group": "String",
      "spec": "String#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#+ when self is in an ASCII-incompatible encoding incompatible with the argument's encoding uses self's encoding if the argument is empty",
      "group": "String",
      "spec": "String#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#+ when self is in an ASCII-incompatible encoding incompatible with the argument's encoding uses the argument's encoding if self is empty",
      "group": "String",
      "spec": "String#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#+ when the argument is in an ASCII-incompatible encoding incompatible with self's encoding raises Encoding::CompatibilityError if neither are empty",
      "group": "String",
      "spec": "String#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#+ when the argument is in an ASCII-incompatible encoding incompatible with self's encoding uses self's encoding if both are empty",
      "group": "String",
      "spec": "String#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#+ when the argument is in an ASCII-incompatible encoding incompatible with self's encoding uses self's encoding if the argument is empty",
      "group": "String",
      "spec": "String#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#+ when the argument is in an ASCII-incompatible encoding incompatible with self's encoding uses the argument's encoding if self is empty",
      "group": "String",
      "spec": "String#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#+@ returns an unfrozen copy of a frozen String",
      "group": "String",
      "spec": "String#+@",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#+@ returns mutable copy despite freeze-magic-comment in file",
      "group": "String",
      "spec": "String#+@",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#+@ returns self if the String is not frozen",
      "group": "String",
      "spec": "String#+@",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#-@ deduplicates frozen strings",
      "group": "String",
      "spec": "String#-@",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#-@ returns a frozen copy if the String is not frozen",
      "group": "String",
      "spec": "String#-@",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#-@ returns self if the String is frozen",
      "group": "String",
      "spec": "String#-@",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#-@ returns the same object for equal unfrozen strings",
      "group": "String",
      "spec": "String#-@",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#-@ returns the same object when it's called on the same String literal",
      "group": "String",
      "spec": "String#-@",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#<< concatenates the given argument to self and returns self",
      "group": "String",
      "spec": "String#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<< converts the given argument to a String using to_str",
      "group": "String",
      "spec": "String#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#<< raises a FrozenError when self is frozen",
      "group": "String",
      "spec": "String#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<< raises a TypeError if the given argument can't be converted to a String",
      "group": "String",
      "spec": "String#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#<< returns a String when given a subclass instance",
      "group": "String",
      "spec": "String#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<< returns an instance of same class when called on a subclass",
      "group": "String",
      "spec": "String#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<< taints self if other is tainted",
      "group": "String",
      "spec": "String#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#<< untrusts self if other is untrusted",
      "group": "String",
      "spec": "String#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#<< when self and the argument are in different ASCII-compatible encodings raises Encoding::CompatibilityError if neither are ASCII-only",
      "group": "String",
      "spec": "String#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#<< when self and the argument are in different ASCII-compatible encodings uses self's encoding if both are ASCII-only",
      "group": "String",
      "spec": "String#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<< when self and the argument are in different ASCII-compatible encodings uses self's encoding if the argument is ASCII-only",
      "group": "String",
      "spec": "String#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<< when self and the argument are in different ASCII-compatible encodings uses the argument's encoding if self is ASCII-only",
      "group": "String",
      "spec": "String#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#<< when self is BINARY and argument is US-ASCII uses BINARY encoding",
      "group": "String",
      "spec": "String#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#<< when self is in an ASCII-incompatible encoding incompatible with the argument's encoding raises Encoding::CompatibilityError if neither are empty",
      "group": "String",
      "spec": "String#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#<< when self is in an ASCII-incompatible encoding incompatible with the argument's encoding uses self's encoding if both are empty",
      "group": "String",
      "spec": "String#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#<< when self is in an ASCII-incompatible encoding incompatible with the argument's encoding uses self's encoding if the argument is empty",
      "group": "String",
      "spec": "String#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#<< when self is in an ASCII-incompatible encoding incompatible with the argument's encoding uses the argument's encoding if self is empty",
      "group": "String",
      "spec": "String#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<< when the argument is in an ASCII-incompatible encoding incompatible with self's encoding raises Encoding::CompatibilityError if neither are empty",
      "group": "String",
      "spec": "String#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#<< when the argument is in an ASCII-incompatible encoding incompatible with self's encoding uses self's encoding if both are empty",
      "group": "String",
      "spec": "String#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<< when the argument is in an ASCII-incompatible encoding incompatible with self's encoding uses self's encoding if the argument is empty",
      "group": "String",
      "spec": "String#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<< when the argument is in an ASCII-incompatible encoding incompatible with self's encoding uses the argument's encoding if self is empty",
      "group": "String",
      "spec": "String#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#<< with Integer concatenates the argument interpreted as a codepoint",
      "group": "String",
      "spec": "String#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#<< with Integer doesn't call to_int on its argument",
      "group": "String",
      "spec": "String#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#<< with Integer raises RangeError if the argument is an invalid codepoint for self's encoding",
      "group": "String",
      "spec": "String#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#<< with Integer raises RangeError if the argument is negative",
      "group": "String",
      "spec": "String#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<< with Integer raises a FrozenError when self is frozen",
      "group": "String",
      "spec": "String#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<< with Integer returns a BINARY string if self is US-ASCII and the argument is between 128-255 (inclusive)",
      "group": "String",
      "spec": "String#<<",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#<=> returns nil if argument also uses an inverse comparison for <=>",
      "group": "String",
      "spec": "String#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#<=> returns nil if its argument provides neither #to_str nor #<=>",
      "group": "String",
      "spec": "String#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<=> uses the result of calling #<=> on its argument when #<=> is defined but #to_str is not",
      "group": "String",
      "spec": "String#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#<=> uses the result of calling #to_str for comparison when #to_str is defined",
      "group": "String",
      "spec": "String#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#<=> with String compares individual characters based on their ascii value",
      "group": "String",
      "spec": "String#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<=> with String compares shorter string with corresponding number of first chars of longer string",
      "group": "String",
      "spec": "String#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<=> with String compares the indices of the encodings when the strings have identical non-ASCII-compatible bytes",
      "group": "String",
      "spec": "String#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#<=> with String considers string that comes lexicographically first to be less if strings have same size",
      "group": "String",
      "spec": "String#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<=> with String doesn't consider shorter string to be less if longer string starts with shorter one",
      "group": "String",
      "spec": "String#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<=> with String ignores encoding difference",
      "group": "String",
      "spec": "String#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<=> with String ignores subclass differences",
      "group": "String",
      "spec": "String#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<=> with String returns -1 if self is bytewise less than other",
      "group": "String",
      "spec": "String#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<=> with String returns -1 when self is less than other",
      "group": "String",
      "spec": "String#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<=> with String returns 0 if self and other are bytewise identical and have the same encoding",
      "group": "String",
      "spec": "String#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<=> with String returns 0 if self and other are bytewise identical and have the same encoding",
      "group": "String",
      "spec": "String#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<=> with String returns 0 when self is equal to other",
      "group": "String",
      "spec": "String#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<=> with String returns 0 with identical ASCII-compatible bytes of different encodings",
      "group": "String",
      "spec": "String#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<=> with String returns 1 if self is bytewise greater than other",
      "group": "String",
      "spec": "String#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#<=> with String returns 1 when self is greater than other",
      "group": "String",
      "spec": "String#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#== considers encoding compatibility",
      "group": "String",
      "spec": "String#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#== considers encoding difference of incompatible string",
      "group": "String",
      "spec": "String#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#== ignores encoding difference of compatible string",
      "group": "String",
      "spec": "String#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#== ignores subclass differences",
      "group": "String",
      "spec": "String#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#== is not fooled by NUL characters",
      "group": "String",
      "spec": "String#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#== returns false if obj does not respond to to_str",
      "group": "String",
      "spec": "String#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#== returns false if self <=> string does not return 0",
      "group": "String",
      "spec": "String#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#== returns obj == self if obj responds to to_str",
      "group": "String",
      "spec": "String#==",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#== returns true if self <=> string returns 0",
      "group": "String",
      "spec": "String#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#=== considers encoding compatibility",
      "group": "String",
      "spec": "String#===",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#=== considers encoding difference of incompatible string",
      "group": "String",
      "spec": "String#===",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#=== ignores encoding difference of compatible string",
      "group": "String",
      "spec": "String#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#=== ignores subclass differences",
      "group": "String",
      "spec": "String#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#=== is not fooled by NUL characters",
      "group": "String",
      "spec": "String#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#=== returns false if obj does not respond to to_str",
      "group": "String",
      "spec": "String#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#=== returns false if self <=> string does not return 0",
      "group": "String",
      "spec": "String#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#=== returns obj == self if obj responds to to_str",
      "group": "String",
      "spec": "String#===",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#=== returns true if self <=> string returns 0",
      "group": "String",
      "spec": "String#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#=~ behaves the same way as index() when given a regexp",
      "group": "String",
      "spec": "String#=~",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#=~ invokes obj.=~ with self if obj is neither a string nor regexp",
      "group": "String",
      "spec": "String#=~",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#=~ raises a TypeError if a obj is a string",
      "group": "String",
      "spec": "String#=~",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#=~ returns the character index of a found match",
      "group": "String",
      "spec": "String#=~",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#=~ sets $~ to MatchData when there is a match and nil when there's none",
      "group": "String",
      "spec": "String#=~",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] calls to_int on the given index",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] raises a RangeError if the index is too big",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] raises a TypeError if the given index can't be converted to an Integer",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] raises a TypeError if the given index is nil",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] returns nil if index is outside of self",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] returns the character code of the character at the given index",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Range always taints resulting strings when self is tainted",
      "group": "String",
      "spec": "String#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Range calls to_int on range arguments",
      "group": "String",
      "spec": "String#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Range handles repeated application",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Range returns an empty string if range.begin is inside self and > real end",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Range returns nil if the beginning of the range falls outside of self",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Range returns subclass instances",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Range returns the substring given by the offsets of the range",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Range works with Range subclasses",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp always taints resulting strings when self or regexp is tainted",
      "group": "String",
      "spec": "String#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp returns an untrusted string if the regexp is untrusted",
      "group": "String",
      "spec": "String#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp returns nil if there is no match",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp returns subclass instances",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp returns the matching portion of self",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp sets $~ to MatchData when there is a match and nil when there's none",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp, group always taints resulting strings when self or regexp is tainted",
      "group": "String",
      "spec": "String#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp, group raises a TypeError when the given name is not a String",
      "group": "String",
      "spec": "String#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp, group raises an IndexError if there is no capture for the given name",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp, group raises an IndexError when given the empty String as a group name",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp, group returns nil if there is no match",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp, group returns subclass instances",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp, group returns the capture for the given name",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp, group returns the innermost capture for nested duplicate names",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp, group returns the last capture for duplicate names",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp, group sets $~ to MatchData when there is a match and nil when there's none",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp, index always taints resulting strings when self or regexp is tainted",
      "group": "String",
      "spec": "String#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp, index calls to_int on the given index",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp, index raises a TypeError when the given index can't be converted to Integer",
      "group": "String",
      "spec": "String#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp, index raises a TypeError when the given index is nil",
      "group": "String",
      "spec": "String#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp, index returns an untrusted string if the regexp is untrusted",
      "group": "String",
      "spec": "String#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp, index returns nil if there is no capture for the given index",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp, index returns nil if there is no match",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp, index returns subclass instances",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp, index returns the capture for the given index",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Regexp, index sets $~ to MatchData when there is a match and nil when there's none",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with String doesn't call to_str on its argument",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with String doesn't set $~",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with String returns a subclass instance when given a subclass instance",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with String returns nil if there is no match",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with String returns other_str if it occurs in self",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with String taints resulting strings when other is tainted",
      "group": "String",
      "spec": "String#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[] with Symbol raises TypeError",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with index, length always taints resulting strings when self is tainted",
      "group": "String",
      "spec": "String#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[] with index, length calls to_int on the given index and the given length",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with index, length handles repeated application",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with index, length raises a RangeError if the index or length is too big",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with index, length raises a TypeError when idx or length can't be converted to an integer",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with index, length raises a TypeError when the given index or the given length is nil",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with index, length returns a string with the same encoding",
      "group": "String",
      "spec": "String#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[] with index, length returns nil if the length is negative",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with index, length returns nil if the offset falls outside of self",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with index, length returns subclass instances",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[] with index, length returns the substring starting at the given index with the given length",
      "group": "String",
      "spec": "String#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index allows assignment to the zero'th element of an empty String",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index calls #to_int to convert the index",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index calls #to_str to convert other to a String",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index calls to_int on index",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index encodes the String in an encoding compatible with the replacement",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index raises IndexError if the string index doesn't match a position in the string",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index raises a FrozenError when self is frozen",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index raises a TypeError if #to_int does not return an Fixnum",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index raises a TypeError if other_str can't be converted to a String",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index raises a TypeError if passed a Fixnum replacement",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index raises an Encoding::CompatibilityError if the replacement encoding is incompatible",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index raises an IndexError if #to_int returns a value out of range",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index raises an IndexError if the index is greater than character size",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index raises an IndexError without changing self if idx is outside of self",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index replaces a character with a multibyte character",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index replaces a multibyte character with a character",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index replaces a multibyte character with a multibyte character",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index replaces the char at idx with other_str",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index taints self if other_str is tainted",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count appends other_str to the end of the string if idx == the length of the string",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count calls #to_int to convert the index and count objects",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count calls #to_str to convert the replacement object",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count counts negative idx values from end of the string",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count deletes a multibyte character",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count deletes characters if other_str is an empty string",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count deletes characters up to the maximum length of the existing string",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count encodes the String in an encoding compatible with the replacement",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count inserts a multibyte character",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count overwrites and deletes characters if count is more than the length of other_str",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count raises a TypeError if #to_int for count does not return an Integer",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count raises a TypeError if #to_int for index does not return an Integer",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count raises a TypeError if other_str is a type other than String",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count raises a TypeError of #to_str does not return a String",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count raises an Encoding::CompatibilityError if the replacement encoding is incompatible",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count raises an IndexError if count < 0",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count raises an IndexError if the character index is out of range of a multibyte String",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count raises an IndexError if |idx| is greater than the length of the string",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count replaces characters with a multibyte character",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count replaces multibyte characters with characters",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count replaces multibyte characters with multibyte characters",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count starts at idx and overwrites count characters before inserting the rest of other_str",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with Fixnum index, count taints self if other_str is tainted",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with String index encodes the String in an encoding compatible with the replacement",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with String index raises an Encoding::CompatibilityError if the replacement encoding is incompatible",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with String index raises an IndexError if the search String is not found",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with String index replaces characters with a multibyte character",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with String index replaces characters with no characters",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with String index replaces fewer characters with more characters",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with String index replaces more characters with fewer characters",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with String index replaces multibyte characters with characters",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with String index replaces multibyte characters with multibyte characters",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Range index deletes a multibyte character",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Range index encodes the String in an encoding compatible with the replacement",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Range index inserts a multibyte character",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Range index raises a RangeError if negative Range begin is out of range",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Range index raises a RangeError if positive Range begin is greater than String size",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Range index raises an Encoding::CompatibilityError if the replacement encoding is incompatible",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Range index replaces a partial string",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Range index replaces characters with a multibyte character",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Range index replaces multibyte characters by negative indexes",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Range index replaces multibyte characters with characters",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Range index replaces multibyte characters with multibyte characters",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Range index replaces the contents with a longer String",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Range index replaces the contents with a shorter String",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Range index treats a negative out-of-range Range end with a negative Range begin as a zero count",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Range index treats a negative out-of-range Range end with a positive Range begin as a zero count",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Range index uses the Range end as an index rather than a count",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Range index with an empty replacement does not replace a character with a zero exclude-end range",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Range index with an empty replacement does not replace a character with a zero-index, zero exclude-end range",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Range index with an empty replacement replaces a character with a zero non-exclude-end range",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Range index with an empty replacement replaces a character with zero-index, zero non-exclude-end range",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Regexp index calls #to_str to convert the replacement",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Regexp index checks the match before calling #to_str to convert the replacement",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Regexp index encodes the String in an encoding compatible with the replacement",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Regexp index raises IndexError if the regexp index doesn't match a position in the string",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Regexp index raises an Encoding::CompatibilityError if the replacement encoding is incompatible",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Regexp index replaces characters with a multibyte character",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Regexp index replaces multibyte characters with characters",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Regexp index replaces multibyte characters with multibyte characters",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Regexp index replaces the matched text with the rhs",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Regexp index with 3 arguments allows the specified capture to be negative and count from the end",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Regexp index with 3 arguments calls #to_int to convert the second object",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Regexp index with 3 arguments checks the match index before calling #to_str to convert the replacement",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Regexp index with 3 arguments raises IndexError if the specified capture isn't available",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Regexp index with 3 arguments raises a TypeError if #to_int does not return a Fixnum",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Regexp index with 3 arguments uses the 2nd of 3 arguments as which capture should be replaced",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#[]= with a Regexp index with 3 arguments when the optional capture does not match raises an IndexError before setting the replacement",
      "group": "String",
      "spec": "String#[]=",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#ascii_only? returns false after appending non ASCII characters to an empty String",
      "group": "String",
      "spec": "String#ascii_only?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#ascii_only? returns false for a non-empty String with non-ASCII-compatible encoding",
      "group": "String",
      "spec": "String#ascii_only?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#ascii_only? returns false for the empty String with a non-ASCII-compatible encoding",
      "group": "String",
      "spec": "String#ascii_only?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#ascii_only? returns false when concatenating an ASCII and non-ASCII String",
      "group": "String",
      "spec": "String#ascii_only?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#ascii_only? returns false when interpolating non ascii strings",
      "group": "String",
      "spec": "String#ascii_only?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#ascii_only? returns false when replacing an ASCII String with a non-ASCII String",
      "group": "String",
      "spec": "String#ascii_only?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#ascii_only? returns true for the empty String with an ASCII-compatible encoding",
      "group": "String",
      "spec": "String#ascii_only?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#ascii_only? with ASCII only characters returns true for all single-character UTF-8 Strings",
      "group": "String",
      "spec": "String#ascii_only?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#ascii_only? with ASCII only characters returns true if the encoding is US-ASCII",
      "group": "String",
      "spec": "String#ascii_only?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#ascii_only? with ASCII only characters returns true if the encoding is UTF-8",
      "group": "String",
      "spec": "String#ascii_only?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#ascii_only? with non-ASCII only characters returns false if the String contains any non-ASCII characters",
      "group": "String",
      "spec": "String#ascii_only?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#ascii_only? with non-ASCII only characters returns false if the encoding is BINARY",
      "group": "String",
      "spec": "String#ascii_only?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#ascii_only? with non-ASCII only characters returns false if the encoding is US-ASCII",
      "group": "String",
      "spec": "String#ascii_only?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#b copies own tainted/untrusted status to the returning value",
      "group": "String",
      "spec": "String#b",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#b returns a binary encoded string",
      "group": "String",
      "spec": "String#b",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#b returns new string without modifying self",
      "group": "String",
      "spec": "String#b",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#bytes agrees with #getbyte",
      "group": "String",
      "spec": "String#bytes",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#bytes agrees with #unpack('C*')",
      "group": "String",
      "spec": "String#bytes",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#bytes is unaffected by #force_encoding",
      "group": "String",
      "spec": "String#bytes",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#bytes returns #bytesize bytes",
      "group": "String",
      "spec": "String#bytes",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#bytes returns an Array when no block is given",
      "group": "String",
      "spec": "String#bytes",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#bytes returns bytes as Fixnums",
      "group": "String",
      "spec": "String#bytes",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#bytes yields each byte to a block if one is given, returning self",
      "group": "String",
      "spec": "String#bytes",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#bytes yields/returns no bytes for the empty string",
      "group": "String",
      "spec": "String#bytes",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:#String#bytesize returns 0 for the empty string",
      "group": "String",
      "spec": "String#bytesize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:#String#bytesize returns the length of self in bytes",
      "group": "String",
      "spec": "String#bytesize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:#String#bytesize works with pseudo-ASCII strings containing UTF-8 characters",
      "group": "String",
      "spec": "String#bytesize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:#String#bytesize works with pseudo-ASCII strings containing single UTF-8 characters",
      "group": "String",
      "spec": "String#bytesize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:#String#bytesize works with strings containing UTF-8 characters",
      "group": "String",
      "spec": "String#bytesize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:#String#bytesize works with strings containing single UTF-8 characters",
      "group": "String",
      "spec": "String#bytesize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice calls to_int on the given index",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice needs to reviewed for spec completeness",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice on on non ASCII strings returns byteslice of unicode strings",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice raises a RangeError if the index is too big",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice raises a TypeError if the given index can't be converted to an Integer",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice raises a TypeError if the given index is nil",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice returns nil if index is outside of self",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice returns the character code of the character at the given index",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice with Range always taints resulting strings when self is tainted",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice with Range calls to_int on range arguments",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice with Range handles repeated application",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice with Range returns an empty string if range.begin is inside self and > real end",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice with Range returns nil if the beginning of the range falls outside of self",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice with Range returns subclass instances",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice with Range returns the substring given by the offsets of the range",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice with Range works with Range subclasses",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice with index, length always taints resulting strings when self is tainted",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice with index, length calls to_int on the given index and the given length",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice with index, length handles repeated application",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice with index, length raises a RangeError if the index or length is too big",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice with index, length raises a TypeError when idx or length can't be converted to an integer",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice with index, length raises a TypeError when the given index or the given length is nil",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice with index, length returns a string with the same encoding",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice with index, length returns nil if the length is negative",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice with index, length returns nil if the offset falls outside of self",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice with index, length returns subclass instances",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#byteslice with index, length returns the substring starting at the given index with the given length",
      "group": "String",
      "spec": "String#byteslice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize ASCII-only case mapping does not capitalize non-ASCII characters",
      "group": "String",
      "spec": "String#capitalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize does not allow invalid options",
      "group": "String",
      "spec": "String#capitalize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize does not allow the :fold option for upcasing",
      "group": "String",
      "spec": "String#capitalize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize full Unicode case mapping adapted for Lithuanian allows Turkic as an extra option (and applies Turkic semantics)",
      "group": "String",
      "spec": "String#capitalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize full Unicode case mapping adapted for Lithuanian currently works the same as full Unicode case mapping",
      "group": "String",
      "spec": "String#capitalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize full Unicode case mapping adapted for Lithuanian does not allow any other additional option",
      "group": "String",
      "spec": "String#capitalize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize full Unicode case mapping adapted for Turkic languages allows Lithuanian as an extra option",
      "group": "String",
      "spec": "String#capitalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize full Unicode case mapping adapted for Turkic languages capitalizes ASCII characters according to Turkic semantics",
      "group": "String",
      "spec": "String#capitalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize full Unicode case mapping adapted for Turkic languages does not allow any other additional option",
      "group": "String",
      "spec": "String#capitalize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize full Unicode case mapping only capitalizes the first resulting character when upcasing a character produces a multi-character sequence",
      "group": "String",
      "spec": "String#capitalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize full Unicode case mapping updates string metadata",
      "group": "String",
      "spec": "String#capitalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize full Unicode case mapping works for all of Unicode with no option",
      "group": "String",
      "spec": "String#capitalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize returns a copy of self with the first character converted to uppercase and the remainder to lowercase",
      "group": "String",
      "spec": "String#capitalize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize returns subclass instances when called on a subclass",
      "group": "String",
      "spec": "String#capitalize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize taints resulting string when self is tainted",
      "group": "String",
      "spec": "String#capitalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize! capitalizes self in place",
      "group": "String",
      "spec": "String#capitalize!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize! does not allow invalid options",
      "group": "String",
      "spec": "String#capitalize!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize! does not allow the :fold option for upcasing",
      "group": "String",
      "spec": "String#capitalize!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize! full Unicode case mapping modifies self in place for all of Unicode with no option",
      "group": "String",
      "spec": "String#capitalize!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize! full Unicode case mapping only capitalizes the first resulting character when upcasing a character produces a multi-character sequence",
      "group": "String",
      "spec": "String#capitalize!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize! full Unicode case mapping updates string metadata",
      "group": "String",
      "spec": "String#capitalize!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize! modifies self in place for ASCII-only case mapping does not capitalize non-ASCII characters",
      "group": "String",
      "spec": "String#capitalize!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize! modifies self in place for full Unicode case mapping adapted for Lithuanian allows Turkic as an extra option (and applies Turkic semantics)",
      "group": "String",
      "spec": "String#capitalize!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize! modifies self in place for full Unicode case mapping adapted for Lithuanian currently works the same as full Unicode case mapping",
      "group": "String",
      "spec": "String#capitalize!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize! modifies self in place for full Unicode case mapping adapted for Lithuanian does not allow any other additional option",
      "group": "String",
      "spec": "String#capitalize!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize! modifies self in place for full Unicode case mapping adapted for Turkic languages allows Lithuanian as an extra option",
      "group": "String",
      "spec": "String#capitalize!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize! modifies self in place for full Unicode case mapping adapted for Turkic languages capitalizes ASCII characters according to Turkic semantics",
      "group": "String",
      "spec": "String#capitalize!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize! modifies self in place for full Unicode case mapping adapted for Turkic languages does not allow any other additional option",
      "group": "String",
      "spec": "String#capitalize!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize! raises a FrozenError when self is frozen",
      "group": "String",
      "spec": "String#capitalize!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#capitalize! returns nil when no changes are made",
      "group": "String",
      "spec": "String#capitalize!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp independent of case for non-ASCII characters does not case fold",
      "group": "String",
      "spec": "String#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp independent of case for non-ASCII characters returns -1 when numerically less than other",
      "group": "String",
      "spec": "String#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp independent of case for non-ASCII characters returns 0 when equal to other",
      "group": "String",
      "spec": "String#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp independent of case for non-ASCII characters returns 1 when numerically greater than other",
      "group": "String",
      "spec": "String#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp independent of case in UTF-8 mode for ASCII characters returns -1 when less than other",
      "group": "String",
      "spec": "String#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp independent of case in UTF-8 mode for ASCII characters returns 0 when equal to other",
      "group": "String",
      "spec": "String#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp independent of case in UTF-8 mode for ASCII characters returns 1 when greater than other",
      "group": "String",
      "spec": "String#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp independent of case in UTF-8 mode for non-ASCII characters returns -1 when numerically less than other",
      "group": "String",
      "spec": "String#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp independent of case in UTF-8 mode for non-ASCII characters returns 0 when numerically equal to other",
      "group": "String",
      "spec": "String#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp independent of case in UTF-8 mode for non-ASCII characters returns 1 when numerically greater than other",
      "group": "String",
      "spec": "String#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp independent of case returns -1 when less than other",
      "group": "String",
      "spec": "String#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp independent of case returns 0 when equal to other",
      "group": "String",
      "spec": "String#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp independent of case returns 1 when greater than other",
      "group": "String",
      "spec": "String#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp independent of case returns nil if incompatible encodings",
      "group": "String",
      "spec": "String#casecmp",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp independent of case returns nil if other can't be converted to a string",
      "group": "String",
      "spec": "String#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp independent of case tries to convert other to string using to_str",
      "group": "String",
      "spec": "String#casecmp",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp independent of case when comparing a subclass instance returns -1 when less than other",
      "group": "String",
      "spec": "String#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp independent of case when comparing a subclass instance returns 0 when equal to other",
      "group": "String",
      "spec": "String#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp independent of case when comparing a subclass instance returns 1 when greater than other",
      "group": "String",
      "spec": "String#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp? independent of case case folds",
      "group": "String",
      "spec": "String#casecmp?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp? independent of case for UNICODE characters returns true when downcase(:fold) on unicode",
      "group": "String",
      "spec": "String#casecmp?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp? independent of case in UTF-8 mode for non-ASCII characters returns false when they are unrelated",
      "group": "String",
      "spec": "String#casecmp?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp? independent of case in UTF-8 mode for non-ASCII characters returns true when they are the same with normalized case",
      "group": "String",
      "spec": "String#casecmp?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp? independent of case in UTF-8 mode for non-ASCII characters returns true when they have the same bytes",
      "group": "String",
      "spec": "String#casecmp?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp? independent of case returns false when not equal to other",
      "group": "String",
      "spec": "String#casecmp?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp? independent of case returns nil if incompatible encodings",
      "group": "String",
      "spec": "String#casecmp?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp? independent of case returns nil if other can't be converted to a string",
      "group": "String",
      "spec": "String#casecmp?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp? independent of case returns true when equal to other",
      "group": "String",
      "spec": "String#casecmp?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp? independent of case tries to convert other to string using to_str",
      "group": "String",
      "spec": "String#casecmp?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp? independent of case when comparing a subclass instance returns false when not equal to other",
      "group": "String",
      "spec": "String#casecmp?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#casecmp? independent of case when comparing a subclass instance returns true when equal to other",
      "group": "String",
      "spec": "String#casecmp?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#center with length, padding calls #to_int to convert length to an integer",
      "group": "String",
      "spec": "String#center",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#center with length, padding calls #to_str to convert padstr to a String",
      "group": "String",
      "spec": "String#center",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#center with length, padding pads with whitespace if no padstr is given",
      "group": "String",
      "spec": "String#center",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#center with length, padding raises a TypeError when length can't be converted to an integer",
      "group": "String",
      "spec": "String#center",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#center with length, padding raises a TypeError when padstr can't be converted to a string",
      "group": "String",
      "spec": "String#center",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#center with length, padding raises an ArgumentError if padstr is empty",
      "group": "String",
      "spec": "String#center",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#center with length, padding returns a new string of specified length with self centered and padded with padstr",
      "group": "String",
      "spec": "String#center",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#center with length, padding returns self if it's longer than or as long as the specified length",
      "group": "String",
      "spec": "String#center",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#center with length, padding returns subclass instances when called on subclasses",
      "group": "String",
      "spec": "String#center",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#center with length, padding taints result when self or padstr is tainted",
      "group": "String",
      "spec": "String#center",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#center with length, padding when padding is tainted and self is untainted returns a tainted string if and only if length is longer than self",
      "group": "String",
      "spec": "String#center",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#center with length, padding with width returns a String in the same encoding as the original",
      "group": "String",
      "spec": "String#center",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#center with length, padding with width, pattern raises an Encoding::CompatibilityError if the encodings are incompatible",
      "group": "String",
      "spec": "String#center",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#center with length, padding with width, pattern returns a String in the compatible encoding",
      "group": "String",
      "spec": "String#center",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chars is unicode aware",
      "group": "String",
      "spec": "String#chars",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chars passes each char in self to the given block",
      "group": "String",
      "spec": "String#chars",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chars returns a different character if the String is transcoded",
      "group": "String",
      "spec": "String#chars",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chars returns an array when no block given",
      "group": "String",
      "spec": "String#chars",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chars returns characters in the same encoding as self",
      "group": "String",
      "spec": "String#chars",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chars returns self",
      "group": "String",
      "spec": "String#chars",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chars taints resulting strings when self is tainted",
      "group": "String",
      "spec": "String#chars",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chars uses the String's encoding to determine what characters it contains",
      "group": "String",
      "spec": "String#chars",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chars works if the String's contents is invalid for its encoding",
      "group": "String",
      "spec": "String#chars",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chars works with multibyte characters",
      "group": "String",
      "spec": "String#chars",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp does not modify a multi-byte character",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp removes the final carriage return, newline from a multibyte String",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp removes the final carriage return, newline from a non-ASCII String",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp removes the final carriage return, newline from a non-ASCII String when the record separator is changed",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed '' does not remove a final carriage return",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed '' removes a final carriage return, newline",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed '' removes a final newline",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed '' removes more than one trailing carriage return, newline pairs",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed '' removes more than one trailing newlines",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed '' returns an empty String when self is empty",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed '' taints the result if self is tainted",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed '\\n' removes one trailing carriage return",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed '\\n' removes one trailing carriage return, newline pair",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed '\\n' removes one trailing newline",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed '\\n' returns an empty String when self is empty",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed '\\n' taints the result if self is tainted",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed a String does not modify the String if the argument does not match the trailing characters",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed a String does not taint the result when the argument is tainted",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed a String removes the trailing characters if they match the argument",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed a String returns an empty String when self is empty",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed a String returns an empty String when the argument equals self",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed a String taints the result if self is tainted",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed an Object calls #to_str to convert to a String",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed an Object raises a TypeError if #to_str does not return a String",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed nil does not modify the String",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed nil returns a copy of the String",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed nil returns an empty String when self is empty",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed nil taints the result if self is tainted",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed no argument does not modify a String with no trailing carriage return or newline",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed no argument removes one trailing carriage return",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed no argument removes one trailing carriage return, newline pair",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed no argument removes one trailing newline",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed no argument removes trailing characters that match $/ when it has been assigned a value",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed no argument returns a copy of the String when it is not modified",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed no argument returns an empty String when self is empty",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed no argument returns subclass instances when called on a subclass",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp when passed no argument taints the result if self is tainted",
      "group": "String",
      "spec": "String#chomp",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! raises a FrozenError on a frozen instance when it is modified",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! raises a FrozenError on a frozen instance when it would not be modified",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! removes the final carriage return, newline from a multibyte String",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! removes the final carriage return, newline from a non-ASCII String",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! removes the final carriage return, newline from a non-ASCII String when the record separator is changed",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! returns nil when the String is not modified",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed '' does not remove a final carriage return",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed '' removes a final carriage return, newline",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed '' removes a final newline",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed '' removes more than one trailing carriage return, newline pairs",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed '' removes more than one trailing newlines",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed '' returns nil when self is empty",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed '' taints the result if self is tainted",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed '\\n' removes one trailing carriage return",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed '\\n' removes one trailing carriage return, newline pair",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed '\\n' removes one trailing newline",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed '\\n' returns nil when self is empty",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed '\\n' taints the result if self is tainted",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed a String does not taint the result when the argument is tainted",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed a String removes the trailing characters if they match the argument",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed a String returns nil if the argument does not match the trailing characters",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed a String returns nil when self is empty",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed a String taints the result if self is tainted",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed an Object calls #to_str to convert to a String",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed an Object raises a TypeError if #to_str does not return a String",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed nil returns nil",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed nil returns nil when self is empty",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed no argument modifies self",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed no argument removes one trailing carriage return",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed no argument removes one trailing carriage return, newline pair",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed no argument removes one trailing newline",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed no argument removes trailing characters that match $/ when it has been assigned a value",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed no argument returns nil if self is not modified",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed no argument returns nil when self is empty",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed no argument returns subclass instances when called on a subclass",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chomp! when passed no argument taints the result if self is tainted",
      "group": "String",
      "spec": "String#chomp!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chop does not remove more than the final carriage return, newline",
      "group": "String",
      "spec": "String#chop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop removes a multi-byte character",
      "group": "String",
      "spec": "String#chop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop removes the carriage return, newline if they are the only characters",
      "group": "String",
      "spec": "String#chop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop removes the final carriage return",
      "group": "String",
      "spec": "String#chop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop removes the final carriage return, newline",
      "group": "String",
      "spec": "String#chop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop removes the final carriage return, newline from a multibyte String",
      "group": "String",
      "spec": "String#chop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop removes the final carriage return, newline from a non-ASCII String",
      "group": "String",
      "spec": "String#chop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop removes the final character",
      "group": "String",
      "spec": "String#chop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop removes the final newline",
      "group": "String",
      "spec": "String#chop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop returns a new string when applied to an empty string",
      "group": "String",
      "spec": "String#chop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop returns an empty string when applied to an empty string",
      "group": "String",
      "spec": "String#chop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop returns subclass instances when called on a subclass",
      "group": "String",
      "spec": "String#chop",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop taints result when self is tainted",
      "group": "String",
      "spec": "String#chop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chop untrusts result when self is untrusted",
      "group": "String",
      "spec": "String#chop",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chop! does not remove more than the final carriage return, newline",
      "group": "String",
      "spec": "String#chop!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop! raises a FrozenError on a frozen instance that is modified",
      "group": "String",
      "spec": "String#chop!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop! raises a FrozenError on a frozen instance that would not be modified",
      "group": "String",
      "spec": "String#chop!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop! removes a multi-byte character",
      "group": "String",
      "spec": "String#chop!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop! removes the carriage return, newline if they are the only characters",
      "group": "String",
      "spec": "String#chop!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop! removes the final carriage return",
      "group": "String",
      "spec": "String#chop!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop! removes the final carriage return, newline",
      "group": "String",
      "spec": "String#chop!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop! removes the final carriage return, newline from a multibyte String",
      "group": "String",
      "spec": "String#chop!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop! removes the final carriage return, newline from a non-ASCII String",
      "group": "String",
      "spec": "String#chop!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop! removes the final character",
      "group": "String",
      "spec": "String#chop!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop! removes the final newline",
      "group": "String",
      "spec": "String#chop!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop! returns nil when called on an empty string",
      "group": "String",
      "spec": "String#chop!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chop! returns self if modifications were made",
      "group": "String",
      "spec": "String#chop!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chr returns a 1-character String",
      "group": "String",
      "spec": "String#chr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chr returns a String",
      "group": "String",
      "spec": "String#chr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chr returns a String in the same encoding as self",
      "group": "String",
      "spec": "String#chr",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chr returns a copy of self",
      "group": "String",
      "spec": "String#chr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chr returns an empty String if self is an empty String",
      "group": "String",
      "spec": "String#chr",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#chr returns the character at the start of the String",
      "group": "String",
      "spec": "String#chr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chr understands Strings that contain a mixture of character widths",
      "group": "String",
      "spec": "String#chr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#chr understands multi-byte characters",
      "group": "String",
      "spec": "String#chr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#clear preserves its encoding",
      "group": "String",
      "spec": "String#clear",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#clear raises a FrozenError if self is frozen",
      "group": "String",
      "spec": "String#clear",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#clear returns self after emptying it",
      "group": "String",
      "spec": "String#clear",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#clear sets self equal to the empty String",
      "group": "String",
      "spec": "String#clear",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#clear works with multibyte Strings",
      "group": "String",
      "spec": "String#clear",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#clone calls #initialize_copy on the new instance",
      "group": "String",
      "spec": "String#clone",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#clone copies constants defined in the singleton class",
      "group": "String",
      "spec": "String#clone",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#clone copies frozen state",
      "group": "String",
      "spec": "String#clone",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#clone copies instance variables",
      "group": "String",
      "spec": "String#clone",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#clone copies modules included in the singleton class",
      "group": "String",
      "spec": "String#clone",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#clone copies singleton methods",
      "group": "String",
      "spec": "String#clone",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#clone does not modify the original string when changing cloned string",
      "group": "String",
      "spec": "String#clone",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#codepoints is synonymous with #bytes for Strings which are single-byte optimizable",
      "group": "String",
      "spec": "String#codepoints",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#codepoints raises an ArgumentError if self's encoding is invalid and a block is given",
      "group": "String",
      "spec": "String#codepoints",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#codepoints raises an ArgumentError when no block is given if self has an invalid encoding",
      "group": "String",
      "spec": "String#codepoints",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#codepoints raises an ArgumentError when self has an invalid encoding and a method is called on the returned Enumerator",
      "group": "String",
      "spec": "String#codepoints",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#codepoints returns an Array when no block is given",
      "group": "String",
      "spec": "String#codepoints",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#codepoints returns self",
      "group": "String",
      "spec": "String#codepoints",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#codepoints round-trips to the original String using Integer#chr",
      "group": "String",
      "spec": "String#codepoints",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#codepoints works for multibyte characters",
      "group": "String",
      "spec": "String#codepoints",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#codepoints yields codepoints as Fixnums",
      "group": "String",
      "spec": "String#codepoints",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#codepoints yields each codepoint to the block if one is given",
      "group": "String",
      "spec": "String#codepoints",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#codepoints yields one codepoint for each character",
      "group": "String",
      "spec": "String#codepoints",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#codepoints yields the codepoints corresponding to the character's position in the String's encoding",
      "group": "String",
      "spec": "String#codepoints",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#concat concatenates the given argument to self and returns self",
      "group": "String",
      "spec": "String#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#concat concatenates the initial value when given arguments contain 2 self",
      "group": "String",
      "spec": "String#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#concat converts the given argument to a String using to_str",
      "group": "String",
      "spec": "String#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#concat raises a FrozenError when self is frozen",
      "group": "String",
      "spec": "String#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#concat raises a TypeError if the given argument can't be converted to a String",
      "group": "String",
      "spec": "String#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#concat returns a String when given a subclass instance",
      "group": "String",
      "spec": "String#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#concat returns an instance of same class when called on a subclass",
      "group": "String",
      "spec": "String#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#concat returns self when given no arguments",
      "group": "String",
      "spec": "String#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#concat taints self if other is tainted",
      "group": "String",
      "spec": "String#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#concat takes multiple arguments",
      "group": "String",
      "spec": "String#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#concat untrusts self if other is untrusted",
      "group": "String",
      "spec": "String#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#concat when self and the argument are in different ASCII-compatible encodings raises Encoding::CompatibilityError if neither are ASCII-only",
      "group": "String",
      "spec": "String#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#concat when self and the argument are in different ASCII-compatible encodings uses self's encoding if both are ASCII-only",
      "group": "String",
      "spec": "String#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#concat when self and the argument are in different ASCII-compatible encodings uses self's encoding if the argument is ASCII-only",
      "group": "String",
      "spec": "String#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#concat when self and the argument are in different ASCII-compatible encodings uses the argument's encoding if self is ASCII-only",
      "group": "String",
      "spec": "String#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#concat when self is BINARY and argument is US-ASCII uses BINARY encoding",
      "group": "String",
      "spec": "String#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#concat when self is in an ASCII-incompatible encoding incompatible with the argument's encoding raises Encoding::CompatibilityError if neither are empty",
      "group": "String",
      "spec": "String#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#concat when self is in an ASCII-incompatible encoding incompatible with the argument's encoding uses self's encoding if both are empty",
      "group": "String",
      "spec": "String#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#concat when self is in an ASCII-incompatible encoding incompatible with the argument's encoding uses self's encoding if the argument is empty",
      "group": "String",
      "spec": "String#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#concat when self is in an ASCII-incompatible encoding incompatible with the argument's encoding uses the argument's encoding if self is empty",
      "group": "String",
      "spec": "String#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#concat when the argument is in an ASCII-incompatible encoding incompatible with self's encoding raises Encoding::CompatibilityError if neither are empty",
      "group": "String",
      "spec": "String#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#concat when the argument is in an ASCII-incompatible encoding incompatible with self's encoding uses self's encoding if both are empty",
      "group": "String",
      "spec": "String#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#concat when the argument is in an ASCII-incompatible encoding incompatible with self's encoding uses self's encoding if the argument is empty",
      "group": "String",
      "spec": "String#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#concat when the argument is in an ASCII-incompatible encoding incompatible with self's encoding uses the argument's encoding if self is empty",
      "group": "String",
      "spec": "String#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#concat with Integer concatenates the argument interpreted as a codepoint",
      "group": "String",
      "spec": "String#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#concat with Integer doesn't call to_int on its argument",
      "group": "String",
      "spec": "String#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#concat with Integer raises RangeError if the argument is an invalid codepoint for self's encoding",
      "group": "String",
      "spec": "String#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#concat with Integer raises RangeError if the argument is negative",
      "group": "String",
      "spec": "String#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#concat with Integer raises a FrozenError when self is frozen",
      "group": "String",
      "spec": "String#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#concat with Integer returns a BINARY string if self is US-ASCII and the argument is between 128-255 (inclusive)",
      "group": "String",
      "spec": "String#concat",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#count calls #to_str to convert each set arg to a String",
      "group": "String",
      "spec": "String#count",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#count counts all chars in a sequence",
      "group": "String",
      "spec": "String#count",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#count counts occurrences of chars from the intersection of the specified sets",
      "group": "String",
      "spec": "String#count",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#count negates sets starting with ^",
      "group": "String",
      "spec": "String#count",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#count raises a TypeError when a set arg can't be converted to a string",
      "group": "String",
      "spec": "String#count",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#count raises an ArgumentError when given no arguments",
      "group": "String",
      "spec": "String#count",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#count raises if the given sequences are invalid",
      "group": "String",
      "spec": "String#count",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#count returns the number of occurrences of a multi-byte character",
      "group": "String",
      "spec": "String#count",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#crypt calls #to_str to converts the salt arg to a String",
      "group": "String",
      "spec": "String#crypt",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#crypt doesn't return subclass instances",
      "group": "String",
      "spec": "String#crypt",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#crypt raises a type error when the salt arg can't be converted to a string",
      "group": "String",
      "spec": "String#crypt",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#crypt raises an ArgumentError when the salt is shorter than two characters",
      "group": "String",
      "spec": "String#crypt",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#crypt raises an ArgumentError when the string contains NUL character",
      "group": "String",
      "spec": "String#crypt",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#crypt returns a cryptographic hash of self by applying the UNIX crypt algorithm with the specified salt",
      "group": "String",
      "spec": "String#crypt",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#crypt taints the result if either salt or self is tainted",
      "group": "String",
      "spec": "String#crypt",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete deletes all chars in a sequence",
      "group": "String",
      "spec": "String#delete",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete deletes multibyte characters",
      "group": "String",
      "spec": "String#delete",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#delete negates sets starting with ^",
      "group": "String",
      "spec": "String#delete",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete raises a TypeError when one set arg can't be converted to a string",
      "group": "String",
      "spec": "String#delete",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete raises an ArgumentError when given no arguments",
      "group": "String",
      "spec": "String#delete",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete raises if the given ranges are invalid",
      "group": "String",
      "spec": "String#delete",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete respects backslash for escaping a -",
      "group": "String",
      "spec": "String#delete",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete returns a new string with the chars from the intersection of sets removed",
      "group": "String",
      "spec": "String#delete",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete returns subclass instances when called on a subclass",
      "group": "String",
      "spec": "String#delete",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#delete taints result when self is tainted",
      "group": "String",
      "spec": "String#delete",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete tries to convert each set arg to a string using to_str",
      "group": "String",
      "spec": "String#delete",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete! modifies self in place and returns self",
      "group": "String",
      "spec": "String#delete!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete! raises a FrozenError when self is frozen",
      "group": "String",
      "spec": "String#delete!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete! returns nil if no modifications were made",
      "group": "String",
      "spec": "String#delete!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#delete_prefix calls to_str on its argument",
      "group": "String",
      "spec": "String#delete_prefix",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete_prefix doesn't set $~",
      "group": "String",
      "spec": "String#delete_prefix",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#delete_prefix returns a copy of the string, when the prefix isn't found",
      "group": "String",
      "spec": "String#delete_prefix",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#delete_prefix returns a copy of the string, with the given prefix removed",
      "group": "String",
      "spec": "String#delete_prefix",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#delete_prefix returns a subclass instance when called on a subclass instance",
      "group": "String",
      "spec": "String#delete_prefix",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#delete_prefix taints resulting strings when other is tainted",
      "group": "String",
      "spec": "String#delete_prefix",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete_prefix! calls to_str on its argument",
      "group": "String",
      "spec": "String#delete_prefix!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete_prefix! doesn't set $~",
      "group": "String",
      "spec": "String#delete_prefix!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#delete_prefix! raises a FrozenError when self is frozen",
      "group": "String",
      "spec": "String#delete_prefix!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete_prefix! removes the found prefix",
      "group": "String",
      "spec": "String#delete_prefix!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete_prefix! returns nil if no change is made",
      "group": "String",
      "spec": "String#delete_prefix!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#delete_suffix calls to_str on its argument",
      "group": "String",
      "spec": "String#delete_suffix",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete_suffix doesn't set $~",
      "group": "String",
      "spec": "String#delete_suffix",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#delete_suffix returns a copy of the string, when the suffix isn't found",
      "group": "String",
      "spec": "String#delete_suffix",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#delete_suffix returns a copy of the string, with the given suffix removed",
      "group": "String",
      "spec": "String#delete_suffix",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete_suffix returns a subclass instance when called on a subclass instance",
      "group": "String",
      "spec": "String#delete_suffix",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#delete_suffix taints resulting strings when other is tainted",
      "group": "String",
      "spec": "String#delete_suffix",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete_suffix! calls to_str on its argument",
      "group": "String",
      "spec": "String#delete_suffix!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete_suffix! doesn't set $~",
      "group": "String",
      "spec": "String#delete_suffix!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#delete_suffix! raises a FrozenError when self is frozen",
      "group": "String",
      "spec": "String#delete_suffix!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete_suffix! removes the found prefix",
      "group": "String",
      "spec": "String#delete_suffix!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#delete_suffix! returns nil if no change is made",
      "group": "String",
      "spec": "String#delete_suffix!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#downcase ASCII-only case mapping does not downcase non-ASCII characters",
      "group": "String",
      "spec": "String#downcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#downcase case folding case folds special characters",
      "group": "String",
      "spec": "String#downcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#downcase does not allow invalid options",
      "group": "String",
      "spec": "String#downcase",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#downcase full Unicode case mapping adapted for Lithuanian allows Turkic as an extra option (and applies Turkic semantics)",
      "group": "String",
      "spec": "String#downcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#downcase full Unicode case mapping adapted for Lithuanian currently works the same as full Unicode case mapping",
      "group": "String",
      "spec": "String#downcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#downcase full Unicode case mapping adapted for Lithuanian does not allow any other additional option",
      "group": "String",
      "spec": "String#downcase",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#downcase full Unicode case mapping adapted for Turkic languages allows Lithuanian as an extra option",
      "group": "String",
      "spec": "String#downcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#downcase full Unicode case mapping adapted for Turkic languages does not allow any other additional option",
      "group": "String",
      "spec": "String#downcase",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#downcase full Unicode case mapping adapted for Turkic languages downcases characters according to Turkic semantics",
      "group": "String",
      "spec": "String#downcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#downcase full Unicode case mapping updates string metadata",
      "group": "String",
      "spec": "String#downcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#downcase full Unicode case mapping works for all of Unicode with no option",
      "group": "String",
      "spec": "String#downcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#downcase returns a copy of self with all uppercase letters downcased",
      "group": "String",
      "spec": "String#downcase",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#downcase returns a subclass instance for subclasses",
      "group": "String",
      "spec": "String#downcase",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#downcase taints result when self is tainted",
      "group": "String",
      "spec": "String#downcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#downcase! ASCII-only case mapping does not downcase non-ASCII characters",
      "group": "String",
      "spec": "String#downcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#downcase! case folding case folds special characters",
      "group": "String",
      "spec": "String#downcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#downcase! does not allow invalid options",
      "group": "String",
      "spec": "String#downcase!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#downcase! full Unicode case mapping adapted for Lithuanian allows Turkic as an extra option (and applies Turkic semantics)",
      "group": "String",
      "spec": "String#downcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#downcase! full Unicode case mapping adapted for Lithuanian currently works the same as full Unicode case mapping",
      "group": "String",
      "spec": "String#downcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#downcase! full Unicode case mapping adapted for Lithuanian does not allow any other additional option",
      "group": "String",
      "spec": "String#downcase!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#downcase! full Unicode case mapping adapted for Turkic languages allows Lithuanian as an extra option",
      "group": "String",
      "spec": "String#downcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#downcase! full Unicode case mapping adapted for Turkic languages does not allow any other additional option",
      "group": "String",
      "spec": "String#downcase!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#downcase! full Unicode case mapping adapted for Turkic languages downcases characters according to Turkic semantics",
      "group": "String",
      "spec": "String#downcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#downcase! full Unicode case mapping modifies self in place for all of Unicode with no option",
      "group": "String",
      "spec": "String#downcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#downcase! full Unicode case mapping updates string metadata",
      "group": "String",
      "spec": "String#downcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#downcase! modifies self in place",
      "group": "String",
      "spec": "String#downcase!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#downcase! raises a FrozenError when self is frozen",
      "group": "String",
      "spec": "String#downcase!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#downcase! returns nil if no modifications were made",
      "group": "String",
      "spec": "String#downcase!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#downcase! sets the result String encoding to the source String encoding",
      "group": "String",
      "spec": "String#downcase!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#dump does not take into account if a string is frozen",
      "group": "String",
      "spec": "String#dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dump includes .force_encoding(name) if the encoding isn't ASCII compatible",
      "group": "String",
      "spec": "String#dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dump keeps origin encoding",
      "group": "String",
      "spec": "String#dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dump returns a string with \" and \\ escaped with a backslash",
      "group": "String",
      "spec": "String#dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dump returns a string with # not escaped when followed by any other character",
      "group": "String",
      "spec": "String#dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dump returns a string with \\#<char> when # is followed by $, @, @@, {",
      "group": "String",
      "spec": "String#dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dump returns a string with lower-case alpha characters unescaped",
      "group": "String",
      "spec": "String#dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dump returns a string with multi-byte UTF-8 characters replaced by \\u{} notation with upper-case hex digits",
      "group": "String",
      "spec": "String#dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dump returns a string with non-printing ASCII characters replaced by \\x notation",
      "group": "String",
      "spec": "String#dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dump returns a string with non-printing single-byte UTF-8 characters replaced by \\x notation",
      "group": "String",
      "spec": "String#dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dump returns a string with numeric characters unescaped",
      "group": "String",
      "spec": "String#dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dump returns a string with printable non-alphanumeric characters unescaped",
      "group": "String",
      "spec": "String#dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dump returns a string with special characters replaced with \\<char> notation",
      "group": "String",
      "spec": "String#dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dump returns a string with upper-case alpha characters unescaped",
      "group": "String",
      "spec": "String#dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dump returns a subclass instance",
      "group": "String",
      "spec": "String#dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dump taints the result if self is tainted",
      "group": "String",
      "spec": "String#dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dump untrusts the result if self is untrusted",
      "group": "String",
      "spec": "String#dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dump wraps string with \"",
      "group": "String",
      "spec": "String#dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dup calls #initialize_copy on the new instance",
      "group": "String",
      "spec": "String#dup",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dup copies instance variables",
      "group": "String",
      "spec": "String#dup",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dup does not copy constants defined in the singleton class",
      "group": "String",
      "spec": "String#dup",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dup does not copy modules included in the singleton class",
      "group": "String",
      "spec": "String#dup",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dup does not copy singleton methods",
      "group": "String",
      "spec": "String#dup",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#dup does not modify the original string when changing dupped string",
      "group": "String",
      "spec": "String#dup",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_byte keeps iterating from the old position (to new string end) when self changes",
      "group": "String",
      "spec": "String#each_byte",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_byte passes each byte in self to the given block",
      "group": "String",
      "spec": "String#each_byte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#each_byte returns self",
      "group": "String",
      "spec": "String#each_byte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#each_byte when no block is given returned enumerator size should return the bytesize of the string",
      "group": "String",
      "spec": "String#each_byte",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_byte when no block is given returns an enumerator",
      "group": "String",
      "spec": "String#each_byte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#each_char is unicode aware",
      "group": "String",
      "spec": "String#each_char",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_char passes each char in self to the given block",
      "group": "String",
      "spec": "String#each_char",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_char returns a different character if the String is transcoded",
      "group": "String",
      "spec": "String#each_char",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_char returns characters in the same encoding as self",
      "group": "String",
      "spec": "String#each_char",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_char returns self",
      "group": "String",
      "spec": "String#each_char",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_char taints resulting strings when self is tainted",
      "group": "String",
      "spec": "String#each_char",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_char uses the String's encoding to determine what characters it contains",
      "group": "String",
      "spec": "String#each_char",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_char when no block is given returned enumerator size should return the size of the string",
      "group": "String",
      "spec": "String#each_char",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_char when no block is given returns an enumerator",
      "group": "String",
      "spec": "String#each_char",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_char works if the String's contents is invalid for its encoding",
      "group": "String",
      "spec": "String#each_char",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_char works with multibyte characters",
      "group": "String",
      "spec": "String#each_char",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_codepoint is synonymous with #bytes for Strings which are single-byte optimizable",
      "group": "String",
      "spec": "String#each_codepoint",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#each_codepoint raises an ArgumentError if self's encoding is invalid and a block is given",
      "group": "String",
      "spec": "String#each_codepoint",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_codepoint raises an ArgumentError when self has an invalid encoding and a method is called on the returned Enumerator",
      "group": "String",
      "spec": "String#each_codepoint",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_codepoint returns self",
      "group": "String",
      "spec": "String#each_codepoint",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#each_codepoint round-trips to the original String using Integer#chr",
      "group": "String",
      "spec": "String#each_codepoint",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_codepoint when no block is given returned Enumerator size should return the size of the string",
      "group": "String",
      "spec": "String#each_codepoint",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_codepoint when no block is given returned Enumerator size should return the size of the string even when the string has an invalid encoding",
      "group": "String",
      "spec": "String#each_codepoint",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_codepoint when no block is given returns an Enumerator",
      "group": "String",
      "spec": "String#each_codepoint",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#each_codepoint when no block is given returns an Enumerator even when self has an invalid encoding",
      "group": "String",
      "spec": "String#each_codepoint",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_codepoint works for multibyte characters",
      "group": "String",
      "spec": "String#each_codepoint",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#each_codepoint yields codepoints as Fixnums",
      "group": "String",
      "spec": "String#each_codepoint",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#each_codepoint yields each codepoint to the block if one is given",
      "group": "String",
      "spec": "String#each_codepoint",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#each_codepoint yields one codepoint for each character",
      "group": "String",
      "spec": "String#each_codepoint",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#each_codepoint yields the codepoints corresponding to the character's position in the String's encoding",
      "group": "String",
      "spec": "String#each_codepoint",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#each_grapheme_cluster is unicode aware",
      "group": "String",
      "spec": "String#each_grapheme_cluster",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_grapheme_cluster passes each char in self to the given block",
      "group": "String",
      "spec": "String#each_grapheme_cluster",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_grapheme_cluster passes each grapheme cluster in self to the given block",
      "group": "String",
      "spec": "String#each_grapheme_cluster",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_grapheme_cluster returns a different character if the String is transcoded",
      "group": "String",
      "spec": "String#each_grapheme_cluster",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_grapheme_cluster returns characters in the same encoding as self",
      "group": "String",
      "spec": "String#each_grapheme_cluster",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_grapheme_cluster returns self",
      "group": "String",
      "spec": "String#each_grapheme_cluster",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_grapheme_cluster returns self",
      "group": "String",
      "spec": "String#each_grapheme_cluster",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_grapheme_cluster taints resulting strings when self is tainted",
      "group": "String",
      "spec": "String#each_grapheme_cluster",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_grapheme_cluster uses the String's encoding to determine what characters it contains",
      "group": "String",
      "spec": "String#each_grapheme_cluster",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_grapheme_cluster when no block is given returned enumerator size should return the size of the string",
      "group": "String",
      "spec": "String#each_grapheme_cluster",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_grapheme_cluster when no block is given returns an enumerator",
      "group": "String",
      "spec": "String#each_grapheme_cluster",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_grapheme_cluster works if the String's contents is invalid for its encoding",
      "group": "String",
      "spec": "String#each_grapheme_cluster",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_grapheme_cluster works with multibyte characters",
      "group": "String",
      "spec": "String#each_grapheme_cluster",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_line accepts a string separator",
      "group": "String",
      "spec": "String#each_line",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#each_line does not care if the string is modified while substituting",
      "group": "String",
      "spec": "String#each_line",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_line passes self as a whole to the block if the separator is nil",
      "group": "String",
      "spec": "String#each_line",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#each_line raises a TypeError when the separator can't be converted to a string",
      "group": "String",
      "spec": "String#each_line",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#each_line raises a TypeError when the separator is a symbol",
      "group": "String",
      "spec": "String#each_line",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#each_line returns self",
      "group": "String",
      "spec": "String#each_line",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#each_line splits self using the supplied record separator and passes each substring to the block",
      "group": "String",
      "spec": "String#each_line",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#each_line splits strings containing multibyte characters",
      "group": "String",
      "spec": "String#each_line",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_line splits using default newline separator when none is specified",
      "group": "String",
      "spec": "String#each_line",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_line taints substrings that are passed to the block if self is tainted",
      "group": "String",
      "spec": "String#each_line",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_line tries to convert the separator to a string using to_str",
      "group": "String",
      "spec": "String#each_line",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#each_line uses $/ as the separator when none is given",
      "group": "String",
      "spec": "String#each_line",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#each_line when `chomp` keyword argument is passed ignores new line characters when separator is specified",
      "group": "String",
      "spec": "String#each_line",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_line when `chomp` keyword argument is passed removes new line characters when separator is not specified",
      "group": "String",
      "spec": "String#each_line",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_line when `chomp` keyword argument is passed removes only specified separator",
      "group": "String",
      "spec": "String#each_line",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_line when no block is given returned Enumerator size should return nil",
      "group": "String",
      "spec": "String#each_line",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_line when no block is given returns an enumerator",
      "group": "String",
      "spec": "String#each_line",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#each_line yields paragraphs (broken by 2 or more successive newlines) when passed '' and replaces multiple newlines with only two ones",
      "group": "String",
      "spec": "String#each_line",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#each_line yields subclass instances for subclasses",
      "group": "String",
      "spec": "String#each_line",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#empty? returns true if the string has a length of zero",
      "group": "String",
      "spec": "String#empty?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#encode given the xml: :attr option replaces all instances of '\"' with '&quot;'",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode given the xml: :attr option replaces all instances of '&' with '&amp;'",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode given the xml: :attr option replaces all instances of '<' with '&lt;'",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode given the xml: :attr option replaces all instances of '>' with '&gt;'",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode given the xml: :attr option replaces undefined characters with their upper-case hexadecimal numeric character references",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode given the xml: :attr option surrounds the encoded text with double-quotes",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode given the xml: :text option does not replace '\"'",
      "group": "String",
      "spec": "String#encode",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#encode given the xml: :text option replaces all instances of '&' with '&amp;'",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode given the xml: :text option replaces all instances of '<' with '&lt;'",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode given the xml: :text option replaces all instances of '>' with '&gt;'",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode given the xml: :text option replaces undefined characters with their upper-case hexadecimal numeric character references",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode raises ArgumentError if the value of the :xml option is not :text or :attr",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed no options encodes an ascii substring of a binary string to UTF-8",
      "group": "String",
      "spec": "String#encode",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed no options raises an Encoding::ConverterNotFoundError when no conversion is possible",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed no options returns a copy for a ASCII-only String when Encoding.default_internal is nil",
      "group": "String",
      "spec": "String#encode",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed no options returns a copy when Encoding.default_internal is nil",
      "group": "String",
      "spec": "String#encode",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed no options transcodes a 7-bit String despite no generic converting being available",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed no options transcodes to Encoding.default_internal when set",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed options calls #to_hash to convert the object",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed options does not process transcoding options if not transcoding",
      "group": "String",
      "spec": "String#encode",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed options normalizes newlines",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed options raises an Encoding::ConverterNotFoundError when no conversion is possible despite 'invalid: :replace, undef: :replace'",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed options replaces invalid characters when replacing Emacs-Mule encoded strings",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed options replaces invalid encoding",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed options returns a copy when Encoding.default_internal is nil",
      "group": "String",
      "spec": "String#encode",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed options transcodes to Encoding.default_internal when set",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to encoding accepts a String argument",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to encoding calls #to_str to convert the object to an Encoding",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to encoding raises an Encoding::ConverterNotFoundError for an invalid encoding",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to encoding raises an Encoding::ConverterNotFoundError when no conversion is possible",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to encoding returns a copy when passed the same encoding as the String",
      "group": "String",
      "spec": "String#encode",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to encoding round trips a String",
      "group": "String",
      "spec": "String#encode",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to encoding transcodes Japanese multibyte characters",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to encoding transcodes a 7-bit String despite no generic converting being available",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to encoding transcodes to the passed encoding",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to, from calls #to_str to convert the from object to an Encoding",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to, from returns a copy in the destination encoding when both encodings are the same",
      "group": "String",
      "spec": "String#encode",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to, from returns the transcoded string",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to, from transcodes between the encodings ignoring the String encoding",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to, from, options calls #to_hash to convert the options object",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to, from, options calls #to_str to convert the from object to an encoding",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to, from, options calls #to_str to convert the to object to an encoding",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to, from, options replaces invalid characters in the destination encoding",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to, from, options replaces undefined characters in the destination encoding",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to, from, options returns a copy when both encodings are the same",
      "group": "String",
      "spec": "String#encode",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to, options calls #to_hash to convert the options object",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to, options replaces invalid characters in the destination encoding",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to, options replaces undefined characters in the destination encoding",
      "group": "String",
      "spec": "String#encode",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode when passed to, options returns a copy when the destination encoding is the same as the String encoding",
      "group": "String",
      "spec": "String#encode",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#encode! given the xml: :attr option replaces all instances of '\"' with '&quot;'",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! given the xml: :attr option replaces all instances of '&' with '&amp;'",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! given the xml: :attr option replaces all instances of '<' with '&lt;'",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! given the xml: :attr option replaces all instances of '>' with '&gt;'",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! given the xml: :attr option replaces undefined characters with their upper-case hexadecimal numeric character references",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! given the xml: :attr option surrounds the encoded text with double-quotes",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! given the xml: :text option does not replace '\"'",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#encode! given the xml: :text option replaces all instances of '&' with '&amp;'",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! given the xml: :text option replaces all instances of '<' with '&lt;'",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! given the xml: :text option replaces all instances of '>' with '&gt;'",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! given the xml: :text option replaces undefined characters with their upper-case hexadecimal numeric character references",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! raises ArgumentError if the value of the :xml option is not :text or :attr",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! raises a FrozenError when called on a frozen String",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! raises a FrozenError when called on a frozen String when it's a no-op",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed no options raises an Encoding::ConverterNotFoundError when no conversion is possible",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed no options returns self for a ASCII-only String when Encoding.default_internal is nil",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed no options returns self when Encoding.default_internal is nil",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed no options transcodes a 7-bit String despite no generic converting being available",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed no options transcodes to Encoding.default_internal when set",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed options calls #to_hash to convert the object",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed options does not process transcoding options if not transcoding",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed options raises an Encoding::ConverterNotFoundError when no conversion is possible despite 'invalid: :replace, undef: :replace'",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed options replaces invalid characters when replacing Emacs-Mule encoded strings",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed options returns self for ASCII-only String when Encoding.default_internal is nil",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed options transcodes to Encoding.default_internal when set",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed to encoding accepts a String argument",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed to encoding calls #to_str to convert the object to an Encoding",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed to encoding raises an Encoding::ConverterNotFoundError for an invalid encoding",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed to encoding raises an Encoding::ConverterNotFoundError when no conversion is possible",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed to encoding returns self",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed to encoding transcodes Japanese multibyte characters",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed to encoding transcodes a 7-bit String despite no generic converting being available",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed to encoding transcodes to the passed encoding",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed to, from calls #to_str to convert the from object to an Encoding",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed to, from returns self",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed to, from transcodes between the encodings ignoring the String encoding",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed to, from, options calls #to_hash to convert the options object",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed to, from, options calls #to_str to convert the from object to an encoding",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed to, from, options calls #to_str to convert the to object to an encoding",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed to, from, options replaces invalid characters in the destination encoding",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed to, from, options replaces undefined characters in the destination encoding",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed to, options calls #to_hash to convert the options object",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed to, options replaces invalid characters in the destination encoding",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encode! when passed to, options replaces undefined characters in the destination encoding",
      "group": "String",
      "spec": "String#encode!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding for Strings with \\u escapes is not affected by both the default internal and external encoding being set at the same time",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding for Strings with \\u escapes is not affected by the default external encoding",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding for Strings with \\u escapes is not affected by the default internal encoding",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding for Strings with \\u escapes returns US-ASCII if self is US-ASCII only",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding for Strings with \\u escapes returns UTF-8",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#encoding for Strings with \\u escapes returns UTF-8 if self isn't US-ASCII only",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#encoding for Strings with \\u escapes returns the given encoding if #encode!has been called",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding for Strings with \\u escapes returns the given encoding if #force_encoding has been called",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding for Strings with \\x escapes is not affected by both the default internal and external encoding being set at the same time",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding for Strings with \\x escapes is not affected by the default external encoding",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding for Strings with \\x escapes is not affected by the default internal encoding",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding for Strings with \\x escapes returns BINARY when an escape creates a byte with the 8th bit set if the source encoding is US-ASCII",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding for Strings with \\x escapes returns US-ASCII if self is US-ASCII only",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding for Strings with \\x escapes returns the given encoding if #encode!has been called",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding for Strings with \\x escapes returns the given encoding if #force_encoding has been called",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding for Strings with \\x escapes returns the source encoding when an escape creates a byte with the 8th bit set if the source encoding isn't US-ASCII",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding for US-ASCII Strings returns US-ASCII if self is US-ASCII",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding for US-ASCII Strings returns US-ASCII if self is US-ASCII only, despite the default encodings being different",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding for US-ASCII Strings returns US-ASCII if self is US-ASCII only, despite the default external encoding being different",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding for US-ASCII Strings returns US-ASCII if self is US-ASCII only, despite the default internal and external encodings being different",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding for US-ASCII Strings returns US-ASCII if self is US-ASCII only, despite the default internal encoding being different",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding is equal to the source encoding by default",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding returns an Encoding object",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#encoding returns the given encoding if #encode!has been called",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#encoding returns the given encoding if #force_encoding has been called",
      "group": "String",
      "spec": "String#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#end_with? converts its argument using :to_str",
      "group": "String",
      "spec": "String#end_with?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#end_with? ignores arguments not convertible to string",
      "group": "String",
      "spec": "String#end_with?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#end_with? raises an Encoding::CompatibilityError if the encodings are incompatible",
      "group": "String",
      "spec": "String#end_with?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#end_with? returns false if the end does not match",
      "group": "String",
      "spec": "String#end_with?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#end_with? returns true if the search string is empty",
      "group": "String",
      "spec": "String#end_with?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#end_with? returns true only if any ending match",
      "group": "String",
      "spec": "String#end_with?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#end_with? returns true only if ends match",
      "group": "String",
      "spec": "String#end_with?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#end_with? uses only the needed arguments",
      "group": "String",
      "spec": "String#end_with?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#end_with? works for multibyte strings",
      "group": "String",
      "spec": "String#end_with?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#eql? considers encoding compatibility",
      "group": "String",
      "spec": "String#eql?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#eql? considers encoding difference of incompatible string",
      "group": "String",
      "spec": "String#eql?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#eql? ignores encoding difference of compatible string",
      "group": "String",
      "spec": "String#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#eql? ignores subclass differences",
      "group": "String",
      "spec": "String#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#eql? returns false if self <=> string does not return 0",
      "group": "String",
      "spec": "String#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#eql? returns true if self <=> string returns 0",
      "group": "String",
      "spec": "String#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#eql? when given a non-String does not try to call #to_str on the given argument",
      "group": "String",
      "spec": "String#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#eql? when given a non-String returns false",
      "group": "String",
      "spec": "String#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#force_encoding accepts a String as the name of an Encoding",
      "group": "String",
      "spec": "String#force_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#force_encoding accepts an Encoding instance",
      "group": "String",
      "spec": "String#force_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#force_encoding calls #to_str to convert an object to an encoding name",
      "group": "String",
      "spec": "String#force_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#force_encoding does not transcode self",
      "group": "String",
      "spec": "String#force_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#force_encoding raises a FrozenError if self is frozen",
      "group": "String",
      "spec": "String#force_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#force_encoding raises a TypeError if #to_str does not return a String",
      "group": "String",
      "spec": "String#force_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#force_encoding raises a TypeError if passed nil",
      "group": "String",
      "spec": "String#force_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#force_encoding returns self",
      "group": "String",
      "spec": "String#force_encoding",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#force_encoding sets the encoding even if the String contents are invalid in that encoding",
      "group": "String",
      "spec": "String#force_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#force_encoding with a special encoding name accepts valid special encoding names",
      "group": "String",
      "spec": "String#force_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#force_encoding with a special encoding name defaults to BINARY if special encoding name is not set",
      "group": "String",
      "spec": "String#force_encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#freeze being a special form doesn't change the value of defined?",
      "group": "String",
      "spec": "String#freeze",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#freeze doesn't produce the same object for different instances of literals in the source",
      "group": "String",
      "spec": "String#freeze",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#freeze produces the same object whenever called on an instance of a literal in the source",
      "group": "String",
      "spec": "String#freeze",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#getbyte counts from the end of the String if given a negative argument",
      "group": "String",
      "spec": "String#getbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#getbyte interprets bytes relative to the String's encoding",
      "group": "String",
      "spec": "String#getbyte",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#getbyte mirrors the output of #bytes",
      "group": "String",
      "spec": "String#getbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#getbyte raises a TypeError unless its argument can be coerced into an Integer",
      "group": "String",
      "spec": "String#getbyte",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#getbyte raises an ArgumentError unless given one argument",
      "group": "String",
      "spec": "String#getbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#getbyte regards a multi-byte character as having multiple bytes",
      "group": "String",
      "spec": "String#getbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#getbyte regards the empty String as containing no bytes",
      "group": "String",
      "spec": "String#getbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#getbyte returns an Integer between 0 and 255",
      "group": "String",
      "spec": "String#getbyte",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#getbyte returns an Integer if given a valid index",
      "group": "String",
      "spec": "String#getbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#getbyte returns nil for out-of-bound indexes",
      "group": "String",
      "spec": "String#getbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#getbyte starts indexing at 0",
      "group": "String",
      "spec": "String#getbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#grapheme_clusters is unicode aware",
      "group": "String",
      "spec": "String#grapheme_clusters",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#grapheme_clusters passes each char in self to the given block",
      "group": "String",
      "spec": "String#grapheme_clusters",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#grapheme_clusters passes each grapheme cluster in self to the given block",
      "group": "String",
      "spec": "String#grapheme_clusters",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#grapheme_clusters returns a different character if the String is transcoded",
      "group": "String",
      "spec": "String#grapheme_clusters",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#grapheme_clusters returns an array when no block given",
      "group": "String",
      "spec": "String#grapheme_clusters",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#grapheme_clusters returns characters in the same encoding as self",
      "group": "String",
      "spec": "String#grapheme_clusters",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#grapheme_clusters returns self",
      "group": "String",
      "spec": "String#grapheme_clusters",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#grapheme_clusters returns self",
      "group": "String",
      "spec": "String#grapheme_clusters",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#grapheme_clusters taints resulting strings when self is tainted",
      "group": "String",
      "spec": "String#grapheme_clusters",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#grapheme_clusters uses the String's encoding to determine what characters it contains",
      "group": "String",
      "spec": "String#grapheme_clusters",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#grapheme_clusters works if the String's contents is invalid for its encoding",
      "group": "String",
      "spec": "String#grapheme_clusters",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#grapheme_clusters works with multibyte characters",
      "group": "String",
      "spec": "String#grapheme_clusters",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and Hash coerces the hash values with #to_s",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and Hash doesn't interpolate special sequences like \\1 for the block's return value",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and Hash ignores keys that don't correspond to matches",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and Hash ignores non-String keys",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and Hash returns a copy of self with all occurrences of pattern replaced with the value of the corresponding hash key",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and Hash returns an empty string if the pattern matches but the hash specifies no replacements",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and Hash sets $~ to MatchData of last match and nil when there's none for access from outside",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and Hash taints the result if a hash value is tainted",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and Hash taints the result if the original string is tainted",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and Hash untrusts the result if a hash value is untrusted",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and Hash untrusts the result if the original string is untrusted",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and Hash uses a key's value as many times as needed",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and Hash uses the hash's default value for missing keys",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and Hash uses the hash's value set from default_proc for missing keys",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and block converts the block's return value to a string using to_s",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and block doesn't interpolate special sequences like \\1 for the block's return value",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and block raises an ArgumentError if encoding is not valid",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and block raises an Encoding::CompatibilityError if the encodings are not compatible",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and block replaces the incompatible part properly even if the encodings are not compatible",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and block restores $~ after leaving the block",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and block returns a copy of self with all occurrences of pattern replaced with the block's return value",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and block sets $~ for access from the block",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and block sets $~ to MatchData of last match and nil when there's none for access from outside",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and block untrusts the result if the original string or replacement is untrusted",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and block uses the compatible encoding if they are compatible",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement doesn't freak out when replacing ^",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement doesn't interpret regexp metacharacters if pattern is a string",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement handles pattern collapse",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement ignores a block if supplied",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement inserts the replacement around every character when the pattern collapses",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement leaves \\ at the end of replacement untouched",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement leaves unknown \\x escapes in replacement untouched",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement maps \\\\ in replacement to \\",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement raises a TypeError when pattern can't be converted to a string",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement raises a TypeError when replacement can't be converted to a string",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement replaces \\& and \\0 with the complete match",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement replaces \\' with everything after the current match",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement replaces \\+ with the last paren that actually matched",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement replaces \\1 sequences with the regexp's corresponding capture",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement replaces \\` with everything before the current match",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement replaces \\k named backreferences with the regexp's corresponding capture",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement respects unicode when the pattern collapses",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement returns a copy of self with all occurrences of pattern replaced with replacement",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement returns subclass instances when called on a subclass",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement sets $~ to MatchData of last match and nil when there's none",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement supports /i for ignoring case",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement supports \\G which matches at the beginning of the remaining (non-matched) string",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement taints the result if the original string or replacement is tainted",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement treats \\+ as an empty string if there was no captures",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement treats \\1 sequences without corresponding captures as empty strings",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement tries to convert pattern to a string using to_str",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement tries to convert replacement to a string using to_str",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and replacement untrusts the result if the original string or replacement is untrusted",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and without replacement and block returned Enumerator size should return nil",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub with pattern and without replacement and block returns an enumerator",
      "group": "String",
      "spec": "String#gsub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and Hash coerces the hash values with #to_s",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and Hash doesn't interpolate special sequences like \\1 for the block's return value",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and Hash ignores keys that don't correspond to matches",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and Hash ignores non-String keys",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and Hash keeps tainted state",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and Hash keeps untrusted state",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and Hash replaces self with an empty string if the pattern matches but the hash specifies no replacements",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and Hash returns self with all occurrences of pattern replaced with the value of the corresponding hash key",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and Hash sets $~ to MatchData of last match and nil when there's none for access from outside",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and Hash taints self if a hash value is tainted",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and Hash untrusts self if a hash value is untrusted",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and Hash uses a key's value as many times as needed",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and Hash uses the hash's default value for missing keys",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and Hash uses the hash's value set from default_proc for missing keys",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and block modifies self in place and returns self",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and block raises a FrozenError when self is frozen",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and block raises an ArgumentError if encoding is not valid",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and block raises an Encoding::CompatibilityError if the encodings are not compatible",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and block replaces the incompatible part properly even if the encodings are not compatible",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and block returns nil if no modifications were made",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and block taints self if block's result is tainted",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and block untrusts self if block's result is untrusted",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and block uses the compatible encoding if they are compatible",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and replacement modifies self in place and returns self",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and replacement modifies self in place with multi-byte characters and returns self",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and replacement raises a FrozenError when self is frozen",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and replacement returns nil if no modifications were made",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and replacement taints self if replacement is tainted",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and replacement untrusts self if replacement is untrusted",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and without replacement and block returned Enumerator size should return nil",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#gsub! with pattern and without replacement and block returns an enumerator",
      "group": "String",
      "spec": "String#gsub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#hash returns a hash based on a string's length and content",
      "group": "String",
      "spec": "String#hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#hex does not accept a sequence of underscores as part of a number",
      "group": "String",
      "spec": "String#hex",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#hex requires that the sign is in front of the 0x if present",
      "group": "String",
      "spec": "String#hex",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#hex returns 0 if sequence begins with underscore",
      "group": "String",
      "spec": "String#hex",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#hex returns 0 on error",
      "group": "String",
      "spec": "String#hex",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#hex takes an optional 0x",
      "group": "String",
      "spec": "String#hex",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#hex takes an optional sign",
      "group": "String",
      "spec": "String#hex",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#hex treats leading characters of self as a string of hex digits",
      "group": "String",
      "spec": "String#hex",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#include? with String ignores subclass differences",
      "group": "String",
      "spec": "String#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#include? with String raises a TypeError if other can't be converted to string",
      "group": "String",
      "spec": "String#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#include? with String raises an Encoding::CompatibilityError if the encodings are incompatible",
      "group": "String",
      "spec": "String#include?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#include? with String returns true if self contains other_str",
      "group": "String",
      "spec": "String#include?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#include? with String tries to convert other to string using to_str",
      "group": "String",
      "spec": "String#include?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#index calls #to_int to convert the second argument",
      "group": "String",
      "spec": "String#index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#index calls #to_str to convert the first argument",
      "group": "String",
      "spec": "String#index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#index raises a TypeError if passed a Fixnum",
      "group": "String",
      "spec": "String#index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#index raises a TypeError if passed a Symbol",
      "group": "String",
      "spec": "String#index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#index raises a TypeError if passed a boolean",
      "group": "String",
      "spec": "String#index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#index raises a TypeError if passed nil",
      "group": "String",
      "spec": "String#index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#index with Regexp behaves the same as String#index(string) for escaped string regexps",
      "group": "String",
      "spec": "String#index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#index with Regexp converts start_offset to an integer via to_int",
      "group": "String",
      "spec": "String#index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#index with Regexp raises an Encoding::CompatibilityError if the encodings are incompatible",
      "group": "String",
      "spec": "String#index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#index with Regexp returns nil if the Regexp matches the empty string and the offset is out of range",
      "group": "String",
      "spec": "String#index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#index with Regexp returns nil if the substring isn't found",
      "group": "String",
      "spec": "String#index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#index with Regexp returns the character index after offset",
      "group": "String",
      "spec": "String#index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#index with Regexp returns the character index of a multibyte character",
      "group": "String",
      "spec": "String#index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#index with Regexp returns the index of the first match of regexp",
      "group": "String",
      "spec": "String#index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#index with Regexp sets $~ to MatchData of match and nil when there's none",
      "group": "String",
      "spec": "String#index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#index with Regexp starts the search at offset + self.length if offset is negative",
      "group": "String",
      "spec": "String#index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#index with Regexp starts the search at the given offset",
      "group": "String",
      "spec": "String#index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#index with Regexp supports \\G which matches at the given start offset",
      "group": "String",
      "spec": "String#index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#index with Regexp treats the offset as a character index",
      "group": "String",
      "spec": "String#index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#index with String behaves the same as String#index(char) for one-character strings",
      "group": "String",
      "spec": "String#index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#index with String doesn't set $~",
      "group": "String",
      "spec": "String#index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#index with String ignores string subclasses",
      "group": "String",
      "spec": "String#index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#index with String raises an Encoding::CompatibilityError if the encodings are incompatible",
      "group": "String",
      "spec": "String#index",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#index with String returns nil if the substring isn't found",
      "group": "String",
      "spec": "String#index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#index with String returns the character index after a partial first match",
      "group": "String",
      "spec": "String#index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#index with String returns the character index after offset",
      "group": "String",
      "spec": "String#index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#index with String returns the character index of a multibyte character",
      "group": "String",
      "spec": "String#index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#index with String returns the index of the first occurrence of the given substring",
      "group": "String",
      "spec": "String#index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#index with String starts the search at offset + self.length if offset is negative",
      "group": "String",
      "spec": "String#index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#index with String starts the search at the given offset",
      "group": "String",
      "spec": "String#index",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#initialize is a private method",
      "group": "String",
      "spec": "String#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#initialize with an argument carries over the encoding invalidity",
      "group": "String",
      "spec": "String#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#initialize with an argument does not trust self if other is trusted",
      "group": "String",
      "spec": "String#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#initialize with an argument does not untaint self if other is untainted",
      "group": "String",
      "spec": "String#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#initialize with an argument raises a FrozenError on a frozen instance that is modified",
      "group": "String",
      "spec": "String#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#initialize with an argument raises a FrozenError on a frozen instance when self-replacing",
      "group": "String",
      "spec": "String#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#initialize with an argument raises a TypeError if other can't be converted to string",
      "group": "String",
      "spec": "String#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#initialize with an argument replaces the content of self with other",
      "group": "String",
      "spec": "String#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#initialize with an argument replaces the encoding of self with that of other",
      "group": "String",
      "spec": "String#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#initialize with an argument returns self",
      "group": "String",
      "spec": "String#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#initialize with an argument taints self if other is tainted",
      "group": "String",
      "spec": "String#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#initialize with an argument tries to convert other to string using to_str",
      "group": "String",
      "spec": "String#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#initialize with an argument untrusts self if other is untrusted",
      "group": "String",
      "spec": "String#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#initialize with no arguments does not change self",
      "group": "String",
      "spec": "String#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#initialize with no arguments does not raise an exception when frozen",
      "group": "String",
      "spec": "String#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#insert with index, other converts index to an integer using to_int",
      "group": "String",
      "spec": "String#insert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#insert with index, other converts other to a string using to_str",
      "group": "String",
      "spec": "String#insert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#insert with index, other inserts a character into a multibyte encoded string",
      "group": "String",
      "spec": "String#insert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#insert with index, other inserts after the given character on an negative count",
      "group": "String",
      "spec": "String#insert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#insert with index, other inserts other before the character at the given index",
      "group": "String",
      "spec": "String#insert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#insert with index, other modifies self in place",
      "group": "String",
      "spec": "String#insert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#insert with index, other raises a FrozenError if self is frozen",
      "group": "String",
      "spec": "String#insert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#insert with index, other raises a TypeError if other can't be converted to string",
      "group": "String",
      "spec": "String#insert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#insert with index, other raises an Encoding::CompatibilityError if the encodings are incompatible",
      "group": "String",
      "spec": "String#insert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#insert with index, other raises an IndexError if the index is beyond string",
      "group": "String",
      "spec": "String#insert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#insert with index, other returns a String in the compatible encoding",
      "group": "String",
      "spec": "String#insert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#insert with index, other taints self if string to insert is tainted",
      "group": "String",
      "spec": "String#insert",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#inspect does not return a subclass instance",
      "group": "String",
      "spec": "String#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#inspect returns a string with \" and \\ escaped with a backslash",
      "group": "String",
      "spec": "String#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#inspect returns a string with # not escaped when followed by any other character",
      "group": "String",
      "spec": "String#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#inspect returns a string with \\#<char> when # is followed by $, @, {",
      "group": "String",
      "spec": "String#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#inspect returns a string with a NUL character replaced by \\x notation",
      "group": "String",
      "spec": "String#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#inspect returns a string with lower-case alpha characters unescaped",
      "group": "String",
      "spec": "String#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#inspect returns a string with non-printing characters replaced by \\x notation",
      "group": "String",
      "spec": "String#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#inspect returns a string with numeric characters unescaped",
      "group": "String",
      "spec": "String#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#inspect returns a string with printable non-alphanumeric characters unescaped",
      "group": "String",
      "spec": "String#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#inspect returns a string with special characters replaced with \\<char> notation",
      "group": "String",
      "spec": "String#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#inspect returns a string with upper-case alpha characters unescaped",
      "group": "String",
      "spec": "String#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#inspect taints the result if self is tainted",
      "group": "String",
      "spec": "String#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#inspect untrusts the result if self is untrusted",
      "group": "String",
      "spec": "String#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#inspect when default external is UTF-8 returns a string with a NUL character replaced by \\u notation",
      "group": "String",
      "spec": "String#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#inspect when default external is UTF-8 returns a string with extended characters for Unicode strings",
      "group": "String",
      "spec": "String#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#inspect when default external is UTF-8 returns a string with non-printing characters replaced by \\u notation for Unicode strings",
      "group": "String",
      "spec": "String#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#inspect when the string's encoding is different than the result's encoding and the string's encoding is ASCII-compatible but the characters are non-ASCII returns a string with the non-ASCII characters replaced by \\x notation",
      "group": "String",
      "spec": "String#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#intern does not special case +(binary) and -(binary)",
      "group": "String",
      "spec": "String#intern",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#intern does not special case certain operators",
      "group": "String",
      "spec": "String#intern",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#intern raises an EncodingError for UTF-8 String containing invalid bytes",
      "group": "String",
      "spec": "String#intern",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#intern returns a US-ASCII Symbol for a UTF-8 String containing only US-ASCII characters",
      "group": "String",
      "spec": "String#intern",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#intern returns a US-ASCII Symbol for a binary String containing only US-ASCII characters",
      "group": "String",
      "spec": "String#intern",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#intern returns a UTF-16LE Symbol for a UTF-16LE String containing non US-ASCII characters",
      "group": "String",
      "spec": "String#intern",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#intern returns a UTF-8 Symbol for a UTF-8 String containing non US-ASCII characters",
      "group": "String",
      "spec": "String#intern",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#intern returns a binary Symbol for a binary String containing non US-ASCII characters",
      "group": "String",
      "spec": "String#intern",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#intern returns the symbol corresponding to self",
      "group": "String",
      "spec": "String#intern",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#length returns the length of a string in different encodings",
      "group": "String",
      "spec": "String#length",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#length returns the length of self",
      "group": "String",
      "spec": "String#length",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#length returns the length of the new self after encoding is changed",
      "group": "String",
      "spec": "String#length",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#lines accepts a string separator",
      "group": "String",
      "spec": "String#lines",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#lines does not care if the string is modified while substituting",
      "group": "String",
      "spec": "String#lines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#lines passes self as a whole to the block if the separator is nil",
      "group": "String",
      "spec": "String#lines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#lines raises a TypeError when the separator can't be converted to a string",
      "group": "String",
      "spec": "String#lines",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#lines raises a TypeError when the separator is a symbol",
      "group": "String",
      "spec": "String#lines",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#lines returns an array when no block given",
      "group": "String",
      "spec": "String#lines",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#lines returns self",
      "group": "String",
      "spec": "String#lines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#lines splits self using the supplied record separator and passes each substring to the block",
      "group": "String",
      "spec": "String#lines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#lines splits strings containing multibyte characters",
      "group": "String",
      "spec": "String#lines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#lines splits using default newline separator when none is specified",
      "group": "String",
      "spec": "String#lines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#lines taints substrings that are passed to the block if self is tainted",
      "group": "String",
      "spec": "String#lines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#lines tries to convert the separator to a string using to_str",
      "group": "String",
      "spec": "String#lines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#lines uses $/ as the separator when none is given",
      "group": "String",
      "spec": "String#lines",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#lines when `chomp` keyword argument is passed ignores new line characters when separator is specified",
      "group": "String",
      "spec": "String#lines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#lines when `chomp` keyword argument is passed removes new line characters",
      "group": "String",
      "spec": "String#lines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#lines when `chomp` keyword argument is passed removes new line characters when separator is not specified",
      "group": "String",
      "spec": "String#lines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#lines when `chomp` keyword argument is passed removes only specified separator",
      "group": "String",
      "spec": "String#lines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#lines yields paragraphs (broken by 2 or more successive newlines) when passed '' and replaces multiple newlines with only two ones",
      "group": "String",
      "spec": "String#lines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#lines yields subclass instances for subclasses",
      "group": "String",
      "spec": "String#lines",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#ljust with length, padding pads with whitespace if no padstr is given",
      "group": "String",
      "spec": "String#ljust",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#ljust with length, padding raises a TypeError when length can't be converted to an integer",
      "group": "String",
      "spec": "String#ljust",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#ljust with length, padding raises a TypeError when padstr can't be converted",
      "group": "String",
      "spec": "String#ljust",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#ljust with length, padding raises an ArgumentError when padstr is empty",
      "group": "String",
      "spec": "String#ljust",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#ljust with length, padding returns a new string of specified length with self left justified and padded with padstr",
      "group": "String",
      "spec": "String#ljust",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#ljust with length, padding returns self if it's longer than or as long as the specified length",
      "group": "String",
      "spec": "String#ljust",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#ljust with length, padding returns subclass instances when called on subclasses",
      "group": "String",
      "spec": "String#ljust",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#ljust with length, padding taints result when self or padstr is tainted",
      "group": "String",
      "spec": "String#ljust",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#ljust with length, padding tries to convert length to an integer using to_int",
      "group": "String",
      "spec": "String#ljust",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#ljust with length, padding tries to convert padstr to a string using to_str",
      "group": "String",
      "spec": "String#ljust",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#ljust with length, padding when padding is tainted and self is untainted returns a tainted string if and only if length is longer than self",
      "group": "String",
      "spec": "String#ljust",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#ljust with length, padding with width returns a String in the same encoding as the original",
      "group": "String",
      "spec": "String#ljust",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#ljust with length, padding with width, pattern raises an Encoding::CompatibilityError if the encodings are incompatible",
      "group": "String",
      "spec": "String#ljust",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#ljust with length, padding with width, pattern returns a String in the compatible encoding",
      "group": "String",
      "spec": "String#ljust",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#lstrip does not strip leading \\0",
      "group": "String",
      "spec": "String#lstrip",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#lstrip returns a copy of self with leading whitespace removed",
      "group": "String",
      "spec": "String#lstrip",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#lstrip taints the result when self is tainted",
      "group": "String",
      "spec": "String#lstrip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#lstrip! modifies self in place and returns self",
      "group": "String",
      "spec": "String#lstrip!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#lstrip! raises a FrozenError on a frozen instance that is modified",
      "group": "String",
      "spec": "String#lstrip!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#lstrip! raises a FrozenError on a frozen instance that would not be modified",
      "group": "String",
      "spec": "String#lstrip!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#lstrip! returns nil if no modifications were made",
      "group": "String",
      "spec": "String#lstrip!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#match calls match on the regular expression",
      "group": "String",
      "spec": "String#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#match converts string patterns to regexps without escaping",
      "group": "String",
      "spec": "String#match",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#match matches \\G at the start of the string",
      "group": "String",
      "spec": "String#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#match matches a literal Regexp that uses ASCII-only UTF-8 escape sequences",
      "group": "String",
      "spec": "String#match",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#match matches the pattern against self",
      "group": "String",
      "spec": "String#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#match raises a TypeError if pattern is not a regexp or a string",
      "group": "String",
      "spec": "String#match",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#match returns nil if there's no match",
      "group": "String",
      "spec": "String#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#match sets $~ to MatchData of match or nil when there is none",
      "group": "String",
      "spec": "String#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#match tries to convert pattern to a string via to_str",
      "group": "String",
      "spec": "String#match",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#match when passed a block does not yield if there is no match",
      "group": "String",
      "spec": "String#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#match when passed a block returns the block result",
      "group": "String",
      "spec": "String#match",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#match when passed a block yields the MatchData",
      "group": "String",
      "spec": "String#match",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#match with [pattern, position] when given a negative position matches the pattern against self starting at an optional index",
      "group": "String",
      "spec": "String#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#match with [pattern, position] when given a negative position uses the start as a character offset",
      "group": "String",
      "spec": "String#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#match with [pattern, position] when given a positive position matches the pattern against self starting at an optional index",
      "group": "String",
      "spec": "String#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#match with [pattern, position] when given a positive position uses the start as a character offset",
      "group": "String",
      "spec": "String#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#match? returns false when does not match the given regex",
      "group": "String",
      "spec": "String#match?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#match? takes matching position as the 2nd argument",
      "group": "String",
      "spec": "String#match?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#match? when matches the given regex returns true but does not set Regexp.last_match",
      "group": "String",
      "spec": "String#match?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#next adds an additional character (just left to the last increased one) if there is a carry and no character left to increase",
      "group": "String",
      "spec": "String#next",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#next increases non-alphanumerics (via ascii rules) if there are no alphanumerics",
      "group": "String",
      "spec": "String#next",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#next increases the next best alphanumeric (jumping over non-alphanumerics) if there is a carry",
      "group": "String",
      "spec": "String#next",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#next increases the next best character if there is a carry for non-alphanumerics",
      "group": "String",
      "spec": "String#next",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#next returns an empty string for empty strings",
      "group": "String",
      "spec": "String#next",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#next returns subclass instances when called on a subclass",
      "group": "String",
      "spec": "String#next",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#next returns the successor by increasing the rightmost alphanumeric (digit => digit, letter => letter with same case)",
      "group": "String",
      "spec": "String#next",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#next taints the result if self is tainted",
      "group": "String",
      "spec": "String#next",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#next! is equivalent to succ, but modifies self in place (still returns self)",
      "group": "String",
      "spec": "String#next!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#next! raises a FrozenError if self is frozen",
      "group": "String",
      "spec": "String#next!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#oct accepts a single underscore separating digits",
      "group": "String",
      "spec": "String#oct",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#oct accepts numbers formatted as binary",
      "group": "String",
      "spec": "String#oct",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#oct accepts numbers formatted as decimal",
      "group": "String",
      "spec": "String#oct",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#oct accepts numbers formatted as hexadecimal",
      "group": "String",
      "spec": "String#oct",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#oct does not accept a sequence of underscores as part of a number",
      "group": "String",
      "spec": "String#oct",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#oct ignores characters that are incorrect for the base-8 digits",
      "group": "String",
      "spec": "String#oct",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#oct returns 0 for strings with leading underscores",
      "group": "String",
      "spec": "String#oct",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#oct returns 0 if no characters can be interpreted as a base-8 number",
      "group": "String",
      "spec": "String#oct",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#oct treats numeric digits as base-8 digits by default",
      "group": "String",
      "spec": "String#oct",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#oct with a leading minus sign accepts numbers formatted as binary",
      "group": "String",
      "spec": "String#oct",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#oct with a leading minus sign accepts numbers formatted as decimal",
      "group": "String",
      "spec": "String#oct",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#oct with a leading minus sign accepts numbers formatted as hexadecimal",
      "group": "String",
      "spec": "String#oct",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#oct with a leading minus sign treats numeric digits as base-8 digits by default",
      "group": "String",
      "spec": "String#oct",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#oct with a leading plus sign accepts numbers formatted as binary",
      "group": "String",
      "spec": "String#oct",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#oct with a leading plus sign accepts numbers formatted as decimal",
      "group": "String",
      "spec": "String#oct",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#oct with a leading plus sign accepts numbers formatted as hexadecimal",
      "group": "String",
      "spec": "String#oct",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#oct with a leading plus sign treats numeric digits as base-8 digits by default",
      "group": "String",
      "spec": "String#oct",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#ord ignores subsequent characters",
      "group": "String",
      "spec": "String#ord",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#ord is equivalent to #codepoints.first",
      "group": "String",
      "spec": "String#ord",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#ord raises an ArgumentError if called on an empty String",
      "group": "String",
      "spec": "String#ord",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#ord returns a Fixnum",
      "group": "String",
      "spec": "String#ord",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#ord returns the codepoint of the first character in the String",
      "group": "String",
      "spec": "String#ord",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#ord understands multibyte characters",
      "group": "String",
      "spec": "String#ord",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#partition with String accepts regexp",
      "group": "String",
      "spec": "String#partition",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#partition with String always returns 3 elements",
      "group": "String",
      "spec": "String#partition",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#partition with String converts its argument using :to_str",
      "group": "String",
      "spec": "String#partition",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#partition with String raises an error if not convertible to string",
      "group": "String",
      "spec": "String#partition",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#partition with String returns an array of substrings based on splitting on the given string",
      "group": "String",
      "spec": "String#partition",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#partition with String sets global vars if regexp used",
      "group": "String",
      "spec": "String#partition",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#partition with String takes precedence over a given block",
      "group": "String",
      "spec": "String#partition",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#prepend converts the given argument to a String using to_str",
      "group": "String",
      "spec": "String#prepend",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#prepend prepends the given argument to self and returns self",
      "group": "String",
      "spec": "String#prepend",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#prepend prepends the initial value when given arguments contain 2 self",
      "group": "String",
      "spec": "String#prepend",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#prepend raises a FrozenError when self is frozen",
      "group": "String",
      "spec": "String#prepend",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#prepend raises a TypeError if the given argument can't be converted to a String",
      "group": "String",
      "spec": "String#prepend",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#prepend returns self when given no arguments",
      "group": "String",
      "spec": "String#prepend",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#prepend taints self if other is tainted",
      "group": "String",
      "spec": "String#prepend",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#prepend takes multiple arguments",
      "group": "String",
      "spec": "String#prepend",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#prepend works when given a subclass instance",
      "group": "String",
      "spec": "String#prepend",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#replace carries over the encoding invalidity",
      "group": "String",
      "spec": "String#replace",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#replace does not trust self if other is trusted",
      "group": "String",
      "spec": "String#replace",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#replace does not untaint self if other is untainted",
      "group": "String",
      "spec": "String#replace",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#replace raises a FrozenError on a frozen instance that is modified",
      "group": "String",
      "spec": "String#replace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#replace raises a FrozenError on a frozen instance when self-replacing",
      "group": "String",
      "spec": "String#replace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#replace raises a TypeError if other can't be converted to string",
      "group": "String",
      "spec": "String#replace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#replace replaces the content of self with other",
      "group": "String",
      "spec": "String#replace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#replace replaces the encoding of self with that of other",
      "group": "String",
      "spec": "String#replace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#replace returns self",
      "group": "String",
      "spec": "String#replace",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#replace taints self if other is tainted",
      "group": "String",
      "spec": "String#replace",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#replace tries to convert other to string using to_str",
      "group": "String",
      "spec": "String#replace",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#replace untrusts self if other is untrusted",
      "group": "String",
      "spec": "String#replace",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#reverse returns a new string with the characters of self in reverse order",
      "group": "String",
      "spec": "String#reverse",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#reverse reverses a string with multi byte characters",
      "group": "String",
      "spec": "String#reverse",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#reverse taints the result if self is tainted",
      "group": "String",
      "spec": "String#reverse",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#reverse! raises a FrozenError on a frozen instance that is modified",
      "group": "String",
      "spec": "String#reverse!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#reverse! raises a FrozenError on a frozen instance that would not be modified",
      "group": "String",
      "spec": "String#reverse!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#reverse! reverses a string with multi byte characters",
      "group": "String",
      "spec": "String#reverse!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#reverse! reverses self in place and always returns self",
      "group": "String",
      "spec": "String#reverse!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with Regexp behaves the same as String#rindex(string) for escaped string regexps",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with Regexp raises a TypeError when given offset is nil",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with Regexp raises an Encoding::CompatibilityError if the encodings are incompatible",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with Regexp returns nil if the substring isn't found",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with Regexp returns the character index before the finish",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with Regexp returns the index of the first match from the end of string of regexp",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with Regexp returns the reverse character index of a multibyte character",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with Regexp sets $~ to MatchData of match and nil when there's none",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with Regexp starts the search at offset + self.length if offset is negative",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with Regexp starts the search at the given offset",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with Regexp supports \\G which matches at the given start offset",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with Regexp tries to convert start_offset to an integer via to_int",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with String behaves the same as String#rindex(?char) for one-character strings",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with String behaves the same as String#rindex(char) for one-character strings",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with String doesn't set $~",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with String ignores string subclasses",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with String raises a TypeError when given offset is nil",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with String returns nil if the substring isn't found",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with String returns the index of the last occurrence of the given substring",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with String starts the search at offset + self.length if offset is negative",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with String starts the search at the given offset",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with String tries to convert start_offset to an integer via to_int",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with object doesn't try to convert obj to an integer via to_int",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with object raises a TypeError if obj isn't a String, Fixnum or Regexp",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#rindex with object tries to convert obj to a string via to_str",
      "group": "String",
      "spec": "String#rindex",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rjust with length, padding pads with whitespace if no padstr is given",
      "group": "String",
      "spec": "String#rjust",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#rjust with length, padding raises a TypeError when length can't be converted to an integer",
      "group": "String",
      "spec": "String#rjust",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rjust with length, padding raises a TypeError when padstr can't be converted",
      "group": "String",
      "spec": "String#rjust",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rjust with length, padding raises an ArgumentError when padstr is empty",
      "group": "String",
      "spec": "String#rjust",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#rjust with length, padding returns a new string of specified length with self right justified and padded with padstr",
      "group": "String",
      "spec": "String#rjust",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rjust with length, padding returns self if it's longer than or as long as the specified length",
      "group": "String",
      "spec": "String#rjust",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#rjust with length, padding returns subclass instances when called on subclasses",
      "group": "String",
      "spec": "String#rjust",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rjust with length, padding taints result when self or padstr is tainted",
      "group": "String",
      "spec": "String#rjust",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rjust with length, padding tries to convert length to an integer using to_int",
      "group": "String",
      "spec": "String#rjust",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rjust with length, padding tries to convert padstr to a string using to_str",
      "group": "String",
      "spec": "String#rjust",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rjust with length, padding when padding is tainted and self is untainted returns a tainted string if and only if length is longer than self",
      "group": "String",
      "spec": "String#rjust",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rjust with length, padding with width returns a String in the same encoding as the original",
      "group": "String",
      "spec": "String#rjust",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rjust with length, padding with width, pattern raises an Encoding::CompatibilityError if the encodings are incompatible",
      "group": "String",
      "spec": "String#rjust",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rjust with length, padding with width, pattern returns a String in the compatible encoding",
      "group": "String",
      "spec": "String#rjust",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#rpartition with String accepts regexp",
      "group": "String",
      "spec": "String#rpartition",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rpartition with String affects $~",
      "group": "String",
      "spec": "String#rpartition",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rpartition with String always returns 3 elements",
      "group": "String",
      "spec": "String#rpartition",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rpartition with String converts its argument using :to_str",
      "group": "String",
      "spec": "String#rpartition",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rpartition with String raises an error if not convertible to string",
      "group": "String",
      "spec": "String#rpartition",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rpartition with String returns an array of substrings based on splitting on the given string",
      "group": "String",
      "spec": "String#rpartition",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rstrip returns a copy of self with all trailing whitespace and NULL bytes removed",
      "group": "String",
      "spec": "String#rstrip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rstrip returns a copy of self with trailing whitespace removed",
      "group": "String",
      "spec": "String#rstrip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rstrip taints the result when self is tainted",
      "group": "String",
      "spec": "String#rstrip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rstrip! modifies self in place and returns self",
      "group": "String",
      "spec": "String#rstrip!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rstrip! modifies self removing trailing NULL bytes and whitespace",
      "group": "String",
      "spec": "String#rstrip!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rstrip! raises a FrozenError on a frozen instance that is modified",
      "group": "String",
      "spec": "String#rstrip!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#rstrip! raises a FrozenError on a frozen instance that would not be modified",
      "group": "String",
      "spec": "String#rstrip!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#rstrip! returns nil if no modifications were made",
      "group": "String",
      "spec": "String#rstrip!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#scan does not raise any errors when passed a multi-byte string",
      "group": "String",
      "spec": "String#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#scan raises a TypeError if pattern isn't a Regexp and can't be converted to a String",
      "group": "String",
      "spec": "String#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#scan respects unicode when the pattern collapses to nothing",
      "group": "String",
      "spec": "String#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#scan returns an array containing all matches",
      "group": "String",
      "spec": "String#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#scan scans for occurrences of the string if pattern is a string",
      "group": "String",
      "spec": "String#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#scan sets $~ to MatchData of last match and nil when there's none",
      "group": "String",
      "spec": "String#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#scan stores groups as arrays in the returned arrays",
      "group": "String",
      "spec": "String#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#scan supports \\G which matches the end of the previous match / string start for first match",
      "group": "String",
      "spec": "String#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#scan taints the results if the Regexp argument is tainted",
      "group": "String",
      "spec": "String#scan",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#scan taints the results if the String argument is tainted",
      "group": "String",
      "spec": "String#scan",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#scan taints the results when passed a Regexp argument if self is tainted",
      "group": "String",
      "spec": "String#scan",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#scan taints the results when passed a String argument if self is tainted",
      "group": "String",
      "spec": "String#scan",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#scan tries to convert pattern to a string via to_str",
      "group": "String",
      "spec": "String#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#scan with pattern and block passes block arguments as individual arguments when blocks are provided",
      "group": "String",
      "spec": "String#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#scan with pattern and block passes each match to the block as one argument: an array",
      "group": "String",
      "spec": "String#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#scan with pattern and block passes groups to the block as one argument: an array",
      "group": "String",
      "spec": "String#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#scan with pattern and block restores $~ after leaving the block",
      "group": "String",
      "spec": "String#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#scan with pattern and block returns self",
      "group": "String",
      "spec": "String#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#scan with pattern and block sets $~ for access from the block",
      "group": "String",
      "spec": "String#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#scan with pattern and block sets $~ to MatchData of last match and nil when there's none for access from outside",
      "group": "String",
      "spec": "String#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#scan with pattern and block taints the results if the Regexp argument is tainted",
      "group": "String",
      "spec": "String#scan",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#scan with pattern and block taints the results if the String argument is tainted",
      "group": "String",
      "spec": "String#scan",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#scan with pattern and block taints the results when passed a Regexp argument if self is tainted",
      "group": "String",
      "spec": "String#scan",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#scan with pattern and block taints the results when passed a String argument if self is tainted",
      "group": "String",
      "spec": "String#scan",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#scrub with a block replaces invalid byte sequences",
      "group": "String",
      "spec": "String#scrub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#scrub with a block replaces invalid byte sequences using a custom encoding",
      "group": "String",
      "spec": "String#scrub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#scrub with a block returns self for valid strings",
      "group": "String",
      "spec": "String#scrub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#scrub with a custom replacement raises ArgumentError for replacements with an invalid encoding",
      "group": "String",
      "spec": "String#scrub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#scrub with a custom replacement raises TypeError when a non String replacement is given",
      "group": "String",
      "spec": "String#scrub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#scrub with a custom replacement replaces an incomplete character at the end with a single replacement",
      "group": "String",
      "spec": "String#scrub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#scrub with a custom replacement replaces invalid byte sequences",
      "group": "String",
      "spec": "String#scrub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#scrub with a custom replacement returns self for valid strings",
      "group": "String",
      "spec": "String#scrub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#scrub with a default replacement replaces invalid byte sequences",
      "group": "String",
      "spec": "String#scrub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#scrub with a default replacement replaces invalid byte sequences when using ASCII as the input encoding",
      "group": "String",
      "spec": "String#scrub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#scrub with a default replacement returns a copy of self when the input encoding is BINARY",
      "group": "String",
      "spec": "String#scrub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#scrub with a default replacement returns self for valid strings",
      "group": "String",
      "spec": "String#scrub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#scrub! accepts blocks",
      "group": "String",
      "spec": "String#scrub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#scrub! modifies self for valid strings",
      "group": "String",
      "spec": "String#scrub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#setbyte allows changing bytes in multi-byte characters",
      "group": "String",
      "spec": "String#setbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#setbyte calls #to_int to convert the index",
      "group": "String",
      "spec": "String#setbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#setbyte calls to_int to convert the value",
      "group": "String",
      "spec": "String#setbyte",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#setbyte can invalidate a String's encoding",
      "group": "String",
      "spec": "String#setbyte",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#setbyte changes the byte at the given index to the new byte",
      "group": "String",
      "spec": "String#setbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#setbyte does not modify the original string when using String.new",
      "group": "String",
      "spec": "String#setbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#setbyte modifies the receiver",
      "group": "String",
      "spec": "String#setbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#setbyte raises a FrozenError if self is frozen",
      "group": "String",
      "spec": "String#setbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#setbyte raises a TypeError unless the second argument is an Integer",
      "group": "String",
      "spec": "String#setbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#setbyte raises an IndexError if the index is greater than the String bytesize",
      "group": "String",
      "spec": "String#setbyte",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#setbyte raises an IndexError if the negative index is greater magnitude than the String bytesize",
      "group": "String",
      "spec": "String#setbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#setbyte regards a negative index as counting from the end of the String",
      "group": "String",
      "spec": "String#setbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#setbyte returns an Integer",
      "group": "String",
      "spec": "String#setbyte",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#setbyte sets a byte at an index greater than String size",
      "group": "String",
      "spec": "String#setbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#size returns the length of a string in different encodings",
      "group": "String",
      "spec": "String#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#size returns the length of self",
      "group": "String",
      "spec": "String#size",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#size returns the length of the new self after encoding is changed",
      "group": "String",
      "spec": "String#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice calls to_int on the given index",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice raises a RangeError if the index is too big",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice raises a TypeError if the given index can't be converted to an Integer",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice raises a TypeError if the given index is nil",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice returns nil if index is outside of self",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice returns the character code of the character at the given index",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Range always taints resulting strings when self is tainted",
      "group": "String",
      "spec": "String#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Range calls to_int on range arguments",
      "group": "String",
      "spec": "String#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Range handles repeated application",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Range returns an empty string if range.begin is inside self and > real end",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Range returns nil if the beginning of the range falls outside of self",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Range returns subclass instances",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Range returns the substring given by the offsets of the range",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Range works with Range subclasses",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp always taints resulting strings when self or regexp is tainted",
      "group": "String",
      "spec": "String#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp returns an untrusted string if the regexp is untrusted",
      "group": "String",
      "spec": "String#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp returns nil if there is no match",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp returns subclass instances",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp returns the matching portion of self",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp sets $~ to MatchData when there is a match and nil when there's none",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp, group always taints resulting strings when self or regexp is tainted",
      "group": "String",
      "spec": "String#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp, group raises a TypeError when the given name is not a String",
      "group": "String",
      "spec": "String#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp, group raises an IndexError if there is no capture for the given name",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp, group raises an IndexError when given the empty String as a group name",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp, group returns nil if there is no match",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp, group returns subclass instances",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp, group returns the capture for the given name",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp, group returns the innermost capture for nested duplicate names",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp, group returns the last capture for duplicate names",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp, group sets $~ to MatchData when there is a match and nil when there's none",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp, index always taints resulting strings when self or regexp is tainted",
      "group": "String",
      "spec": "String#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp, index calls to_int on the given index",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp, index raises a TypeError when the given index can't be converted to Integer",
      "group": "String",
      "spec": "String#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp, index raises a TypeError when the given index is nil",
      "group": "String",
      "spec": "String#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp, index returns an untrusted string if the regexp is untrusted",
      "group": "String",
      "spec": "String#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp, index returns nil if there is no capture for the given index",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp, index returns nil if there is no match",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp, index returns subclass instances",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp, index returns the capture for the given index",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Regexp, index sets $~ to MatchData when there is a match and nil when there's none",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with String doesn't call to_str on its argument",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with String doesn't set $~",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with String returns a subclass instance when given a subclass instance",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with String returns nil if there is no match",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with String returns other_str if it occurs in self",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with String taints resulting strings when other is tainted",
      "group": "String",
      "spec": "String#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice with Symbol raises TypeError",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with index, length always taints resulting strings when self is tainted",
      "group": "String",
      "spec": "String#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice with index, length calls to_int on the given index and the given length",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with index, length handles repeated application",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with index, length raises a RangeError if the index or length is too big",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with index, length raises a TypeError when idx or length can't be converted to an integer",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with index, length raises a TypeError when the given index or the given length is nil",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with index, length returns a string with the same encoding",
      "group": "String",
      "spec": "String#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice with index, length returns nil if the length is negative",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with index, length returns nil if the offset falls outside of self",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with index, length returns subclass instances",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice with index, length returns the substring starting at the given index with the given length",
      "group": "String",
      "spec": "String#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice! Range always taints resulting strings when self is tainted",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! Range calls to_int on range arguments",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! Range deletes and return the substring given by the offsets of the range",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! Range raises a FrozenError on a frozen instance that is modified",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! Range raises a FrozenError on a frozen instance that would not be modified",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! Range returns nil if the given range is out of self",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! Range returns subclass instances",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! Range returns the substring given by the character offsets of the range",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! Range works with Range subclasses",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with Regexp always taints resulting strings when self or regexp is tainted",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with Regexp deletes and returns the first match from self",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with Regexp doesn't taint self when regexp is tainted",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with Regexp raises a FrozenError on a frozen instance that is modified",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with Regexp raises a FrozenError on a frozen instance that would not be modified",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with Regexp returns nil if there was no match",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with Regexp returns subclass instances",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with Regexp returns the matching portion of self with a multi byte character",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with Regexp sets $~ to MatchData when there is a match and nil when there's none",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with Regexp, index accepts a Float for capture index",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with Regexp, index always taints resulting strings when self or regexp is tainted",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with Regexp, index calls #to_int to convert an Object to capture index",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with Regexp, index deletes and returns the capture for idx from self",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with Regexp, index doesn't taint self when regexp is tainted",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with Regexp, index raises a FrozenError if self is frozen",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with Regexp, index returns nil if there is no capture for idx",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with Regexp, index returns nil if there was no match",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with Regexp, index returns subclass instances",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with Regexp, index returns the encoding aware capture for the given index",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with Regexp, index sets $~ to MatchData when there is a match and nil when there's none",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with String doesn't call to_str on its argument",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with String doesn't set $~",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with String raises a FrozenError if self is frozen",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with String removes and returns the first occurrence of other_str from self",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with String returns a subclass instance when given a subclass instance",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with String returns nil if self does not contain other",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with String taints resulting strings when other is tainted",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with index calls to_int on index",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with index deletes and return the char at the given position",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with index raises a FrozenError if self is frozen",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with index returns nil if idx is outside of self",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with index returns the character given by the character index",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with index, length always taints resulting strings when self is tainted",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with index, length calls to_int on idx and length",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with index, length deletes and returns the substring at idx and the given length",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with index, length raises a FrozenError if self is frozen",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with index, length returns nil if the given position is out of self",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with index, length returns nil if the length is negative",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with index, length returns subclass instances",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with index, length returns the substring given by the character offsets",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#slice! with index, length treats invalid bytes as single bytes",
      "group": "String",
      "spec": "String#slice!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp applies the limit to the number of split substrings, without counting captures",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp defaults to $; when regexp isn't given or nil",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp divides self on regexp matches",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp does not call constructor on created subclass instances",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp does not include non-matching captures in the result array",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp doesn't set $~",
      "group": "String",
      "spec": "String#split",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp doesn't suppress or limit fields when limit is negative",
      "group": "String",
      "spec": "String#split",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp doesn't taints the resulting strings if the Regexp is tainted",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp for a String subclass yields instances of the same subclass",
      "group": "String",
      "spec": "String#split",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp includes all captures in the result array",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp respects the encoding of the regexp when splitting between characters",
      "group": "String",
      "spec": "String#split",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp respects unicode when splitting between characters",
      "group": "String",
      "spec": "String#split",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp retains the encoding of the source string",
      "group": "String",
      "spec": "String#split",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp returns a type error if limit can't be converted to an integer",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp returns an ArgumentError if an invalid UTF-8 string is supplied",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp returns an array with one entry if limit is 1: the original string",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp returns at most limit fields when limit > 1",
      "group": "String",
      "spec": "String#split",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp returns subclass instances based on self",
      "group": "String",
      "spec": "String#split",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp returns the original string if no matches are found",
      "group": "String",
      "spec": "String#split",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp splits a string on each character for a multibyte encoding and empty split",
      "group": "String",
      "spec": "String#split",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp splits between characters when regexp matches a zero-length string",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp suppresses trailing empty fields when limit isn't given or 0",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp taints an empty string if self is tainted",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp taints the resulting strings if self is tainted",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp treats negative limits as no limit",
      "group": "String",
      "spec": "String#split",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp tries converting limit to an integer via to_int",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with Regexp yields each split substrings if a block is given",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with String defaults to $; when string isn't given or nil",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with String does not call constructor on created subclass instances",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with String doesn't set $~",
      "group": "String",
      "spec": "String#split",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#split with String doesn't suppress or limit fields when limit is negative",
      "group": "String",
      "spec": "String#split",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#split with String ignores leading and continuous whitespace when string is a single space",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with String returns an array of substrings based on splitting on the given string",
      "group": "String",
      "spec": "String#split",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#split with String returns an array with one entry if limit is 1: the original string",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with String returns at most limit fields when limit > 1",
      "group": "String",
      "spec": "String#split",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#split with String returns subclass instances based on self",
      "group": "String",
      "spec": "String#split",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#split with String returns the original string if no matches are found",
      "group": "String",
      "spec": "String#split",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#split with String splits between characters when its argument is an empty string",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with String splits on multibyte characters",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with String suppresses trailing empty fields when limit isn't given or 0",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with String taints the resulting strings if self is tainted",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with String throws an ArgumentError if the pattern is not a valid string",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with String tries converting its pattern argument to a string via to_str",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with String tries converting limit to an integer via to_int",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#split with String when limit is zero ignores leading and continuous whitespace when string is a single space",
      "group": "String",
      "spec": "String#split",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#squeeze negates sets starting with ^",
      "group": "String",
      "spec": "String#squeeze",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#squeeze only squeezes chars that are in the intersection of all sets given",
      "group": "String",
      "spec": "String#squeeze",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#squeeze raises a TypeError when one set arg can't be converted to a string",
      "group": "String",
      "spec": "String#squeeze",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#squeeze raises an ArgumentError when the parameter is out of sequence",
      "group": "String",
      "spec": "String#squeeze",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#squeeze returns new string where runs of the same character are replaced by a single character when no args are given",
      "group": "String",
      "spec": "String#squeeze",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#squeeze returns subclass instances when called on a subclass",
      "group": "String",
      "spec": "String#squeeze",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#squeeze squeezes all chars in a sequence",
      "group": "String",
      "spec": "String#squeeze",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#squeeze taints the result when self is tainted",
      "group": "String",
      "spec": "String#squeeze",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#squeeze tries to convert each set arg to a string using to_str",
      "group": "String",
      "spec": "String#squeeze",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#squeeze! modifies self in place and returns self",
      "group": "String",
      "spec": "String#squeeze!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#squeeze! raises a FrozenError when self is frozen",
      "group": "String",
      "spec": "String#squeeze!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#squeeze! raises an ArgumentError when the parameter is out of sequence",
      "group": "String",
      "spec": "String#squeeze!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#squeeze! returns nil if no modifications were made",
      "group": "String",
      "spec": "String#squeeze!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#start_with? converts its argument using :to_str",
      "group": "String",
      "spec": "String#start_with?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#start_with? ignores arguments not convertible to string",
      "group": "String",
      "spec": "String#start_with?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#start_with? returns true if the search string is empty",
      "group": "String",
      "spec": "String#start_with?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#start_with? returns true only if any beginning match",
      "group": "String",
      "spec": "String#start_with?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#start_with? returns true only if beginning match",
      "group": "String",
      "spec": "String#start_with?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#start_with? sets Regexp.last_match if it returns true",
      "group": "String",
      "spec": "String#start_with?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#start_with? supports regexps",
      "group": "String",
      "spec": "String#start_with?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#start_with? supports regexps with ^ and $ modifiers",
      "group": "String",
      "spec": "String#start_with?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#start_with? uses only the needed arguments",
      "group": "String",
      "spec": "String#start_with?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#start_with? works for multibyte strings",
      "group": "String",
      "spec": "String#start_with?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#strip returns a copy of self with trailing NULL bytes and whitespace",
      "group": "String",
      "spec": "String#strip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#strip returns a new string with leading and trailing whitespace removed",
      "group": "String",
      "spec": "String#strip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#strip taints the result when self is tainted",
      "group": "String",
      "spec": "String#strip",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#strip! modifies self in place and returns self",
      "group": "String",
      "spec": "String#strip!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#strip! modifies self removing trailing NULL bytes and whitespace",
      "group": "String",
      "spec": "String#strip!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#strip! raises a FrozenError on a frozen instance that is modified",
      "group": "String",
      "spec": "String#strip!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#strip! raises a FrozenError on a frozen instance that would not be modified",
      "group": "String",
      "spec": "String#strip!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#strip! returns nil if no modifications where made",
      "group": "String",
      "spec": "String#strip!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern and Hash coerces the hash values with #to_s",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern and Hash doesn't interpolate special sequences like \\1 for the block's return value",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern and Hash ignores non-String keys",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern and Hash removes keys that don't correspond to matches",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern and Hash returns a copy of self with the first occurrence of pattern replaced with the value of the corresponding hash key",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern and Hash sets $~ to MatchData of first match and nil when there's none for access from outside",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern and Hash taints the result if a hash value is tainted",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern and Hash taints the result if the original string is tainted",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern and Hash untrusts the result if a hash value is untrusted",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern and Hash untrusts the result if the original string is untrusted",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern and Hash uses a key's value only a single time",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern and Hash uses the hash's default value for missing keys",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern and Hash uses the hash's value set from default_proc for missing keys",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern and block converts the block's return value to a string using to_s",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern and block doesn't interpolate special sequences like \\1 for the block's return value",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern and block doesn't raise a RuntimeError if the string is modified while substituting",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern and block returns a copy of self with the first occurrences of pattern replaced with the block's return value",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern and block sets $~ for access from the block",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern and block sets $~ to MatchData of last match and nil when there's none for access from outside",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern and block taints the result if the original string or replacement is tainted",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern and without replacement and block raises a ArgumentError",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement doesn't interpret regexp metacharacters if pattern is a string",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement ignores a block if supplied",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement leaves \\ at the end of replacement untouched",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement leaves unknown \\x escapes in replacement untouched",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement maps \\\\ in replacement to \\",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement raises a TypeError when pattern can't be converted to a string",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement raises a TypeError when pattern is a Symbol",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement raises a TypeError when pattern is an Array",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement raises a TypeError when replacement can't be converted to a string",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement replaces \\& and \\0 with the complete match",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement replaces \\' with everything after the current match",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement replaces \\+ with the last paren that actually matched",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement replaces \\1 sequences with the regexp's corresponding capture",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement replaces \\\\\\+ with \\\\+",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement replaces \\\\\\1 with \\1",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement replaces \\\\\\\\1 with \\1",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement replaces \\\\\\\\\\1 with \\",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement replaces \\` with everything before the current match",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement returns a copy of self when no modification is made",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement returns a copy of self with all occurrences of pattern replaced with replacement",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement returns subclass instances when called on a subclass",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement sets $~ to MatchData of match and nil when there's none",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement supports /i for ignoring case",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement supports \\G which matches at the beginning of the string",
      "group": "String",
      "spec": "String#sub",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement taints the result if the original string or replacement is tainted",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement treats \\+ as an empty string if there was no captures",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement treats \\1 sequences without corresponding captures as empty strings",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement tries to convert pattern to a string using to_str",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub with pattern, replacement tries to convert replacement to a string using to_str",
      "group": "String",
      "spec": "String#sub",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern and Hash coerces the hash values with #to_s",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern and Hash doesn't interpolate special sequences like \\1 for the block's return value",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern and Hash ignores non-String keys",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern and Hash keeps tainted state",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern and Hash keeps untrusted state",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern and Hash removes keys that don't correspond to matches",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern and Hash returns self with the first occurrence of pattern replaced with the value of the corresponding hash key",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern and Hash sets $~ to MatchData of first match and nil when there's none for access from outside",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern and Hash taints self if a hash value is tainted",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern and Hash untrusts self if a hash value is untrusted",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern and Hash uses a key's value only a single time",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern and Hash uses the hash's default value for missing keys",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern and Hash uses the hash's value set from default_proc for missing keys",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern and block modifies self in place and returns self",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern and block raises a FrozenError when self is frozen",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern and block raises a RuntimeError if the string is modified while substituting",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern and block returns nil if no modifications were made",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern and block sets $~ for access from the block",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern and block taints self if block's result is tainted",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern and without replacement and block raises a ArgumentError",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern, replacement modifies self in place and returns self",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern, replacement raises a FrozenError when self is frozen",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern, replacement returns nil if no modifications were made",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#sub! with pattern, replacement taints self if replacement is tainted",
      "group": "String",
      "spec": "String#sub!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#succ adds an additional character (just left to the last increased one) if there is a carry and no character left to increase",
      "group": "String",
      "spec": "String#succ",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#succ increases non-alphanumerics (via ascii rules) if there are no alphanumerics",
      "group": "String",
      "spec": "String#succ",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#succ increases the next best alphanumeric (jumping over non-alphanumerics) if there is a carry",
      "group": "String",
      "spec": "String#succ",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#succ increases the next best character if there is a carry for non-alphanumerics",
      "group": "String",
      "spec": "String#succ",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#succ returns an empty string for empty strings",
      "group": "String",
      "spec": "String#succ",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#succ returns subclass instances when called on a subclass",
      "group": "String",
      "spec": "String#succ",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#succ returns the successor by increasing the rightmost alphanumeric (digit => digit, letter => letter with same case)",
      "group": "String",
      "spec": "String#succ",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#succ taints the result if self is tainted",
      "group": "String",
      "spec": "String#succ",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#succ! is equivalent to succ, but modifies self in place (still returns self)",
      "group": "String",
      "spec": "String#succ!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#succ! raises a FrozenError if self is frozen",
      "group": "String",
      "spec": "String#succ!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sum returns a basic n-bit checksum of the characters in self",
      "group": "String",
      "spec": "String#sum",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sum returns sum of the bytes in self if n less or equal to zero",
      "group": "String",
      "spec": "String#sum",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#sum tries to convert n to an integer using to_int",
      "group": "String",
      "spec": "String#sum",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase ASCII-only case mapping does not swapcase non-ASCII characters",
      "group": "String",
      "spec": "String#swapcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase does not allow invalid options",
      "group": "String",
      "spec": "String#swapcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase does not allow the :fold option for upcasing",
      "group": "String",
      "spec": "String#swapcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase full Unicode case mapping adapted for Lithuanian allows Turkic as an extra option (and applies Turkic semantics)",
      "group": "String",
      "spec": "String#swapcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase full Unicode case mapping adapted for Lithuanian currently works the same as full Unicode case mapping",
      "group": "String",
      "spec": "String#swapcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase full Unicode case mapping adapted for Lithuanian does not allow any other additional option",
      "group": "String",
      "spec": "String#swapcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase full Unicode case mapping adapted for Turkic languages allows Lithuanian as an extra option",
      "group": "String",
      "spec": "String#swapcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase full Unicode case mapping adapted for Turkic languages does not allow any other additional option",
      "group": "String",
      "spec": "String#swapcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase full Unicode case mapping adapted for Turkic languages swaps case of ASCII characters according to Turkic semantics",
      "group": "String",
      "spec": "String#swapcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase full Unicode case mapping updates string metadata",
      "group": "String",
      "spec": "String#swapcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase full Unicode case mapping works for all of Unicode with no option",
      "group": "String",
      "spec": "String#swapcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase returns a new string with all uppercase chars from self converted to lowercase and vice versa",
      "group": "String",
      "spec": "String#swapcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase returns subclass instances when called on a subclass",
      "group": "String",
      "spec": "String#swapcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase taints resulting string when self is tainted",
      "group": "String",
      "spec": "String#swapcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase! does not allow invalid options",
      "group": "String",
      "spec": "String#swapcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase! does not allow the :fold option for upcasing",
      "group": "String",
      "spec": "String#swapcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase! full Unicode case mapping adapted for Lithuanian allows Turkic as an extra option (and applies Turkic semantics)",
      "group": "String",
      "spec": "String#swapcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase! full Unicode case mapping adapted for Lithuanian currently works the same as full Unicode case mapping",
      "group": "String",
      "spec": "String#swapcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase! full Unicode case mapping adapted for Lithuanian does not allow any other additional option",
      "group": "String",
      "spec": "String#swapcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase! full Unicode case mapping modifies self in place for all of Unicode with no option",
      "group": "String",
      "spec": "String#swapcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase! full Unicode case mapping updates string metadata",
      "group": "String",
      "spec": "String#swapcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase! modifies self in place",
      "group": "String",
      "spec": "String#swapcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase! modifies self in place for ASCII-only case mapping does not swapcase non-ASCII characters",
      "group": "String",
      "spec": "String#swapcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase! modifies self in place for full Unicode case mapping adapted for Turkic languages allows Lithuanian as an extra option",
      "group": "String",
      "spec": "String#swapcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase! modifies self in place for full Unicode case mapping adapted for Turkic languages does not allow any other additional option",
      "group": "String",
      "spec": "String#swapcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase! modifies self in place for full Unicode case mapping adapted for Turkic languages swaps case of ASCII characters according to Turkic semantics",
      "group": "String",
      "spec": "String#swapcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase! raises a FrozenError when self is frozen",
      "group": "String",
      "spec": "String#swapcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#swapcase! returns nil if no modifications were made",
      "group": "String",
      "spec": "String#swapcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c returns a Complex object",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c returns a complex number with 0 as the real part, 0 as the imaginary part for unrecognised Strings",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands 'a+bi' to mean a complex number with 'a' as the real part, 'b' as the imaginary",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands 'a-bi' to mean a complex number with 'a' as the real part, '-b' as the imaginary",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands a '-i' by itself as denoting a complex number with an imaginary part of -1",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands a negative integer followed by 'i' to mean that negative integer is the imaginary part",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands an 'i' by itself as denoting a complex number with an imaginary part of 1",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands an integer followed by 'i' to mean that integer is the imaginary part",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands floats (a.b) for the imaginary part",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands floats (a.b) for the real part",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands fractions (numerator/denominator) for the imaginary part",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands fractions (numerator/denominator) for the real part",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands integers",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands negative floats (-a.b) for the imaginary part",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands negative floats (-a.b) for the real part",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands negative fractions (-numerator/denominator) for the imaginary part",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands negative fractions (-numerator/denominator) for the real part",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands negative integers",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands negative scientific notation for the imaginary part",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands negative scientific notation for the real and imaginary part in the same String",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands negative scientific notation for the real part",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands scientific notation for the imaginary part",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands scientific notation for the real and imaginary part in the same String",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_c understands scientific notation for the real part",
      "group": "String",
      "spec": "String#to_c",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_f allows for underscores, even in the decimal side",
      "group": "String",
      "spec": "String#to_f",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_f allows for varying case",
      "group": "String",
      "spec": "String#to_f",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_f allows for varying signs",
      "group": "String",
      "spec": "String#to_f",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_f returns 0 for strings with any non-digit in them",
      "group": "String",
      "spec": "String#to_f",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_f returns 0 for strings with leading underscores",
      "group": "String",
      "spec": "String#to_f",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_f returns 0.0 if the conversion fails",
      "group": "String",
      "spec": "String#to_f",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_f takes an optional sign",
      "group": "String",
      "spec": "String#to_f",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_f treats leading characters of self as a floating point number",
      "group": "String",
      "spec": "String#to_f",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_f treats special float value strings as characters",
      "group": "String",
      "spec": "String#to_f",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_i accepts '+' at the beginning of a String",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_i auto-detects base 10 via 0d when base = 0",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_i auto-detects base 10 with no base specifier when base = 0",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_i auto-detects base 16 via 0x when base = 0",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_i auto-detects base 2 via 0b when base = 0",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_i auto-detects base 8 via 0o when base = 0",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_i auto-detects base 8 via leading 0 when base = 0",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_i doesn't handle foreign base specifiers when base is > 0",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_i ignores leading whitespaces",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_i ignores subsequent invalid characters",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_i ignores underscores in between the digits",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_i interprets leading characters as a number in the given base",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i raises an ArgumentError for illegal bases (1, < 0 or > 36)",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_i requires that the sign if any appears before the base specifier",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_i returns 0 for strings with leading underscores",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_i returns 0 if self is no valid integer-representation",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_i returns a Fixnum for long strings with leading spaces",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_i returns a Fixnum for long strings with trailing spaces",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_i returns the correct Bignum for long strings",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i tries to convert the base to an integer using to_int",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 10",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 11",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 12",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 13",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 14",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 15",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 16",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 17",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 18",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 19",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 2",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 20",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 21",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 22",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 23",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 24",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 25",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 26",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 27",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 28",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 29",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 3",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 30",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 31",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 32",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 33",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 34",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 35",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 36",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 4",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 5",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 6",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 7",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 8",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_i with bases parses a String in base 9",
      "group": "String",
      "spec": "String#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_r does not ignore arbitrary, non-numeric leading characters",
      "group": "String",
      "spec": "String#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_r does not treat a leading period without a numeric prefix as a decimal point",
      "group": "String",
      "spec": "String#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_r ignores leading spaces",
      "group": "String",
      "spec": "String#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_r ignores trailing characters",
      "group": "String",
      "spec": "String#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_r ignores underscores between numbers",
      "group": "String",
      "spec": "String#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_r returns (0/1) for Strings it can't parse",
      "group": "String",
      "spec": "String#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_r returns (0/1) for the empty String",
      "group": "String",
      "spec": "String#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_r returns (n/1) for a String starting with a decimal _n_",
      "group": "String",
      "spec": "String#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_r returns a Rational object",
      "group": "String",
      "spec": "String#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_r treats leading hyphen as minus signs",
      "group": "String",
      "spec": "String#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_r understands a forward slash as separating the numerator from the denominator",
      "group": "String",
      "spec": "String#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_r understands decimal points",
      "group": "String",
      "spec": "String#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_s returns a new instance of String when called on a subclass",
      "group": "String",
      "spec": "String#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_s returns self when self.class == String",
      "group": "String",
      "spec": "String#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_s taints the result when self is tainted",
      "group": "String",
      "spec": "String#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_str returns a new instance of String when called on a subclass",
      "group": "String",
      "spec": "String#to_str",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_str returns self when self.class == String",
      "group": "String",
      "spec": "String#to_str",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_str taints the result when self is tainted",
      "group": "String",
      "spec": "String#to_str",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_sym does not special case +(binary) and -(binary)",
      "group": "String",
      "spec": "String#to_sym",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_sym does not special case certain operators",
      "group": "String",
      "spec": "String#to_sym",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#to_sym raises an EncodingError for UTF-8 String containing invalid bytes",
      "group": "String",
      "spec": "String#to_sym",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_sym returns a US-ASCII Symbol for a UTF-8 String containing only US-ASCII characters",
      "group": "String",
      "spec": "String#to_sym",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_sym returns a US-ASCII Symbol for a binary String containing only US-ASCII characters",
      "group": "String",
      "spec": "String#to_sym",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_sym returns a UTF-16LE Symbol for a UTF-16LE String containing non US-ASCII characters",
      "group": "String",
      "spec": "String#to_sym",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_sym returns a UTF-8 Symbol for a UTF-8 String containing non US-ASCII characters",
      "group": "String",
      "spec": "String#to_sym",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_sym returns a binary Symbol for a binary String containing non US-ASCII characters",
      "group": "String",
      "spec": "String#to_sym",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#to_sym returns the symbol corresponding to self",
      "group": "String",
      "spec": "String#to_sym",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr accepts c1-c2 notation to denote ranges of characters",
      "group": "String",
      "spec": "String#tr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr can replace a 7-bit ASCII character with a multibyte one",
      "group": "String",
      "spec": "String#tr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr can replace a multibyte character with a single byte one",
      "group": "String",
      "spec": "String#tr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr does not replace a multibyte character where part of the bytes match the tr string",
      "group": "String",
      "spec": "String#tr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr pads to_str with its last char if it is shorter than from_string",
      "group": "String",
      "spec": "String#tr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr raises an ArgumentError a descending range in the replacement as containing just the start character",
      "group": "String",
      "spec": "String#tr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr raises an ArgumentError a descending range in the source as empty",
      "group": "String",
      "spec": "String#tr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr returns a new string with the characters from from_string replaced by the ones in to_string",
      "group": "String",
      "spec": "String#tr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr returns subclass instances when called on a subclass",
      "group": "String",
      "spec": "String#tr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr supports non-injective replacements",
      "group": "String",
      "spec": "String#tr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr taints the result when self is tainted",
      "group": "String",
      "spec": "String#tr",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#tr translates chars not in from_string when it starts with a ^",
      "group": "String",
      "spec": "String#tr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr tries to convert from_str and to_str to strings using to_str",
      "group": "String",
      "spec": "String#tr",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr! does not modify self if from_str is empty",
      "group": "String",
      "spec": "String#tr!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr! modifies self in place",
      "group": "String",
      "spec": "String#tr!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr! raises a FrozenError if self is frozen",
      "group": "String",
      "spec": "String#tr!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr! returns nil if no modification was made",
      "group": "String",
      "spec": "String#tr!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr_s accepts c1-c2 notation to denote ranges of characters",
      "group": "String",
      "spec": "String#tr_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr_s can replace a 7-bit ASCII character with a multibyte one",
      "group": "String",
      "spec": "String#tr_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr_s can replace a multibyte character with a single byte one",
      "group": "String",
      "spec": "String#tr_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr_s can replace multiple 7-bit ASCII characters with a multibyte one",
      "group": "String",
      "spec": "String#tr_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr_s can replace multiple multibyte characters with a single byte one",
      "group": "String",
      "spec": "String#tr_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr_s does not replace a multibyte character where part of the bytes match the tr string",
      "group": "String",
      "spec": "String#tr_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr_s pads to_str with its last char if it is shorter than from_string",
      "group": "String",
      "spec": "String#tr_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr_s returns a string processed according to tr with newly duplicate characters removed",
      "group": "String",
      "spec": "String#tr_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr_s returns subclass instances when called on a subclass",
      "group": "String",
      "spec": "String#tr_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr_s taints the result when self is tainted",
      "group": "String",
      "spec": "String#tr_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#tr_s translates chars not in from_string when it starts with a ^",
      "group": "String",
      "spec": "String#tr_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr_s tries to convert from_str and to_str to strings using to_str",
      "group": "String",
      "spec": "String#tr_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr_s! does not modify self if from_str is empty",
      "group": "String",
      "spec": "String#tr_s!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr_s! modifies self in place",
      "group": "String",
      "spec": "String#tr_s!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr_s! raises a FrozenError if self is frozen",
      "group": "String",
      "spec": "String#tr_s!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#tr_s! returns nil if no modification was made",
      "group": "String",
      "spec": "String#tr_s!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#undump Limitations cannot undump non ASCII-compatible string",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump always returns String instance",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump does not take into account if a string is frozen",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump invalid dump raises RuntimeError exception if wrapping \" are missing",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump invalid dump raises RuntimeError if string contains \u0000 character",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump invalid dump raises RuntimeError if string contains non ASCII character",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump invalid dump raises RuntimeError if there are some excessive \"",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump invalid dump raises RuntimeError if there is incorrect \\x sequence",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump invalid dump raises RuntimeError if there is malformed dump of non ASCII-compatible string",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump invalid dump raises RuntimeError in there is incorrect \\u sequence",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump keeps origin encoding",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump returns a string with # not escaped when followed by any other character",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump returns a string with \\uXXXX notation replaced with multi-byte UTF-8 characters",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump returns a string with \\u{} notation replaced with multi-byte UTF-8 characters",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump returns a string with \\x notation replaced with non-printing ASCII character",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump returns a string with lower-case alpha characters unescaped",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump returns a string with numeric characters unescaped",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump returns a string with printable non-alphanumeric characters",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump returns a string with special characters in \\<char> notation replaced with the characters",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump returns a string with unescaped sequences \\#<char> when # is followed by $, @, {",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump returns a string with unescaped sequencies \" and \\",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump returns a string with upper-case alpha characters unescaped",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump strips outer \"",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump taints the result if self is tainted",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump undumps correctly string produced from non ASCII-compatible one",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#undump untrusts the result if self is untrusted",
      "group": "String",
      "spec": "String#undump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalize defaults to the nfc normalization form if no forms are specified",
      "group": "String",
      "spec": "String#unicode_normalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalize normalizes code points in the string according to the form that is specified",
      "group": "String",
      "spec": "String#unicode_normalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalize raises an ArgumentError if the specified form is invalid",
      "group": "String",
      "spec": "String#unicode_normalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalize raises an Encoding::CompatibilityError if string is not in an unicode encoding",
      "group": "String",
      "spec": "String#unicode_normalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalize returns normalized form of string by default 03D3 (ϓ) GREEK UPSILON WITH ACUTE AND HOOK SYMBOL",
      "group": "String",
      "spec": "String#unicode_normalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalize returns normalized form of string by default 03D4 (ϔ) GREEK UPSILON WITH DIAERESIS AND HOOK SYMBOL",
      "group": "String",
      "spec": "String#unicode_normalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalize returns normalized form of string by default 1E9B (ẛ) LATIN SMALL LETTER LONG S WITH DOT ABOVE",
      "group": "String",
      "spec": "String#unicode_normalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalize! modifies original string (nfc)",
      "group": "String",
      "spec": "String#unicode_normalize!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalize! modifies self in place (nfd)",
      "group": "String",
      "spec": "String#unicode_normalize!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalize! modifies self in place (nfkc)",
      "group": "String",
      "spec": "String#unicode_normalize!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalize! modifies self in place (nfkd)",
      "group": "String",
      "spec": "String#unicode_normalize!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalize! normalizes code points and modifies the receiving string",
      "group": "String",
      "spec": "String#unicode_normalize!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalize! raises an ArgumentError if the specified form is invalid",
      "group": "String",
      "spec": "String#unicode_normalize!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalize! raises an Encoding::CompatibilityError if the string is not in an unicode encoding",
      "group": "String",
      "spec": "String#unicode_normalize!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalized? defaults to the nfc normalization form if no forms are specified",
      "group": "String",
      "spec": "String#unicode_normalized?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalized? raises an ArgumentError if the specified form is invalid",
      "group": "String",
      "spec": "String#unicode_normalized?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalized? raises an Encoding::CompatibilityError if the string is not in an unicode encoding",
      "group": "String",
      "spec": "String#unicode_normalized?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalized? returns false if string is not in the supplied normalization form",
      "group": "String",
      "spec": "String#unicode_normalized?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalized? returns true if str is in Unicode normalization form (nfc)",
      "group": "String",
      "spec": "String#unicode_normalized?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalized? returns true if str is in Unicode normalization form (nfd)",
      "group": "String",
      "spec": "String#unicode_normalized?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalized? returns true if str is in Unicode normalization form (nfkc)",
      "group": "String",
      "spec": "String#unicode_normalized?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalized? returns true if str is in Unicode normalization form (nfkd)",
      "group": "String",
      "spec": "String#unicode_normalized?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalized? returns true if string does not contain any unicode codepoints",
      "group": "String",
      "spec": "String#unicode_normalized?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalized? returns true if string is empty",
      "group": "String",
      "spec": "String#unicode_normalized?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unicode_normalized? returns true if string is in the specified normalization form",
      "group": "String",
      "spec": "String#unicode_normalized?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack ignores comments at the start of the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack ignores directives text from '#' to the end if no newline is present",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack ignores directives text from '#' to the first newline",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack ignores multiple comments",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack ignores the entire directive string if it is a comment",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with directive 'w' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with directive 'w' decodes a BER-compressed integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with directive 'w' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with directive 'w' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with directive 'w' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with directive 'w' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with directive 'w' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with directive 'w' raises an ArgumentError when the format modifier is '!'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with directive 'w' raises an ArgumentError when the format modifier is '_'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format '%' raises an Argument Error",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format '@' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format '@' has no effect when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format '@' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format '@' implicitly has a count of zero when count is not specified",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format '@' moves the read index to the byte specified by the count",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format '@' positions the read index one beyond the last readable byte in the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format '@' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format '@' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format '@' raises an ArgumentError if the count exceeds the size of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format '@' raises an ArgumentError when the format modifier is '!'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format '@' raises an ArgumentError when the format modifier is '_'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' decodes into raw (ascii) string values",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' decodes past NULL bytes when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' decodes past whitespace bytes when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' decodes the number of bytes specified by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' decodes the number of bytes specified by the count modifier including NULL bytes",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' decodes the number of bytes specified by the count modifier including whitespace bytes",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' does not remove whitespace other than space",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' does not taint returned arrays if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' does not taint returned arrays if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' does not taint returned arrays if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' does not taint returned arrays if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' does not taint returned strings if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' does not taint returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' does not taint returned strings if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' does not untrust returned arrays if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' does not untrust returned arrays if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' does not untrust returned arrays if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' does not untrust returned arrays if given an untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' does not untrust returned strings if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' does not untrust returned strings if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' does not untrust returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' implicitly has a count of one when no count is specified",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' raises an ArgumentError when the format modifier is '!'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' raises an ArgumentError when the format modifier is '_'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' removes trailing space and NULL bytes from the decoded string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' returns an empty string and does not decode any bytes when the count modifier is zero",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' returns an empty string if the input is empty",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' returns empty strings for repeated formats if the input is empty",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' taints returned strings if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'A' untrusts returned strings if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' adds an empty string for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' decodes a directive with a '*' modifier after a directive with a count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' decodes a directive with a count modifier after a directive with a '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' decodes all the bits when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' decodes multiple differing bit counts from a single string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' decodes one bit from each byte for each format character starting with the most significant bit",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' decodes only the number of bits in the string when passed a count",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' decodes the number of bits specified by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' does not taint returned arrays if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' does not taint returned arrays if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' does not taint returned arrays if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' does not taint returned arrays if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' does not taint returned strings if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' does not taint returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' does not taint returned strings if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' does not untrust returned arrays if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' does not untrust returned arrays if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' does not untrust returned arrays if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' does not untrust returned arrays if given an untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' does not untrust returned strings if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' does not untrust returned strings if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' does not untrust returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' raises an ArgumentError when the format modifier is '!'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' raises an ArgumentError when the format modifier is '_'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' taints returned strings if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'B' untrusts returned strings if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'C' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'C' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'C' decodes a byte with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'C' decodes one byte for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'C' decodes the number of bytes requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'C' decodes the remaining bytes when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'C' decodes the remaining bytes when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'C' decodes two bytes for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'C' decodes zero bytes when no bytes remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'C' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'C' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'C' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'C' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'C' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'D' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'D' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'D' decodes NaN",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'D' decodes a negative double",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'D' decodes negative Infinity",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'D' decodes one double for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'D' decodes positive Infinity",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'D' decodes the number of doubles requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'D' decodes the remaining doubles when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'D' decodes the remaining doubles when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'D' decodes two doubles for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'D' does not decode a double when fewer bytes than a double remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'D' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'D' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'D' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'D' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'D' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'E' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'E' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'E' decodes NaN",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'E' decodes a negative double",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'E' decodes negative Infinity",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'E' decodes one double for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'E' decodes positive Infinity",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'E' decodes the number of doubles requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'E' decodes the remaining doubles when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'E' decodes the remaining doubles when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'E' decodes two doubles for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'E' does not decode a double when fewer bytes than a double remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'E' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'E' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'E' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'E' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'E' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'F' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'F' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'F' decodes NaN",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'F' decodes a negative float",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'F' decodes negative Infinity",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'F' decodes one float for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'F' decodes positive Infinity",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'F' decodes the number of floats requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'F' decodes the remaining floats when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'F' decodes the remaining floats when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'F' decodes two floats for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'F' does not decode a float when fewer bytes than a float remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'F' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'F' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'F' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'F' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'F' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'G' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'G' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'G' decodes NaN",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'G' decodes a negative double",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'G' decodes negative Infinity",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'G' decodes one double for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'G' decodes positive Infinity",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'G' decodes the number of doubles requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'G' decodes the remaining doubles when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'G' decodes the remaining doubles when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'G' decodes two doubles for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'G' does not decode a double when fewer bytes than a double remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'G' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'G' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'G' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'G' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'G' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' adds an empty string for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' decodes a directive with a '*' modifier after a directive with a count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' decodes a directive with a count modifier after a directive with a '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' decodes all the nibbles when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' decodes multiple differing nibble counts from a single string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' decodes one nibble from each byte for each format character starting with the most significant bit",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' decodes only the number of nibbles in the string when passed a count",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' decodes the number of nibbles specified by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' does not taint returned arrays if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' does not taint returned arrays if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' does not taint returned arrays if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' does not taint returned arrays if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' does not taint returned strings if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' does not taint returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' does not taint returned strings if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' does not untrust returned arrays if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' does not untrust returned arrays if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' does not untrust returned arrays if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' does not untrust returned arrays if given an untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' does not untrust returned strings if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' does not untrust returned strings if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' does not untrust returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' raises an ArgumentError when the format modifier is '!'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' raises an ArgumentError when the format modifier is '_'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' should make strings with US_ASCII encoding",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' taints returned strings if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'H' untrusts returned strings if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' decodes an int with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '!' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '!' decodes an int with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '!' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '!' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '!' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '!' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '!' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '!' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '!' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '!' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '!' decodes an int with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '!' decodes an int with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '!' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '!' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '!' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '!' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '!' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '!' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '!' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '!' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '!' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '!' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '!' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '!' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '_' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '_' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '_' decodes an int with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '_' decodes an int with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '_' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '_' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '_' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '_' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '_' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '_' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '_' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '_' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '_' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '_' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '_' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '_' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' decodes an int with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '<' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '!' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '!' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '!' decodes an int with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '!' decodes an int with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '!' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '!' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '!' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '!' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '!' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '!' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '!' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '!' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '!' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '!' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '!' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '!' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '_' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '_' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '_' decodes an int with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '_' decodes an int with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '_' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '_' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '_' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '_' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '_' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '_' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '_' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '_' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '_' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '_' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '_' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '_' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' decodes an int with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '>' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '_' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '_' decodes an int with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '_' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '_' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '_' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '_' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '_' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '_' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'I' with modifier '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '!' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '!' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '!' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '!' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '!' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '!' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '!' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '!' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '!' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '!' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '!' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '!' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '!' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '!' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '!' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '!' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '!' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '!' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '!' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '!' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '!' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '_' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '_' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '_' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '_' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '_' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '_' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '_' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '_' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '_' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '_' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '_' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '_' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '_' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '_' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '<' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '!' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '!' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '!' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '!' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '!' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '!' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '!' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '!' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '!' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '!' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '!' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '!' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '!' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '!' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '_' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '_' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '_' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '_' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '_' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '_' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '_' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '_' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '_' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '_' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '_' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '_' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '_' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '_' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '>' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '_' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '_' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '_' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '_' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '_' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '_' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '_' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'J' with modifier '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' decodes an int with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '!' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '!' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '!' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '!' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '!' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '!' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '!' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '!' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '!' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '!' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '!' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '!' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '!' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '!' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '!' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '!' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '!' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '!' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '!' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '!' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '!' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '_' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '_' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '_' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '_' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '_' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '_' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '_' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '_' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '_' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '_' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '_' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '_' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '_' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '_' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' decodes an int with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '<' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '!' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '!' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '!' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '!' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '!' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '!' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '!' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '!' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '!' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '!' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '!' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '!' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '!' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '!' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '_' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '_' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '_' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '_' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '_' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '_' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '_' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '_' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '_' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '_' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '_' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '_' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '_' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '_' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' decodes an int with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '>' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '_' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '_' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '_' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '_' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '_' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '_' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '_' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'L' with modifier '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' appends empty string to the array for directives exceeding the input size",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' decodes a space at the end of the pre-encoded string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' decodes a tab character at the end of the pre-encoded string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' decodes an embedded newline",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' decodes an embedded space character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' decodes an embedded tab character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' decodes an empty string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' decodes pre-encoded byte values 0..31 except tab and newline",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' decodes pre-encoded byte values 127..255",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' decodes pre-encoded byte values 33..60",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' decodes pre-encoded byte values 62..126",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' decodes the '=' character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' decodes the complete string ignoring newlines when given a single directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' does not taint returned arrays if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' does not taint returned arrays if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' does not taint returned arrays if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' does not taint returned arrays if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' does not taint returned strings if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' does not taint returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' does not taint returned strings if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' does not untrust returned arrays if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' does not untrust returned arrays if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' does not untrust returned arrays if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' does not untrust returned arrays if given an untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' does not untrust returned strings if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' does not untrust returned strings if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' does not untrust returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' ignores the count or '*' modifier and decodes the entire string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' raises an ArgumentError when the format modifier is '!'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' raises an ArgumentError when the format modifier is '_'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' taints returned strings if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'M' untrusts returned strings if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'N' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'N' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'N' decodes an int with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'N' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'N' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'N' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'N' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'N' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'N' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'N' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'N' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'N' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'N' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'N' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'N' raises an ArgumentError when the format modifier is '!'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'N' raises an ArgumentError when the format modifier is '_'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' cannot unpack a string except from the same object that created it, or a duplicate of it",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' does not taint returned arrays if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' does not taint returned arrays if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' does not taint returned arrays if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' does not taint returned arrays if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' does not taint returned strings if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' does not taint returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' does not taint returned strings if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' does not untrust returned arrays if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' does not untrust returned arrays if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' does not untrust returned arrays if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' does not untrust returned arrays if given an untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' does not untrust returned strings if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' does not untrust returned strings if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' does not untrust returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' reads as many characters as specified",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' reads only as far as a NUL character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' round-trips a string through pack and unpack",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' taints returned strings if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' taints the unpacked string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'P' untrusts returned strings if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' with modifier '<' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' with modifier '<' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' with modifier '<' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' with modifier '<' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' with modifier '<' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' with modifier '<' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' with modifier '<' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' with modifier '<' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' with modifier '<' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' with modifier '>' decodes a long with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' with modifier '>' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' with modifier '>' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' with modifier '>' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' with modifier '>' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' with modifier '>' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' with modifier '>' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' with modifier '>' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Q' with modifier '>' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' decodes a short with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '!' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '!' decodes a short with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '!' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '!' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '!' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '!' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '!' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '!' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '!' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '!' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '!' decodes a short with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '!' decodes a short with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '!' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '!' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '!' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '!' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '!' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '!' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '!' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '!' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '!' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '!' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '!' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '!' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '_' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '_' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '_' decodes a short with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '_' decodes a short with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '_' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '_' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '_' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '_' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '_' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '_' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '_' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '_' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '_' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '_' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '_' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '_' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' decodes a short with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '<' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '!' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '!' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '!' decodes a short with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '!' decodes a short with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '!' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '!' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '!' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '!' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '!' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '!' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '!' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '!' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '!' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '!' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '!' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '!' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '_' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '_' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '_' decodes a short with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '_' decodes a short with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '_' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '_' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '_' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '_' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '_' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '_' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '_' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '_' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '_' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '_' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '_' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '_' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' decodes a short with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '>' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '_' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '_' decodes a short with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '_' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '_' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '_' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '_' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '_' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '_' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'S' with modifier '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' decodes UTF-8 BMP codepoints",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' decodes UTF-8 max codepoints",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' decodes Unicode codepoints as ASCII values",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' decodes all remaining characters when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' decodes the number of characters specified by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' does not decode any items for directives exceeding the input string size",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' does not taint returned arrays if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' does not taint returned arrays if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' does not taint returned arrays if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' does not taint returned arrays if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' does not taint returned strings if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' does not taint returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' does not taint returned strings if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' does not untrust returned arrays if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' does not untrust returned arrays if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' does not untrust returned arrays if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' does not untrust returned arrays if given an untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' does not untrust returned strings if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' does not untrust returned strings if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' does not untrust returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' implicitly has a count of one when no count modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' raises ArgumentError on a malformed byte sequence",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' raises ArgumentError on a malformed byte sequence and doesn't continue when used with the * modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' raises an ArgumentError when the format modifier is '!'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' raises an ArgumentError when the format modifier is '_'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' taints returned strings if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'U' untrusts returned strings if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'V' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'V' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'V' decodes an int with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'V' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'V' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'V' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'V' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'V' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'V' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'V' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'V' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'V' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'V' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'V' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'V' raises an ArgumentError when the format modifier is '!'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'V' raises an ArgumentError when the format modifier is '_'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'X' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'X' does not change the read index when passed a count of zero",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'X' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'X' implicitly has a count of one when count is not specified",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'X' moves the read index back by the number of bytes specified by count",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'X' moves the read index back by the remaining bytes when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'X' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'X' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'X' raises an ArgumentError if the count exceeds the bytes from current index to the start of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'X' raises an ArgumentError when passed the '*' modifier if the remaining bytes exceed the bytes from the index to the start of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'X' raises an ArgumentError when the format modifier is '!'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'X' raises an ArgumentError when the format modifier is '_'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' decodes past whitespace bytes when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' decodes the number of bytes specified by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' decodes the number of bytes specified by the count modifier and truncates the decoded string at the first NULL byte",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' decodes the number of bytes specified by the count modifier including whitespace bytes",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' does not taint returned arrays if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' does not taint returned arrays if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' does not taint returned arrays if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' does not taint returned arrays if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' does not taint returned strings if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' does not taint returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' does not taint returned strings if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' does not untrust returned arrays if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' does not untrust returned arrays if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' does not untrust returned arrays if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' does not untrust returned arrays if given an untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' does not untrust returned strings if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' does not untrust returned strings if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' does not untrust returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' implicitly has a count of one when no count is specified",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' raises an ArgumentError when the format modifier is '!'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' raises an ArgumentError when the format modifier is '_'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' returns an empty string and does not decode any bytes when the count modifier is zero",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' returns an empty string if the input is empty",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' returns empty strings for repeated formats if the input is empty",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' stops decoding at NULL bytes when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' taints returned strings if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'Z' untrusts returned strings if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' decodes into raw (ascii) string values",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' decodes past NULL bytes when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' decodes past whitespace bytes when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' decodes the number of bytes specified by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' decodes the number of bytes specified by the count modifier including NULL bytes",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' decodes the number of bytes specified by the count modifier including whitespace bytes",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' does not remove trailing whitespace or NULL bytes from the decoded string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' does not taint returned arrays if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' does not taint returned arrays if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' does not taint returned arrays if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' does not taint returned arrays if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' does not taint returned strings if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' does not taint returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' does not taint returned strings if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' does not untrust returned arrays if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' does not untrust returned arrays if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' does not untrust returned arrays if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' does not untrust returned arrays if given an untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' does not untrust returned strings if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' does not untrust returned strings if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' does not untrust returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' implicitly has a count of one when no count is specified",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' raises an ArgumentError when the format modifier is '!'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' raises an ArgumentError when the format modifier is '_'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' returns an empty string and does not decode any bytes when the count modifier is zero",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' returns an empty string if the input is empty",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' returns empty strings for repeated formats if the input is empty",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' taints returned strings if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'a' untrusts returned strings if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' adds an empty string for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' decodes a directive with a '*' modifier after a directive with a count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' decodes a directive with a count modifier after a directive with a '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' decodes all the bits when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' decodes into US-ASCII string values",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' decodes multiple differing bit counts from a single string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' decodes one bit from each byte for each format character starting with the least significant bit",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' decodes only the number of bits in the string when passed a count",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' decodes the number of bits specified by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' does not taint returned arrays if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' does not taint returned arrays if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' does not taint returned arrays if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' does not taint returned arrays if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' does not taint returned strings if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' does not taint returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' does not taint returned strings if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' does not untrust returned arrays if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' does not untrust returned arrays if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' does not untrust returned arrays if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' does not untrust returned arrays if given an untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' does not untrust returned strings if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' does not untrust returned strings if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' does not untrust returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' raises an ArgumentError when the format modifier is '!'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' raises an ArgumentError when the format modifier is '_'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' taints returned strings if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'b' untrusts returned strings if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'c' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'c' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'c' decodes a byte with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'c' decodes one byte for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'c' decodes the number of bytes requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'c' decodes the remaining bytes when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'c' decodes the remaining bytes when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'c' decodes two bytes for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'c' decodes zero bytes when no bytes remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'c' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'c' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'c' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'c' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'c' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'd' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'd' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'd' decodes NaN",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'd' decodes a negative double",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'd' decodes negative Infinity",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'd' decodes one double for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'd' decodes positive Infinity",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'd' decodes the number of doubles requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'd' decodes the remaining doubles when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'd' decodes the remaining doubles when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'd' decodes two doubles for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'd' does not decode a double when fewer bytes than a double remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'd' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'd' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'd' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'd' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'd' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'e' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'e' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'e' decodes NaN",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'e' decodes a negative float",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'e' decodes negative Infinity",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'e' decodes one float for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'e' decodes positive Infinity",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'e' decodes the number of floats requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'e' decodes the remaining floats when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'e' decodes the remaining floats when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'e' decodes two floats for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'e' does not decode a float when fewer bytes than a float remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'e' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'e' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'e' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'e' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'e' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'f' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'f' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'f' decodes NaN",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'f' decodes a negative float",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'f' decodes negative Infinity",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'f' decodes one float for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'f' decodes positive Infinity",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'f' decodes the number of floats requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'f' decodes the remaining floats when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'f' decodes the remaining floats when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'f' decodes two floats for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'f' does not decode a float when fewer bytes than a float remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'f' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'f' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'f' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'f' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'f' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'g' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'g' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'g' decodes NaN",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'g' decodes a negative float",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'g' decodes negative Infinity",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'g' decodes one float for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'g' decodes positive Infinity",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'g' decodes the number of floats requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'g' decodes the remaining floats when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'g' decodes the remaining floats when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'g' decodes two floats for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'g' does not decode a float when fewer bytes than a float remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'g' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'g' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'g' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'g' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'g' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' adds an empty string for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' decodes a directive with a '*' modifier after a directive with a count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' decodes a directive with a count modifier after a directive with a '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' decodes all the nibbles when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' decodes multiple differing nibble counts from a single string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' decodes one nibble from each byte for each format character starting with the least significant bit",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' decodes only the number of nibbles in the string when passed a count",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' decodes the number of nibbles specified by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' does not taint returned arrays if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' does not taint returned arrays if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' does not taint returned arrays if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' does not taint returned arrays if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' does not taint returned strings if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' does not taint returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' does not taint returned strings if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' does not untrust returned arrays if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' does not untrust returned arrays if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' does not untrust returned arrays if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' does not untrust returned arrays if given an untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' does not untrust returned strings if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' does not untrust returned strings if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' does not untrust returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' raises an ArgumentError when the format modifier is '!'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' raises an ArgumentError when the format modifier is '_'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' should make strings with US_ASCII encoding",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' taints returned strings if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'h' untrusts returned strings if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' decodes an int with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '!' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '!' decodes an int with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '!' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '!' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '!' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '!' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '!' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '!' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '!' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '!' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '!' decodes an int with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '!' decodes an int with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '!' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '!' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '!' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '!' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '!' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '!' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '!' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '!' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '!' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '!' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '!' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '!' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '_' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '_' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '_' decodes an int with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '_' decodes an int with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '_' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '_' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '_' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '_' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '_' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '_' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '_' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '_' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '_' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '_' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '_' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '_' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' decodes an int with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '<' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '!' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '!' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '!' decodes an int with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '!' decodes an int with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '!' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '!' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '!' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '!' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '!' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '!' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '!' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '!' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '!' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '!' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '!' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '!' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '_' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '_' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '_' decodes an int with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '_' decodes an int with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '_' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '_' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '_' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '_' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '_' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '_' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '_' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '_' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '_' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '_' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '_' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '_' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' decodes an int with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '>' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '_' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '_' decodes an int with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '_' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '_' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '_' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '_' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '_' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '_' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'i' with modifier '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '!' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '!' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '!' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '!' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '!' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '!' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '!' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '!' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '!' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '!' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '!' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '!' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '!' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '!' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '!' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '!' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '!' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '!' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '!' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '!' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '!' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '_' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '_' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '_' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '_' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '_' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '_' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '_' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '_' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '_' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '_' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '_' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '_' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '_' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '_' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '<' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '!' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '!' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '!' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '!' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '!' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '!' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '!' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '!' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '!' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '!' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '!' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '!' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '!' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '!' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '_' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '_' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '_' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '_' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '_' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '_' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '_' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '_' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '_' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '_' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '_' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '_' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '_' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '_' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '>' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '_' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '_' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '_' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '_' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '_' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '_' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '_' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'j' with modifier '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' decodes an int with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '!' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '!' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '!' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '!' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '!' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '!' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '!' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '!' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '!' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '!' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '!' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '!' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '!' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '!' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '!' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '!' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '!' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '!' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '!' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '!' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '!' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '_' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '_' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '_' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '_' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '_' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '_' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '_' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '_' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '_' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '_' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '_' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '_' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '_' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '_' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' decodes an int with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '<' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '!' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '!' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '!' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '!' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '!' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '!' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '!' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '!' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '!' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '!' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '!' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '!' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '!' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '!' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '_' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '_' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '_' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '_' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '_' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '_' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '_' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '_' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '_' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '_' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '_' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '_' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '_' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '_' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' decodes an int with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' decodes one int for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' decodes the number of ints requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' decodes the remaining ints when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' decodes the remaining ints when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' decodes two ints for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' does not decode an int when fewer bytes than an int remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '>' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '_' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '_' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '_' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '_' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '_' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '_' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '_' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'l' with modifier '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' appends empty string to the array for directives exceeding the input size",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' decodes all pre-encoded ascii byte values",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' decodes an empty string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' decodes the complete string ignoring newlines when given a single directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' does not taint returned arrays if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' does not taint returned arrays if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' does not taint returned arrays if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' does not taint returned arrays if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' does not taint returned strings if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' does not taint returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' does not taint returned strings if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' does not untrust returned arrays if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' does not untrust returned arrays if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' does not untrust returned arrays if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' does not untrust returned arrays if given an untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' does not untrust returned strings if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' does not untrust returned strings if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' does not untrust returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' ignores the count or '*' modifier and decodes the entire string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' produces binary strings",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' raises an ArgumentError when the format modifier is '!'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' raises an ArgumentError when the format modifier is '_'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' taints returned strings if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'm' untrusts returned strings if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'n' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'n' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'n' decodes a short with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'n' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'n' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'n' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'n' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'n' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'n' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'n' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'n' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'n' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'n' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'n' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'n' raises an ArgumentError when the format modifier is '!'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'n' raises an ArgumentError when the format modifier is '_'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' cannot unpack a string except from the same object that created it, or a duplicate of it",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' does not taint returned arrays if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' does not taint returned arrays if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' does not taint returned arrays if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' does not taint returned arrays if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' does not taint returned strings if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' does not taint returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' does not taint returned strings if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' does not untrust returned arrays if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' does not untrust returned arrays if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' does not untrust returned arrays if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' does not untrust returned arrays if given an untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' does not untrust returned strings if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' does not untrust returned strings if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' does not untrust returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' round-trips a string through pack and unpack",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' taints returned strings if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' taints the unpacked string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'p' untrusts returned strings if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' with modifier '<' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' with modifier '<' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' with modifier '<' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' with modifier '<' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' with modifier '<' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' with modifier '<' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' with modifier '<' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' with modifier '<' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' with modifier '<' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' with modifier '>' decodes a long with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' with modifier '>' decodes one long for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' with modifier '>' decodes the number of longs requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' with modifier '>' decodes the remaining longs when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' with modifier '>' decodes the remaining longs when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' with modifier '>' decodes two longs for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' with modifier '>' does not decode a long when fewer bytes than a long remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' with modifier '>' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'q' with modifier '>' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' decodes a short with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '!' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '!' decodes a short with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '!' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '!' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '!' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '!' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '!' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '!' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '!' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '!' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '!' decodes a short with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '!' decodes a short with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '!' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '!' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '!' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '!' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '!' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '!' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '!' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '!' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '!' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '!' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '!' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '!' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '_' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '_' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '_' decodes a short with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '_' decodes a short with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '_' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '_' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '_' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '_' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '_' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '_' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '_' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '_' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '_' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '_' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '_' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '_' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' decodes a short with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '<' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '!' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '!' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '!' decodes a short with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '!' decodes a short with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '!' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '!' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '!' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '!' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '!' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '!' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '!' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '!' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '!' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '!' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '!' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '!' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '!' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '!' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '_' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '_' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '_' decodes a short with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '_' decodes a short with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '_' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '_' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '_' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '_' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '_' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '_' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '_' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '_' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '_' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '_' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '_' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '_' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' and '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' decodes a short with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '>' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '_' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '_' decodes a short with most significant bit set as a negative number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '_' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '_' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '_' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '_' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '_' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '_' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '_' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 's' with modifier '_' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' appends empty string to the array for directives exceeding the input size",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' decodes all ascii characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' decodes an empty string as an empty string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' decodes into raw (ascii) string values",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' decodes the complete string ignoring newlines when given a single directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' does not taint returned arrays if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' does not taint returned arrays if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' does not taint returned arrays if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' does not taint returned arrays if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' does not taint returned strings if given a tainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' does not taint returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' does not taint returned strings if given an untainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' does not untrust returned arrays if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' does not untrust returned arrays if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' does not untrust returned arrays if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' does not untrust returned arrays if given an untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' does not untrust returned strings if given a untrusted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' does not untrust returned strings if given an trusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' does not untrust returned strings if given an untainted format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' ignores the count or '*' modifier and decodes the entire string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' raises an ArgumentError when the format modifier is '!'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' raises an ArgumentError when the format modifier is '_'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' taints returned strings if given a tainted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'u' untrusts returned strings if given a untrusted packed string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'v' adds nil for each element requested beyond the end of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'v' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'v' decodes a short with most significant bit set as a positive number",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'v' decodes one short for a single format character",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'v' decodes the number of shorts requested by the count modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'v' decodes the remaining shorts when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'v' decodes the remaining shorts when passed the '*' modifier after another directive",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'v' decodes two shorts for two format characters",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'v' does not decode a short when fewer bytes than a short remain and the '*' modifier is passed",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'v' ignores NULL bytes between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'v' ignores spaces between directives",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'v' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'v' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'v' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'v' raises an ArgumentError when the format modifier is '!'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'v' raises an ArgumentError when the format modifier is '_'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'x' calls #to_str to coerce the directives string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'x' does not change the read index when passed a count of zero",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'x' ignores whitespace in the format string",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'x' implicitly has a count of one when count is not specified",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'x' moves the read index forward by the number of bytes specified by count",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'x' moves the read index to the end of the string when passed the '*' modifier",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'x' positions the read index one beyond the last readable byte in the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'x' raises a TypeError when passed an Integer",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'x' raises a TypeError when passed nil",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'x' raises an ArgumentError if the count exceeds the size of the String",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'x' raises an ArgumentError when the format modifier is '!'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack with format 'x' raises an ArgumentError when the format modifier is '_'",
      "group": "String",
      "spec": "String#unpack",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#unpack1 returns the first value of #unpack",
      "group": "String",
      "spec": "String#unpack1",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#upcase ASCII-only case mapping does not upcase non-ASCII characters",
      "group": "String",
      "spec": "String#upcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#upcase does not allow invalid options",
      "group": "String",
      "spec": "String#upcase",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upcase does not allow the :fold option for upcasing",
      "group": "String",
      "spec": "String#upcase",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upcase full Unicode case mapping adapted for Lithuanian allows Turkic as an extra option (and applies Turkic semantics)",
      "group": "String",
      "spec": "String#upcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#upcase full Unicode case mapping adapted for Lithuanian currently works the same as full Unicode case mapping",
      "group": "String",
      "spec": "String#upcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#upcase full Unicode case mapping adapted for Lithuanian does not allow any other additional option",
      "group": "String",
      "spec": "String#upcase",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upcase full Unicode case mapping adapted for Turkic languages allows Lithuanian as an extra option",
      "group": "String",
      "spec": "String#upcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#upcase full Unicode case mapping adapted for Turkic languages does not allow any other additional option",
      "group": "String",
      "spec": "String#upcase",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upcase full Unicode case mapping adapted for Turkic languages upcases ASCII characters according to Turkic semantics",
      "group": "String",
      "spec": "String#upcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#upcase full Unicode case mapping updates string metadata",
      "group": "String",
      "spec": "String#upcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#upcase full Unicode case mapping works for all of Unicode with no option",
      "group": "String",
      "spec": "String#upcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#upcase returns a copy of self with all lowercase letters upcased",
      "group": "String",
      "spec": "String#upcase",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upcase returns a subclass instance for subclasses",
      "group": "String",
      "spec": "String#upcase",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upcase taints result when self is tainted",
      "group": "String",
      "spec": "String#upcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#upcase! does not allow invalid options",
      "group": "String",
      "spec": "String#upcase!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upcase! does not allow the :fold option for upcasing",
      "group": "String",
      "spec": "String#upcase!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upcase! full Unicode case mapping modifies self in place for all of Unicode with no option",
      "group": "String",
      "spec": "String#upcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#upcase! full Unicode case mapping updates string metadata for self",
      "group": "String",
      "spec": "String#upcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#upcase! modifies self in place",
      "group": "String",
      "spec": "String#upcase!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upcase! modifies self in place for ASCII-only case mapping does not upcase non-ASCII characters",
      "group": "String",
      "spec": "String#upcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#upcase! modifies self in place for full Unicode case mapping adapted for Lithuanian allows Turkic as an extra option (and applies Turkic semantics)",
      "group": "String",
      "spec": "String#upcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#upcase! modifies self in place for full Unicode case mapping adapted for Lithuanian currently works the same as full Unicode case mapping",
      "group": "String",
      "spec": "String#upcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#upcase! modifies self in place for full Unicode case mapping adapted for Lithuanian does not allow any other additional option",
      "group": "String",
      "spec": "String#upcase!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upcase! modifies self in place for full Unicode case mapping adapted for Turkic languages allows Lithuanian as an extra option",
      "group": "String",
      "spec": "String#upcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#upcase! modifies self in place for full Unicode case mapping adapted for Turkic languages does not allow any other additional option",
      "group": "String",
      "spec": "String#upcase!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upcase! modifies self in place for full Unicode case mapping adapted for Turkic languages upcases ASCII characters according to Turkic semantics",
      "group": "String",
      "spec": "String#upcase!",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#upcase! raises a FrozenError when self is frozen",
      "group": "String",
      "spec": "String#upcase!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upcase! returns nil if no modifications were made",
      "group": "String",
      "spec": "String#upcase!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upto calls the block once even when start equals stop",
      "group": "String",
      "spec": "String#upto",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upto does not work with symbols",
      "group": "String",
      "spec": "String#upto",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upto doesn't call block if stop is less than self and stop length is less than self length",
      "group": "String",
      "spec": "String#upto",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upto doesn't call block with self even if self is less than stop but stop length is less than self length",
      "group": "String",
      "spec": "String#upto",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upto doesn't call the block if self is greater than stop",
      "group": "String",
      "spec": "String#upto",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upto on sequence of numbers calls the block as Integer#upto",
      "group": "String",
      "spec": "String#upto",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upto passes successive values, starting at self and ending at other_string, to the block",
      "group": "String",
      "spec": "String#upto",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#upto raises a TypeError if other can't be converted to a string",
      "group": "String",
      "spec": "String#upto",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upto returns non-alphabetic characters in the ASCII range for single letters",
      "group": "String",
      "spec": "String#upto",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upto returns self",
      "group": "String",
      "spec": "String#upto",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#upto stops before the last value if exclusive",
      "group": "String",
      "spec": "String#upto",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#upto stops iterating as soon as the current value's character count gets higher than stop's",
      "group": "String",
      "spec": "String#upto",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#upto tries to convert other to string using to_str",
      "group": "String",
      "spec": "String#upto",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#upto when no block is given returned Enumerator size should return nil",
      "group": "String",
      "spec": "String#upto",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#upto when no block is given returns an enumerator",
      "group": "String",
      "spec": "String#upto",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#valid_encoding? returns false if a valid String had an invalid character appended to it",
      "group": "String",
      "spec": "String#valid_encoding?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#valid_encoding? returns false if self contains a character invalid in the associated encoding",
      "group": "String",
      "spec": "String#valid_encoding?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#valid_encoding? returns false if self is valid in one encoding, but invalid in the one it's tagged with",
      "group": "String",
      "spec": "String#valid_encoding?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#valid_encoding? returns true for all encodings self is valid in",
      "group": "String",
      "spec": "String#valid_encoding?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#valid_encoding? returns true if an invalid string is appended another invalid one but both make a valid string",
      "group": "String",
      "spec": "String#valid_encoding?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String#valid_encoding? returns true if self is valid in the current encoding and other encodings",
      "group": "String",
      "spec": "String#valid_encoding?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String#valid_encoding? returns true if the String's encoding is valid",
      "group": "String",
      "spec": "String#valid_encoding?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String.allocate returns a binary String",
      "group": "String",
      "spec": "String.allocate",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String.allocate returns a fully-formed String",
      "group": "String",
      "spec": "String.allocate",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String.allocate returns an instance of String",
      "group": "String",
      "spec": "String.allocate",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String.new accepts a capacity argument",
      "group": "String",
      "spec": "String.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String.new accepts an encoding argument",
      "group": "String",
      "spec": "String.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String.new is called on subclasses",
      "group": "String",
      "spec": "String.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String.new raises TypeError on inconvertible object",
      "group": "String",
      "spec": "String.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String.new returns a binary String",
      "group": "String",
      "spec": "String.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:String.new returns a fully-formed String",
      "group": "String",
      "spec": "String.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String.new returns a new string given a string argument",
      "group": "String",
      "spec": "String.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String.new returns an instance of String",
      "group": "String",
      "spec": "String.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String.new returns an instance of a subclass",
      "group": "String",
      "spec": "String.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String.try_convert does not rescue exceptions raised by #to_str",
      "group": "String",
      "spec": "String.try_convert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String.try_convert returns nil when the argument does not respond to #to_str",
      "group": "String",
      "spec": "String.try_convert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String.try_convert returns the argument if it's a String",
      "group": "String",
      "spec": "String.try_convert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String.try_convert returns the argument if it's a kind of String",
      "group": "String",
      "spec": "String.try_convert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String.try_convert sends #to_str to the argument and raises TypeError if it's not a kind of String",
      "group": "String",
      "spec": "String.try_convert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String.try_convert sends #to_str to the argument and returns the result if it's a String",
      "group": "String",
      "spec": "String.try_convert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String.try_convert sends #to_str to the argument and returns the result if it's a kind of String",
      "group": "String",
      "spec": "String.try_convert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:String.try_convert sends #to_str to the argument and returns the result if it's nil",
      "group": "String",
      "spec": "String.try_convert",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#<< concatenates the given argument to self and returns self",
      "group": "StringScanner",
      "spec": "StringScanner#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#<< raises a TypeError if the given argument can't be converted to a String",
      "group": "StringScanner",
      "spec": "StringScanner#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#<< when passed a Fixnum doesn't call to_int on the argument",
      "group": "StringScanner",
      "spec": "StringScanner#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#<< when passed a Fixnum raises a TypeError",
      "group": "StringScanner",
      "spec": "StringScanner#<<",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#[] calls to_int on the given index",
      "group": "StringScanner",
      "spec": "StringScanner#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#[] raises a IndexError when there's no named capture",
      "group": "StringScanner",
      "spec": "StringScanner#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#[] raises a TypeError if the given index is nil",
      "group": "StringScanner",
      "spec": "StringScanner#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#[] raises a TypeError when a Range is as argument",
      "group": "StringScanner",
      "spec": "StringScanner#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#[] returns named capture",
      "group": "StringScanner",
      "spec": "StringScanner#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#[] returns nil if index is outside of self",
      "group": "StringScanner",
      "spec": "StringScanner#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#[] returns nil if there is no current match",
      "group": "StringScanner",
      "spec": "StringScanner#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#[] returns the n-th subgroup in the most recent match",
      "group": "StringScanner",
      "spec": "StringScanner#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#beginning_of_line? returns true if the scan pointer is at the beginning of the line, false otherwise",
      "group": "StringScanner",
      "spec": "StringScanner#beginning_of_line?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#beginning_of_line? returns true if the scan pointer is at the end of the line of an empty string.",
      "group": "StringScanner",
      "spec": "StringScanner#beginning_of_line?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#bol? returns true if the scan pointer is at the beginning of the line, false otherwise",
      "group": "StringScanner",
      "spec": "StringScanner#bol?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#bol? returns true if the scan pointer is at the end of the line of an empty string.",
      "group": "StringScanner",
      "spec": "StringScanner#bol?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#check returns the value that scan would return, without advancing the scan pointer",
      "group": "StringScanner",
      "spec": "StringScanner#check",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#check_until returns the same value of scan_until, but don't advances the scan pointer",
      "group": "StringScanner",
      "spec": "StringScanner#check_until",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#clear set the scan pointer to the end of the string and clear matching data.",
      "group": "StringScanner",
      "spec": "StringScanner#clear",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#clear warns in verbose mode that the method is obsolete",
      "group": "StringScanner",
      "spec": "StringScanner#clear",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#concat concatenates the given argument to self and returns self",
      "group": "StringScanner",
      "spec": "StringScanner#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#concat raises a TypeError if the given argument can't be converted to a String",
      "group": "StringScanner",
      "spec": "StringScanner#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#concat when passed a Fixnum doesn't call to_int on the argument",
      "group": "StringScanner",
      "spec": "StringScanner#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#concat when passed a Fixnum raises a TypeError",
      "group": "StringScanner",
      "spec": "StringScanner#concat",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#dup copies previous match state",
      "group": "StringScanner",
      "spec": "StringScanner#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#dup copies the passed StringSCanner's position to self",
      "group": "StringScanner",
      "spec": "StringScanner#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#dup copies the passed StringScanner scan pointer to self",
      "group": "StringScanner",
      "spec": "StringScanner#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#dup copies the passed StringScanner's content to self",
      "group": "StringScanner",
      "spec": "StringScanner#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#empty? returns false if the scan pointer is not at the end of the string",
      "group": "StringScanner",
      "spec": "StringScanner#empty?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#empty? returns true if the scan pointer is at the end of the string",
      "group": "StringScanner",
      "spec": "StringScanner#empty?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#empty? warns in verbose mode that the method is obsolete",
      "group": "StringScanner",
      "spec": "StringScanner#empty?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#eos? returns false if the scan pointer is not at the end of the string",
      "group": "StringScanner",
      "spec": "StringScanner#eos?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#eos? returns true if the scan pointer is at the end of the string",
      "group": "StringScanner",
      "spec": "StringScanner#eos?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#exist? returns 0 if the pattern is empty",
      "group": "StringScanner",
      "spec": "StringScanner#exist?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#exist? returns nil if the pattern isn't found in the string",
      "group": "StringScanner",
      "spec": "StringScanner#exist?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#exist? returns the index of the first occurrence of the given pattern",
      "group": "StringScanner",
      "spec": "StringScanner#exist?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#get_byte is not multi-byte character sensitive",
      "group": "StringScanner",
      "spec": "StringScanner#get_byte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#get_byte returns nil at the end of the string",
      "group": "StringScanner",
      "spec": "StringScanner#get_byte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#get_byte scans one byte and returns it",
      "group": "StringScanner",
      "spec": "StringScanner#get_byte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#getbyte is not multi-byte character sensitive",
      "group": "StringScanner",
      "spec": "StringScanner#getbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#getbyte returns an instance of String when passed a String subclass",
      "group": "StringScanner",
      "spec": "StringScanner#getbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#getbyte returns nil at the end of the string",
      "group": "StringScanner",
      "spec": "StringScanner#getbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#getbyte scans one byte and returns it",
      "group": "StringScanner",
      "spec": "StringScanner#getbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#getbyte taints the returned String if the input was tainted",
      "group": "StringScanner",
      "spec": "StringScanner#getbyte",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#getbyte warns in verbose mode that the method is obsolete",
      "group": "StringScanner",
      "spec": "StringScanner#getbyte",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#getch is multi-byte character sensitive",
      "group": "StringScanner",
      "spec": "StringScanner#getch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#getch returns an instance of String when passed a String subclass",
      "group": "StringScanner",
      "spec": "StringScanner#getch",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#getch returns nil at the end of the string",
      "group": "StringScanner",
      "spec": "StringScanner#getch",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#getch scans one character and returns it",
      "group": "StringScanner",
      "spec": "StringScanner#getch",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#getch taints the returned String if the input was tainted",
      "group": "StringScanner",
      "spec": "StringScanner#getch",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#initialize converts the argument into a string using #to_str",
      "group": "StringScanner",
      "spec": "StringScanner#initialize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#initialize is a private method",
      "group": "StringScanner",
      "spec": "StringScanner#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#initialize returns an instance of StringScanner",
      "group": "StringScanner",
      "spec": "StringScanner#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#inspect returns a String object",
      "group": "StringScanner",
      "spec": "StringScanner#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#inspect returns a string that represents the StringScanner object",
      "group": "StringScanner",
      "spec": "StringScanner#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#match? effects pre_match",
      "group": "StringScanner",
      "spec": "StringScanner#match?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#match? returns nil if there's no match",
      "group": "StringScanner",
      "spec": "StringScanner#match?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#match? returns the length of the match and the scan pointer is not advanced",
      "group": "StringScanner",
      "spec": "StringScanner#match?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#matched returns an instance of String when passed a String subclass",
      "group": "StringScanner",
      "spec": "StringScanner#matched",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#matched returns nil if there's no match",
      "group": "StringScanner",
      "spec": "StringScanner#matched",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#matched returns the last matched string",
      "group": "StringScanner",
      "spec": "StringScanner#matched",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#matched taints the returned String if the input was tainted",
      "group": "StringScanner",
      "spec": "StringScanner#matched",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#matched? returns false if there's no match",
      "group": "StringScanner",
      "spec": "StringScanner#matched?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#matched? returns true if the last match was successful",
      "group": "StringScanner",
      "spec": "StringScanner#matched?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#matched_size returns nil if there was no recent match",
      "group": "StringScanner",
      "spec": "StringScanner#matched_size",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#matched_size returns the size of the most recent match",
      "group": "StringScanner",
      "spec": "StringScanner#matched_size",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#peek raises a ArgumentError when the passed argument is negative",
      "group": "StringScanner",
      "spec": "StringScanner#peek",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#peek raises a RangeError when the passed argument is a Bignum",
      "group": "StringScanner",
      "spec": "StringScanner#peek",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#peek returns an empty string when the passed argument is zero",
      "group": "StringScanner",
      "spec": "StringScanner#peek",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#peek returns an instance of String when passed a String subclass",
      "group": "StringScanner",
      "spec": "StringScanner#peek",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#peek returns at most the specified number of bytes from the current position",
      "group": "StringScanner",
      "spec": "StringScanner#peek",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#peek taints the returned String if the input was tainted",
      "group": "StringScanner",
      "spec": "StringScanner#peek",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#peep raises a ArgumentError when the passed argument is negative",
      "group": "StringScanner",
      "spec": "StringScanner#peep",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#peep raises a RangeError when the passed argument is a Bignum",
      "group": "StringScanner",
      "spec": "StringScanner#peep",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#peep returns an empty string when the passed argument is zero",
      "group": "StringScanner",
      "spec": "StringScanner#peep",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#peep returns an instance of String when passed a String subclass",
      "group": "StringScanner",
      "spec": "StringScanner#peep",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#peep returns at most the specified number of bytes from the current position",
      "group": "StringScanner",
      "spec": "StringScanner#peep",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#peep taints the returned String if the input was tainted",
      "group": "StringScanner",
      "spec": "StringScanner#peep",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#peep warns in verbose mode that the method is obsolete",
      "group": "StringScanner",
      "spec": "StringScanner#peep",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#pointer returns 0 in the reset position",
      "group": "StringScanner",
      "spec": "StringScanner#pointer",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#pointer returns the length of the string in the terminate position",
      "group": "StringScanner",
      "spec": "StringScanner#pointer",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#pointer returns the position of the scan pointer",
      "group": "StringScanner",
      "spec": "StringScanner#pointer",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#pointer= modify the scan pointer",
      "group": "StringScanner",
      "spec": "StringScanner#pointer=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#pointer= positions from the end if the argument is negative",
      "group": "StringScanner",
      "spec": "StringScanner#pointer=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#pointer= raises a RangeError if position too far backward",
      "group": "StringScanner",
      "spec": "StringScanner#pointer=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#pointer= raises a RangeError when the passed argument is out of range",
      "group": "StringScanner",
      "spec": "StringScanner#pointer=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#pos returns 0 in the reset position",
      "group": "StringScanner",
      "spec": "StringScanner#pos",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#pos returns the length of the string in the terminate position",
      "group": "StringScanner",
      "spec": "StringScanner#pos",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#pos returns the position of the scan pointer",
      "group": "StringScanner",
      "spec": "StringScanner#pos",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#pos= modify the scan pointer",
      "group": "StringScanner",
      "spec": "StringScanner#pos=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#pos= positions from the end if the argument is negative",
      "group": "StringScanner",
      "spec": "StringScanner#pos=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#pos= raises a RangeError if position too far backward",
      "group": "StringScanner",
      "spec": "StringScanner#pos=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#pos= raises a RangeError when the passed argument is out of range",
      "group": "StringScanner",
      "spec": "StringScanner#pos=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#post_match returns an instance of String when passed a String subclass",
      "group": "StringScanner",
      "spec": "StringScanner#post_match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#post_match returns nil if there's no match",
      "group": "StringScanner",
      "spec": "StringScanner#post_match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#post_match returns the post-match (in the regular expression sense) of the last scan",
      "group": "StringScanner",
      "spec": "StringScanner#post_match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#post_match taints the returned String if the input was tainted",
      "group": "StringScanner",
      "spec": "StringScanner#post_match",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#pre_match is more than just the data from the last match",
      "group": "StringScanner",
      "spec": "StringScanner#pre_match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#pre_match is not changed when the scanner's position changes",
      "group": "StringScanner",
      "spec": "StringScanner#pre_match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#pre_match returns an instance of String when passed a String subclass",
      "group": "StringScanner",
      "spec": "StringScanner#pre_match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#pre_match returns nil if there's no match",
      "group": "StringScanner",
      "spec": "StringScanner#pre_match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#pre_match returns the pre-match (in the regular expression sense) of the last scan",
      "group": "StringScanner",
      "spec": "StringScanner#pre_match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#pre_match taints the returned String if the input was tainted",
      "group": "StringScanner",
      "spec": "StringScanner#pre_match",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#reset reset the scan pointer and clear matching data",
      "group": "StringScanner",
      "spec": "StringScanner#reset",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#rest returns an empty string in the terminate position",
      "group": "StringScanner",
      "spec": "StringScanner#rest",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#rest returns an instance of String when passed a String subclass",
      "group": "StringScanner",
      "spec": "StringScanner#rest",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#rest returns self in the reset position",
      "group": "StringScanner",
      "spec": "StringScanner#rest",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#rest returns the rest of the string",
      "group": "StringScanner",
      "spec": "StringScanner#rest",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#rest taints the returned String if the input was tainted",
      "group": "StringScanner",
      "spec": "StringScanner#rest",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#rest? is the opposite of eos?",
      "group": "StringScanner",
      "spec": "StringScanner#rest?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#rest? returns false if there is no more data in the string",
      "group": "StringScanner",
      "spec": "StringScanner#rest?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#rest? returns true if there is more data in the string",
      "group": "StringScanner",
      "spec": "StringScanner#rest?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#rest_size is equivalent to rest.size",
      "group": "StringScanner",
      "spec": "StringScanner#rest_size",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#rest_size returns the length of the rest of the string",
      "group": "StringScanner",
      "spec": "StringScanner#rest_size",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#restsize is equivalent to rest.size",
      "group": "StringScanner",
      "spec": "StringScanner#restsize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#restsize returns the length of the rest of the string",
      "group": "StringScanner",
      "spec": "StringScanner#restsize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#restsize warns in verbose mode that the method is obsolete",
      "group": "StringScanner",
      "spec": "StringScanner#restsize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#scan raises a TypeError if pattern isn't a Regexp",
      "group": "StringScanner",
      "spec": "StringScanner#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#scan returns an empty string when the pattern matches empty",
      "group": "StringScanner",
      "spec": "StringScanner#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#scan returns nil if there's no match",
      "group": "StringScanner",
      "spec": "StringScanner#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#scan returns nil when there is no more to scan",
      "group": "StringScanner",
      "spec": "StringScanner#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#scan returns the matched string",
      "group": "StringScanner",
      "spec": "StringScanner#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#scan treats \\A as matching from the beginning of the current position",
      "group": "StringScanner",
      "spec": "StringScanner#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#scan treats \\A as matching from the beginning of the current position when it's not the first character in the regexp",
      "group": "StringScanner",
      "spec": "StringScanner#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#scan treats ^ as matching from the beginning of the current position",
      "group": "StringScanner",
      "spec": "StringScanner#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#scan treats ^ as matching from the beginning of the current position when it's not the first character in the regexp",
      "group": "StringScanner",
      "spec": "StringScanner#scan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#scan_full returns the matched string if the third argument is true",
      "group": "StringScanner",
      "spec": "StringScanner#scan_full",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#scan_full returns the matched string if the third argument is true and advances the scan pointer if the second argument is true",
      "group": "StringScanner",
      "spec": "StringScanner#scan_full",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#scan_full returns the number of bytes advanced",
      "group": "StringScanner",
      "spec": "StringScanner#scan_full",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#scan_full returns the number of bytes advanced and advances the scan pointer if the second argument is true",
      "group": "StringScanner",
      "spec": "StringScanner#scan_full",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#scan_until can match anchors properly",
      "group": "StringScanner",
      "spec": "StringScanner#scan_until",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#scan_until returns nil if there's no match",
      "group": "StringScanner",
      "spec": "StringScanner#scan_until",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#scan_until returns the substring up to and including the end of the match",
      "group": "StringScanner",
      "spec": "StringScanner#scan_until",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#search_full returns the matched string if the third argument is true",
      "group": "StringScanner",
      "spec": "StringScanner#search_full",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#search_full returns the matched string if the third argument is true and advances the scan pointer if the second argument is true",
      "group": "StringScanner",
      "spec": "StringScanner#search_full",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#search_full returns the number of bytes advanced",
      "group": "StringScanner",
      "spec": "StringScanner#search_full",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#search_full returns the number of bytes advanced and advances the scan pointer if the second argument is true",
      "group": "StringScanner",
      "spec": "StringScanner#search_full",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#skip returns length of the match",
      "group": "StringScanner",
      "spec": "StringScanner#skip",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#skip returns nil if there's no match",
      "group": "StringScanner",
      "spec": "StringScanner#skip",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#skip_until returns nil if no match was found",
      "group": "StringScanner",
      "spec": "StringScanner#skip_until",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#skip_until returns the number of bytes advanced and advances the scan pointer until pattern is matched and consumed",
      "group": "StringScanner",
      "spec": "StringScanner#skip_until",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#string returns the identical object passed in",
      "group": "StringScanner",
      "spec": "StringScanner#string",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#string returns the string being scanned",
      "group": "StringScanner",
      "spec": "StringScanner#string",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#string= changes the string being scanned to the argument and resets the scanner",
      "group": "StringScanner",
      "spec": "StringScanner#string=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#string= converts the argument into a string using #to_str",
      "group": "StringScanner",
      "spec": "StringScanner#string=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#terminate set the scan pointer to the end of the string and clear matching data.",
      "group": "StringScanner",
      "spec": "StringScanner#terminate",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#unscan raises a ScanError when the previous match had failed",
      "group": "StringScanner",
      "spec": "StringScanner#unscan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#unscan remember only one previous position",
      "group": "StringScanner",
      "spec": "StringScanner#unscan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner#unscan set the scan pointer to the previous position",
      "group": "StringScanner",
      "spec": "StringScanner#unscan",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:StringScanner.must_C_version returns self",
      "group": "StringScanner",
      "spec": "StringScanner.must_C_version",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Struct#dig calls #dig on any intermediate step with the rest of the sequence as arguments",
      "group": "Struct",
      "spec": "Struct#dig",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Struct#dig raises a TypeError if any intermediate step does not respond to #dig",
      "group": "Struct",
      "spec": "Struct#dig",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Struct#dig raises an ArgumentError if no arguments provided",
      "group": "Struct",
      "spec": "Struct#dig",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Struct#dig returns nil if any intermediate step is nil",
      "group": "Struct",
      "spec": "Struct#dig",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Struct#dig returns the nested value specified by the sequence of keys",
      "group": "Struct",
      "spec": "Struct#dig",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Struct#dig returns the nested value specified if the sequence includes an index",
      "group": "Struct",
      "spec": "Struct#dig",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol .allocate raises a TypeError",
      "group": "Symbol",
      "spec": "Symbol",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol .new is undefined",
      "group": "Symbol",
      "spec": "Symbol",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol includes Comparable",
      "group": "Symbol",
      "spec": "Symbol",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#<=> returns nil if other is a Fixnum",
      "group": "Symbol",
      "spec": "Symbol#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#<=> returns nil if other is a String",
      "group": "Symbol",
      "spec": "Symbol#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#<=> returns nil if other is an object",
      "group": "Symbol",
      "spec": "Symbol#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#<=> with Symbol compares individual characters based on their ascii value",
      "group": "Symbol",
      "spec": "Symbol#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#<=> with Symbol compares shorter string with corresponding number of first chars of longer string",
      "group": "Symbol",
      "spec": "Symbol#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#<=> with Symbol considers symbol that comes lexicographically first to be less if the symbols have same size",
      "group": "Symbol",
      "spec": "Symbol#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#<=> with Symbol doesn't consider shorter string to be less if longer string starts with shorter one",
      "group": "Symbol",
      "spec": "Symbol#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#<=> with Symbol returns -1 when self is less than other",
      "group": "Symbol",
      "spec": "Symbol#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#<=> with Symbol returns 0 when self is equal to other",
      "group": "Symbol",
      "spec": "Symbol#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#<=> with Symbol returns 1 when self is greater than other",
      "group": "Symbol",
      "spec": "Symbol#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#== only returns true when the other is exactly the same symbol",
      "group": "Symbol",
      "spec": "Symbol#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#=== returns false when the argument is a String",
      "group": "Symbol",
      "spec": "Symbol#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#=== returns true when the argument is a Symbol",
      "group": "Symbol",
      "spec": "Symbol#===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#=~ returns nil if there is no match",
      "group": "Symbol",
      "spec": "Symbol#=~",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#=~ returns the index of the beginning of the match",
      "group": "Symbol",
      "spec": "Symbol#=~",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#=~ sets the last match pseudo-variables",
      "group": "Symbol",
      "spec": "Symbol#=~",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Float index converts the index to an Integer",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Range slice that is out of bounds returns a blank string if the first range value is within bounds and the last range value is not",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Range slice that is out of bounds returns nil if the first range value begins past the end",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Range slice that is out of bounds returns nil if the first range value starts from the end and is out of bounds and the last value starts from the end and is less than the length",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Range slice that is out of bounds returns nil if the first range value starts from the end and is within bounds and the last value starts from the end and is greater than the length",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Range slice that is within bounds returns a slice if both range values begin at the start and are within bounds",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Range slice that is within bounds returns a slice if the first range value begins at the end and the last begins at the end",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Range slice that is within bounds returns a slice if the first range value begins at the start and the last begins at the end",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Range slice with Float values converts the first value to an Integer",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Range slice with Float values converts the last value to an Integer",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Range subclass slice returns a slice",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Regex slice with a capture index and an index that cannot be converted to an Integer raises a TypeError when given an Array",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Regex slice with a capture index and an index that cannot be converted to an Integer raises a TypeError when given an Hash",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Regex slice with a capture index and an index that cannot be converted to an Integer raises a TypeError when given an Object",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Regex slice with a capture index converts the index to an Integer",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Regex slice with a capture index does not set $~ to the MatchData if there is not a match",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Regex slice with a capture index raises a TypeError if the index is nil",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Regex slice with a capture index returns a string for the matched capture at the given index",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Regex slice with a capture index returns a string of the complete match if the capture index is 0",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Regex slice with a capture index returns a tainted string if the regexp is tainted",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Regex slice with a capture index returns an untrusted string if the regexp is untrusted",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Regex slice with a capture index returns nil if there is no capture for the index",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Regex slice with a capture index sets $~ to the MatchData if there is a match",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Regex slice without a capture index does not set $~ if there if there is not a match",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Regex slice without a capture index returns a string of the match",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Regex slice without a capture index returns a tainted string if the regexp is tainted",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Regex slice without a capture index returns an untrusted string if the regexp is untrusted",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Regex slice without a capture index returns nil if the expression does not match",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a Regex slice without a capture index sets $~ to the MatchData if there is a match",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a String slice does not set $~",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a String slice returns a string if there is match",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a String slice returns nil if there is not a match",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with a nil index raises a TypeError",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with an Integer index and length and a Float length converts the length to an Integer",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with an Integer index and length and a length that cannot be converted into an Integer raises a TypeError when given an Array",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with an Integer index and length and a length that cannot be converted into an Integer raises a TypeError when given an Hash",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with an Integer index and length and a length that cannot be converted into an Integer raises a TypeError when given an Object",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with an Integer index and length and a negative index and negative length returns nil",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with an Integer index and length and a negative index and positive length returns a blank slice if the length is 0",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with an Integer index and length and a negative index and positive length returns a slice of all remaining characters if the given length is larger than the actual length",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with an Integer index and length and a negative index and positive length returns a slice starting from the end upto the length",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with an Integer index and length and a negative index and positive length returns nil if the index is past the start",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with an Integer index and length and a nil length raises a TypeError",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with an Integer index and length and a positive index and length returns a blank slice if the length is 0",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with an Integer index and length and a positive index and length returns a slice",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with an Integer index and length and a positive index and length returns a slice of all remaining characters if the given length is greater than the actual length",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with an Integer index and length and a positive index and length returns nil if the index is greater than the length",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with an Integer index and length and a positive index and negative length returns nil",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with an Integer index returns nil if the index is greater than the length",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with an Integer index returns nil if the index starts from the end and is greater than the length",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with an Integer index returns the character code of the element at the index",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with an index that cannot be converted into an Integer raises a TypeError when given an Array",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with an index that cannot be converted into an Integer raises a TypeError when given an Hash",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#[] with an index that cannot be converted into an Integer raises a TypeError when given an Object",
      "group": "Symbol",
      "spec": "Symbol#[]",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#capitalize capitalizes the first character if it is Unicode",
      "group": "Symbol",
      "spec": "Symbol#capitalize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#capitalize converts subsequent uppercase ASCII characters to their lowercase equivalents",
      "group": "Symbol",
      "spec": "Symbol#capitalize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#capitalize converts the first character to uppercase if it is ASCII",
      "group": "Symbol",
      "spec": "Symbol#capitalize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#capitalize leaves ASCII characters already in the correct case as they were",
      "group": "Symbol",
      "spec": "Symbol#capitalize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#capitalize leaves lowercase Unicode characters (except in first position) as they were",
      "group": "Symbol",
      "spec": "Symbol#capitalize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#capitalize leaves non-alphabetic ASCII characters as they were",
      "group": "Symbol",
      "spec": "Symbol#capitalize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#capitalize leaves the first character alone if it is not an alphabetical character",
      "group": "Symbol",
      "spec": "Symbol#capitalize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#capitalize returns a Symbol",
      "group": "Symbol",
      "spec": "Symbol#capitalize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#capitalize works with both upper- and lowercase ASCII characters in the same Symbol",
      "group": "Symbol",
      "spec": "Symbol#capitalize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#casecmp returns nil if other is a Fixnum",
      "group": "Symbol",
      "spec": "Symbol#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#casecmp returns nil if other is a String",
      "group": "Symbol",
      "spec": "Symbol#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#casecmp returns nil if other is an object",
      "group": "Symbol",
      "spec": "Symbol#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#casecmp with Symbol compares symbols without regard to case",
      "group": "Symbol",
      "spec": "Symbol#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#casecmp with Symbol doesn't consider non-ascii characters equal that aren't",
      "group": "Symbol",
      "spec": "Symbol#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#casecmp with Symbol doesn't do case mapping for non-ascii characters",
      "group": "Symbol",
      "spec": "Symbol#casecmp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#casecmp? compares symbols without regard to case",
      "group": "Symbol",
      "spec": "Symbol#casecmp?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#casecmp? does case mapping for unicode characters",
      "group": "Symbol",
      "spec": "Symbol#casecmp?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#casecmp? doesn't consider non-ascii characters equal that aren't",
      "group": "Symbol",
      "spec": "Symbol#casecmp?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#casecmp? doesn't do case mapping for non-ascii and non-unicode characters",
      "group": "Symbol",
      "spec": "Symbol#casecmp?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#casecmp? returns nil when comparing characters with different encodings",
      "group": "Symbol",
      "spec": "Symbol#casecmp?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#downcase converts uppercase ASCII characters to their lowercase equivalents",
      "group": "Symbol",
      "spec": "Symbol#downcase",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#downcase leaves lowercase Unicode characters as they were",
      "group": "Symbol",
      "spec": "Symbol#downcase",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#downcase leaves non-alphabetic ASCII characters as they were",
      "group": "Symbol",
      "spec": "Symbol#downcase",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#downcase returns a Symbol",
      "group": "Symbol",
      "spec": "Symbol#downcase",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#downcase uncapitalizes all Unicode characters",
      "group": "Symbol",
      "spec": "Symbol#downcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#dup returns self",
      "group": "Symbol",
      "spec": "Symbol#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#empty? returns false if self is non-empty",
      "group": "Symbol",
      "spec": "Symbol#empty?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#empty? returns true if self is empty",
      "group": "Symbol",
      "spec": "Symbol#empty?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#encoding for ASCII symbols is US-ASCII",
      "group": "Symbol",
      "spec": "Symbol#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#encoding for ASCII symbols is US-ASCII after converting to string",
      "group": "Symbol",
      "spec": "Symbol#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#encoding for UTF-8 symbols is UTF-8",
      "group": "Symbol",
      "spec": "Symbol#encoding",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#encoding for UTF-8 symbols is UTF-8 after converting to string",
      "group": "Symbol",
      "spec": "Symbol#encoding",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#id2name returns the string corresponding to self",
      "group": "Symbol",
      "spec": "Symbol#id2name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#intern returns a Symbol",
      "group": "Symbol",
      "spec": "Symbol#intern",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#intern returns self",
      "group": "Symbol",
      "spec": "Symbol#intern",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#length returns 0 for empty name",
      "group": "Symbol",
      "spec": "Symbol#length",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#length returns 1 for name formed by a NUL character",
      "group": "Symbol",
      "spec": "Symbol#length",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#length returns 3 for name formed by 3 ASCII characters",
      "group": "Symbol",
      "spec": "Symbol#length",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#length returns 4 for name formed by 1 multibyte and 3 ASCII characters",
      "group": "Symbol",
      "spec": "Symbol#length",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#length returns 4 for name formed by 4 ASCII characters",
      "group": "Symbol",
      "spec": "Symbol#length",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#match returns nil if there is no match",
      "group": "Symbol",
      "spec": "Symbol#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#match returns the MatchData",
      "group": "Symbol",
      "spec": "Symbol#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#match sets the last match pseudo-variables",
      "group": "Symbol",
      "spec": "Symbol#match",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#match? returns false when does not match the given regex",
      "group": "Symbol",
      "spec": "Symbol#match?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#match? takes matching position as the 2nd argument",
      "group": "Symbol",
      "spec": "Symbol#match?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#match? when matches the given regex returns true but does not set Regexp.last_match",
      "group": "Symbol",
      "spec": "Symbol#match?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#next increments non-alphanumeric characters when no alphanumeric characters are present",
      "group": "Symbol",
      "spec": "Symbol#next",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#next propagates a 'carry'",
      "group": "Symbol",
      "spec": "Symbol#next",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#next returns a successor",
      "group": "Symbol",
      "spec": "Symbol#next",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#size returns 0 for empty name",
      "group": "Symbol",
      "spec": "Symbol#size",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#size returns 1 for name formed by a NUL character",
      "group": "Symbol",
      "spec": "Symbol#size",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#size returns 3 for name formed by 3 ASCII characters",
      "group": "Symbol",
      "spec": "Symbol#size",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#size returns 4 for name formed by 1 multibyte and 3 ASCII characters",
      "group": "Symbol",
      "spec": "Symbol#size",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#size returns 4 for name formed by 4 ASCII characters",
      "group": "Symbol",
      "spec": "Symbol#size",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Float index converts the index to an Integer",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Range slice that is out of bounds returns a blank string if the first range value is within bounds and the last range value is not",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Range slice that is out of bounds returns nil if the first range value begins past the end",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Range slice that is out of bounds returns nil if the first range value starts from the end and is out of bounds and the last value starts from the end and is less than the length",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Range slice that is out of bounds returns nil if the first range value starts from the end and is within bounds and the last value starts from the end and is greater than the length",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Range slice that is within bounds returns a slice if both range values begin at the start and are within bounds",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Range slice that is within bounds returns a slice if the first range value begins at the end and the last begins at the end",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Range slice that is within bounds returns a slice if the first range value begins at the start and the last begins at the end",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Range slice with Float values converts the first value to an Integer",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Range slice with Float values converts the last value to an Integer",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Range subclass slice returns a slice",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Regex slice with a capture index and an index that cannot be converted to an Integer raises a TypeError when given an Array",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Regex slice with a capture index and an index that cannot be converted to an Integer raises a TypeError when given an Hash",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Regex slice with a capture index and an index that cannot be converted to an Integer raises a TypeError when given an Object",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Regex slice with a capture index converts the index to an Integer",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Regex slice with a capture index does not set $~ to the MatchData if there is not a match",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Regex slice with a capture index raises a TypeError if the index is nil",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Regex slice with a capture index returns a string for the matched capture at the given index",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Regex slice with a capture index returns a string of the complete match if the capture index is 0",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Regex slice with a capture index returns a tainted string if the regexp is tainted",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Regex slice with a capture index returns an untrusted string if the regexp is untrusted",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Regex slice with a capture index returns nil if there is no capture for the index",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Regex slice with a capture index sets $~ to the MatchData if there is a match",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Regex slice without a capture index does not set $~ if there if there is not a match",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Regex slice without a capture index returns a string of the match",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Regex slice without a capture index returns a tainted string if the regexp is tainted",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Regex slice without a capture index returns an untrusted string if the regexp is untrusted",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Regex slice without a capture index returns nil if the expression does not match",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a Regex slice without a capture index sets $~ to the MatchData if there is a match",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a String slice does not set $~",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a String slice returns a string if there is match",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a String slice returns nil if there is not a match",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with a nil index raises a TypeError",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with an Integer index and length and a Float length converts the length to an Integer",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with an Integer index and length and a length that cannot be converted into an Integer raises a TypeError when given an Array",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with an Integer index and length and a length that cannot be converted into an Integer raises a TypeError when given an Hash",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with an Integer index and length and a length that cannot be converted into an Integer raises a TypeError when given an Object",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with an Integer index and length and a negative index and negative length returns nil",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with an Integer index and length and a negative index and positive length returns a blank slice if the length is 0",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with an Integer index and length and a negative index and positive length returns a slice of all remaining characters if the given length is larger than the actual length",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with an Integer index and length and a negative index and positive length returns a slice starting from the end upto the length",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with an Integer index and length and a negative index and positive length returns nil if the index is past the start",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with an Integer index and length and a nil length raises a TypeError",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with an Integer index and length and a positive index and length returns a blank slice if the length is 0",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with an Integer index and length and a positive index and length returns a slice",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with an Integer index and length and a positive index and length returns a slice of all remaining characters if the given length is greater than the actual length",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with an Integer index and length and a positive index and length returns nil if the index is greater than the length",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with an Integer index and length and a positive index and negative length returns nil",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with an Integer index returns nil if the index is greater than the length",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with an Integer index returns nil if the index starts from the end and is greater than the length",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with an Integer index returns the character code of the element at the index",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with an index that cannot be converted into an Integer raises a TypeError when given an Array",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with an index that cannot be converted into an Integer raises a TypeError when given an Hash",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#slice with an index that cannot be converted into an Integer raises a TypeError when given an Object",
      "group": "Symbol",
      "spec": "Symbol#slice",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#succ increments non-alphanumeric characters when no alphanumeric characters are present",
      "group": "Symbol",
      "spec": "Symbol#succ",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#succ propagates a 'carry'",
      "group": "Symbol",
      "spec": "Symbol#succ",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#succ returns a successor",
      "group": "Symbol",
      "spec": "Symbol#succ",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#swapcase converts lowercase ASCII characters to their uppercase equivalents",
      "group": "Symbol",
      "spec": "Symbol#swapcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#swapcase converts uppercase ASCII characters to their lowercase equivalents",
      "group": "Symbol",
      "spec": "Symbol#swapcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#swapcase leaves non-alphabetic ASCII characters as they were",
      "group": "Symbol",
      "spec": "Symbol#swapcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#swapcase returns a Symbol",
      "group": "Symbol",
      "spec": "Symbol#swapcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#swapcase swaps the case for Unicode characters",
      "group": "Symbol",
      "spec": "Symbol#swapcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#swapcase works with both upper- and lowercase ASCII characters in the same Symbol",
      "group": "Symbol",
      "spec": "Symbol#swapcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#to_proc passes along the block passed to Proc#call",
      "group": "Symbol",
      "spec": "Symbol#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#to_proc produces a proc that always returns [[:rest]] for #parameters",
      "group": "Symbol",
      "spec": "Symbol#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#to_proc produces a proc with arity -1",
      "group": "Symbol",
      "spec": "Symbol#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#to_proc raises an ArgumentError when calling #call on the Proc without receiver",
      "group": "Symbol",
      "spec": "Symbol#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#to_proc returns a new Proc",
      "group": "Symbol",
      "spec": "Symbol#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#to_proc sends self to arguments passed when calling #call on the Proc",
      "group": "Symbol",
      "spec": "Symbol#to_proc",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#to_s returns the string corresponding to self",
      "group": "Symbol",
      "spec": "Symbol#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#to_sym returns self",
      "group": "Symbol",
      "spec": "Symbol#to_sym",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#upcase capitalizes all Unicode characters",
      "group": "Symbol",
      "spec": "Symbol#upcase",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Symbol#upcase converts lowercase ASCII characters to their uppercase equivalents",
      "group": "Symbol",
      "spec": "Symbol#upcase",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#upcase leaves non-alphabetic ASCII characters as they were",
      "group": "Symbol",
      "spec": "Symbol#upcase",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol#upcase returns a Symbol",
      "group": "Symbol",
      "spec": "Symbol#upcase",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol.all_symbols returns an Array containing Symbols that have been created",
      "group": "Symbol",
      "spec": "Symbol.all_symbols",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Symbol.all_symbols returns an array containing all the Symbols in the symbol table",
      "group": "Symbol",
      "spec": "Symbol.all_symbols",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SystemCallError can be subclassed",
      "group": "SystemCallError",
      "spec": "SystemCallError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SystemCallError#errno needs to be reviewed for spec completeness",
      "group": "SystemCallError",
      "spec": "SystemCallError#errno",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SystemCallError#errno returns nil when no errno given",
      "group": "SystemCallError",
      "spec": "SystemCallError#errno",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SystemCallError#errno returns the errno given as optional argument to new",
      "group": "SystemCallError",
      "spec": "SystemCallError#errno",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SystemCallError#message returns the default message when no message is given",
      "group": "SystemCallError",
      "spec": "SystemCallError#message",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SystemCallError#message returns the message given as an argument to new",
      "group": "SystemCallError",
      "spec": "SystemCallError#message",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SystemCallError.=== needs to be reviewed for spec completeness",
      "group": "SystemCallError",
      "spec": "SystemCallError.===",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SystemCallError.new accepts an optional custom message preceding the errno",
      "group": "SystemCallError",
      "spec": "SystemCallError.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SystemCallError.new accepts an optional third argument specifying the location",
      "group": "SystemCallError",
      "spec": "SystemCallError.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SystemCallError.new accepts single Fixnum argument as errno",
      "group": "SystemCallError",
      "spec": "SystemCallError.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SystemCallError.new constructs the appropriate Errno class",
      "group": "SystemCallError",
      "spec": "SystemCallError.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SystemCallError.new requires at least one argument",
      "group": "SystemCallError",
      "spec": "SystemCallError.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SystemCallError.new returns an arity of -1 for the initialize method",
      "group": "SystemCallError",
      "spec": "SystemCallError.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SystemExit#initialize accepts a message",
      "group": "SystemExit",
      "spec": "SystemExit#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SystemExit#initialize accepts a status",
      "group": "SystemExit",
      "spec": "SystemExit#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SystemExit#initialize accepts a status and message",
      "group": "SystemExit",
      "spec": "SystemExit#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SystemExit#initialize sets the status to 0 by default",
      "group": "SystemExit",
      "spec": "SystemExit#initialize",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SystemExit#status needs to be reviewed for spec completeness",
      "group": "SystemExit",
      "spec": "SystemExit#status",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SystemExit#success? needs to be reviewed for spec completeness",
      "group": "SystemExit",
      "spec": "SystemExit#success?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:SystemExit#success? returns false when the status is not 0",
      "group": "SystemExit",
      "spec": "SystemExit#success?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SystemExit#success? returns true when the status is 0",
      "group": "SystemExit",
      "spec": "SystemExit#success?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:SystemStackError is a subclass of Exception",
      "group": "SystemStackError",
      "spec": "SystemStackError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time includes Comparable",
      "group": "Time",
      "spec": "Time",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#+ accepts arguments that can be coerced into Rational",
      "group": "Time",
      "spec": "Time#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#+ adds a negative Float",
      "group": "Time",
      "spec": "Time#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#+ does not return a subclass instance",
      "group": "Time",
      "spec": "Time#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#+ increments the time by the specified amount",
      "group": "Time",
      "spec": "Time#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#+ increments the time by the specified amount as rational numbers",
      "group": "Time",
      "spec": "Time#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#+ is a commutative operator",
      "group": "Time",
      "spec": "Time#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#+ maintains microseconds precision",
      "group": "Time",
      "spec": "Time#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#+ maintains nanoseconds precision",
      "group": "Time",
      "spec": "Time#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#+ maintains precision",
      "group": "Time",
      "spec": "Time#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#+ maintains subseconds precision",
      "group": "Time",
      "spec": "Time#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#+ preserves time zone",
      "group": "Time",
      "spec": "Time#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#+ raises TypeError on Time argument",
      "group": "Time",
      "spec": "Time#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#+ raises TypeError on argument that can't be coerced into Rational",
      "group": "Time",
      "spec": "Time#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#+ raises TypeError on nil argument",
      "group": "Time",
      "spec": "Time#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#+ raises a TypeError if given argument is a coercible String",
      "group": "Time",
      "spec": "Time#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#+ returns a UTC time if self is UTC",
      "group": "Time",
      "spec": "Time#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#+ returns a non-UTC time if self is non-UTC",
      "group": "Time",
      "spec": "Time#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#+ returns a time with the same fixed offset as self",
      "group": "Time",
      "spec": "Time#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#+ tracks microseconds",
      "group": "Time",
      "spec": "Time#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#+ tracks nanoseconds",
      "group": "Time",
      "spec": "Time#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#+ zone is a timezone object preserves time zone",
      "group": "Time",
      "spec": "Time#+",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#- accepts arguments that can be coerced into Rational",
      "group": "Time",
      "spec": "Time#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#- decrements the time by the specified amount",
      "group": "Time",
      "spec": "Time#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#- does not return a subclass instance",
      "group": "Time",
      "spec": "Time#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#- maintains microseconds precision",
      "group": "Time",
      "spec": "Time#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#- maintains nanoseconds precision",
      "group": "Time",
      "spec": "Time#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#- maintains precision",
      "group": "Time",
      "spec": "Time#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#- maintains subseconds precision",
      "group": "Time",
      "spec": "Time#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#- preserves time zone",
      "group": "Time",
      "spec": "Time#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#- raises TypeError on argument that can't be coerced",
      "group": "Time",
      "spec": "Time#-",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#- raises TypeError on nil argument",
      "group": "Time",
      "spec": "Time#-",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#- raises a TypeError if given argument is a coercible String",
      "group": "Time",
      "spec": "Time#-",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#- returns a UTC time if self is UTC",
      "group": "Time",
      "spec": "Time#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#- returns a non-UTC time if self is non-UTC",
      "group": "Time",
      "spec": "Time#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#- returns a time with nanoseconds precision between two time objects",
      "group": "Time",
      "spec": "Time#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#- returns a time with the same fixed offset as self",
      "group": "Time",
      "spec": "Time#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#- tracks microseconds",
      "group": "Time",
      "spec": "Time#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#- tracks microseconds from a Rational",
      "group": "Time",
      "spec": "Time#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#- tracks nanoseconds",
      "group": "Time",
      "spec": "Time#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#- understands negative subtractions",
      "group": "Time",
      "spec": "Time#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#- zone is a timezone object preserves time zone",
      "group": "Time",
      "spec": "Time#-",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#<=> given a non-Time argument returns -1 if argument <=> self is greater than 0",
      "group": "Time",
      "spec": "Time#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#<=> given a non-Time argument returns 0 if argument <=> self is neither greater than 0 nor less than 0",
      "group": "Time",
      "spec": "Time#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#<=> given a non-Time argument returns 1 if argument <=> self is not greater than 0 and is less than 0",
      "group": "Time",
      "spec": "Time#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#<=> given a non-Time argument returns nil if argument <=> self returns nil",
      "group": "Time",
      "spec": "Time#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#<=> given a non-Time argument returns nil if argument also uses an inverse comparison for <=>",
      "group": "Time",
      "spec": "Time#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#<=> returns -1 if the first argument is a fraction of a microsecond before the second argument",
      "group": "Time",
      "spec": "Time#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#<=> returns -1 if the first argument is a point in time before the second argument",
      "group": "Time",
      "spec": "Time#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#<=> returns -1 if the first argument is a point in time before the second argument (down to a microsecond)",
      "group": "Time",
      "spec": "Time#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#<=> returns -1 if the first argument is a point in time before the second argument (down to a millisecond)",
      "group": "Time",
      "spec": "Time#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#<=> returns 0 if time is the same as other",
      "group": "Time",
      "spec": "Time#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#<=> returns 0 if time is the same as other, including fractional microseconds",
      "group": "Time",
      "spec": "Time#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#<=> returns 1 if the first argument is a fraction of a microsecond after the second argument",
      "group": "Time",
      "spec": "Time#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#<=> returns 1 if the first argument is a point in time after the second argument",
      "group": "Time",
      "spec": "Time#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#<=> returns 1 if the first argument is a point in time after the second argument (down to a microsecond)",
      "group": "Time",
      "spec": "Time#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#<=> returns 1 if the first argument is a point in time after the second argument (down to a millisecond)",
      "group": "Time",
      "spec": "Time#<=>",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#<=> returns nil when compared to an Integer because Time does not respond to #coerce",
      "group": "Time",
      "spec": "Time#<=>",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#_dump dumps a Time object to a bytestring",
      "group": "Time",
      "spec": "Time#_dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#_dump dumps an array with a date as first element",
      "group": "Time",
      "spec": "Time#_dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#_dump dumps an array with a time as second element",
      "group": "Time",
      "spec": "Time#_dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#_dump dumps like MRI's marshaled time format",
      "group": "Time",
      "spec": "Time#_dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#_dump is a private method",
      "group": "Time",
      "spec": "Time#_dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#_dump preserves the GMT flag",
      "group": "Time",
      "spec": "Time#_dump",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#asctime returns a canonical string representation of time",
      "group": "Time",
      "spec": "Time#asctime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#ctime returns a canonical string representation of time",
      "group": "Time",
      "spec": "Time#ctime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#day returns the day of the month (1..n) for a local Time",
      "group": "Time",
      "spec": "Time#day",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#day returns the day of the month for a Time with a fixed offset",
      "group": "Time",
      "spec": "Time#day",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#day returns the day of the month for a UTC Time",
      "group": "Time",
      "spec": "Time#day",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#dst? dst? returns whether time is during daylight saving time",
      "group": "Time",
      "spec": "Time#dst?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#dup copies the gmt state flag",
      "group": "Time",
      "spec": "Time#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#dup does not copy frozen status from the original",
      "group": "Time",
      "spec": "Time#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#dup returns a Time object that represents the same time",
      "group": "Time",
      "spec": "Time#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#dup returns a clone of Time instance",
      "group": "Time",
      "spec": "Time#dup",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#dup returns a subclass instance",
      "group": "Time",
      "spec": "Time#dup",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#dup returns an independent Time object",
      "group": "Time",
      "spec": "Time#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#eql? returns false if self and other have differing fractional microseconds",
      "group": "Time",
      "spec": "Time#eql?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#eql? returns false if self and other have differing numbers of microseconds",
      "group": "Time",
      "spec": "Time#eql?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#eql? returns false if self and other have differing whole numbers of seconds",
      "group": "Time",
      "spec": "Time#eql?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#eql? returns false when given a non-time value",
      "group": "Time",
      "spec": "Time#eql?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#eql? returns true if self and other have the same number of microseconds",
      "group": "Time",
      "spec": "Time#eql?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#eql? returns true if self and other have the same whole number of seconds",
      "group": "Time",
      "spec": "Time#eql?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#friday? returns false if time doesn't represent Friday",
      "group": "Time",
      "spec": "Time#friday?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#friday? returns true if time represents Friday",
      "group": "Time",
      "spec": "Time#friday?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#getgm returns a new time which is the utc representation of time",
      "group": "Time",
      "spec": "Time#getgm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#getlocal raises ArgumentError if the String argument is not in an ASCII-compatible encoding",
      "group": "Time",
      "spec": "Time#getlocal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#getlocal raises ArgumentError if the String argument is not of the form (+|-)HH:MM",
      "group": "Time",
      "spec": "Time#getlocal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#getlocal raises ArgumentError if the argument represents a value greater than or equal to 86400 seconds",
      "group": "Time",
      "spec": "Time#getlocal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#getlocal raises ArgumentError if the argument represents a value less than or equal to -86400 seconds",
      "group": "Time",
      "spec": "Time#getlocal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#getlocal returns a Time with UTC offset specified as an Integer number of seconds",
      "group": "Time",
      "spec": "Time#getlocal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#getlocal returns a Time with a UTC offset of the specified number of Rational seconds",
      "group": "Time",
      "spec": "Time#getlocal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#getlocal returns a Time with a UTC offset specified as +HH:MM",
      "group": "Time",
      "spec": "Time#getlocal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#getlocal returns a Time with a UTC offset specified as -HH:MM",
      "group": "Time",
      "spec": "Time#getlocal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#getlocal returns a new time which is the local representation of time",
      "group": "Time",
      "spec": "Time#getlocal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#getlocal returns a new time with the correct utc_offset according to the set timezone",
      "group": "Time",
      "spec": "Time#getlocal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#getlocal with a timezone argument accepts timezone argument that must have #local_to_utc and #utc_to_local methods",
      "group": "Time",
      "spec": "Time#getlocal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#getlocal with a timezone argument does not raise exception if timezone does not implement #local_to_utc method",
      "group": "Time",
      "spec": "Time#getlocal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#getlocal with a timezone argument raises TypeError if timezone does not implement #utc_to_local method",
      "group": "Time",
      "spec": "Time#getlocal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#getlocal with a timezone argument returns a Time in the timezone",
      "group": "Time",
      "spec": "Time#getlocal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#getlocal with a timezone argument subject's class implements .find_timezone method calls .find_timezone to build a time object if passed zone name as a timezone argument",
      "group": "Time",
      "spec": "Time#getlocal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#getlocal with a timezone argument subject's class implements .find_timezone method does not call .find_timezone if passed any not string/numeric/timezone timezone argument",
      "group": "Time",
      "spec": "Time#getlocal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#getlocal with an argument that responds to #to_int coerces using #to_int",
      "group": "Time",
      "spec": "Time#getlocal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#getlocal with an argument that responds to #to_r coerces using #to_r",
      "group": "Time",
      "spec": "Time#getlocal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#getlocal with an argument that responds to #to_str coerces using #to_str",
      "group": "Time",
      "spec": "Time#getlocal",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#getutc returns a new time which is the utc representation of time",
      "group": "Time",
      "spec": "Time#getutc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#gmt? returns true if time represents a time in UTC (GMT)",
      "group": "Time",
      "spec": "Time#gmt?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#gmt_offset given negative offset returns a negative offset",
      "group": "Time",
      "spec": "Time#gmt_offset",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#gmt_offset given positive offset returns a positive offset",
      "group": "Time",
      "spec": "Time#gmt_offset",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#gmt_offset returns 0 when the date is UTC",
      "group": "Time",
      "spec": "Time#gmt_offset",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#gmt_offset returns offset as Rational",
      "group": "Time",
      "spec": "Time#gmt_offset",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#gmt_offset returns the correct offset for Hawaii around daylight savings time change",
      "group": "Time",
      "spec": "Time#gmt_offset",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#gmt_offset returns the correct offset for New Zealand around daylight savings time change",
      "group": "Time",
      "spec": "Time#gmt_offset",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#gmt_offset returns the correct offset for US Eastern time zone around daylight savings time change",
      "group": "Time",
      "spec": "Time#gmt_offset",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#gmt_offset returns the offset in seconds between the timezone of time and UTC",
      "group": "Time",
      "spec": "Time#gmt_offset",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#gmtime converts self to UTC, modifying the receiver",
      "group": "Time",
      "spec": "Time#gmtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#gmtime on a frozen time does not raise an error if already in UTC",
      "group": "Time",
      "spec": "Time#gmtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#gmtime on a frozen time raises a RuntimeError if the time is not UTC",
      "group": "Time",
      "spec": "Time#gmtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#gmtime returns self",
      "group": "Time",
      "spec": "Time#gmtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#gmtoff given negative offset returns a negative offset",
      "group": "Time",
      "spec": "Time#gmtoff",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#gmtoff given positive offset returns a positive offset",
      "group": "Time",
      "spec": "Time#gmtoff",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#gmtoff returns 0 when the date is UTC",
      "group": "Time",
      "spec": "Time#gmtoff",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#gmtoff returns offset as Rational",
      "group": "Time",
      "spec": "Time#gmtoff",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#gmtoff returns the correct offset for Hawaii around daylight savings time change",
      "group": "Time",
      "spec": "Time#gmtoff",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#gmtoff returns the correct offset for New Zealand around daylight savings time change",
      "group": "Time",
      "spec": "Time#gmtoff",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#gmtoff returns the correct offset for US Eastern time zone around daylight savings time change",
      "group": "Time",
      "spec": "Time#gmtoff",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#gmtoff returns the offset in seconds between the timezone of time and UTC",
      "group": "Time",
      "spec": "Time#gmtoff",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#hash is stable",
      "group": "Time",
      "spec": "Time#hash",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#hash returns a Fixnum",
      "group": "Time",
      "spec": "Time#hash",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#hour returns the hour of the day (0..23) for a local Time",
      "group": "Time",
      "spec": "Time#hour",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#hour returns the hour of the day for a Time with a fixed offset",
      "group": "Time",
      "spec": "Time#hour",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#hour returns the hour of the day for a UTC Time",
      "group": "Time",
      "spec": "Time#hour",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#inspect formats the UTC time following the pattern 'yyyy-MM-dd HH:mm:ss UTC'",
      "group": "Time",
      "spec": "Time#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#inspect formats the fixed offset time following the pattern 'yyyy-MM-dd HH:mm:ss +/-HHMM'",
      "group": "Time",
      "spec": "Time#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#inspect formats the local time following the pattern 'yyyy-MM-dd HH:mm:ss Z'",
      "group": "Time",
      "spec": "Time#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#inspect returns a US-ASCII encoded string",
      "group": "Time",
      "spec": "Time#inspect",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#isdst dst? returns whether time is during daylight saving time",
      "group": "Time",
      "spec": "Time#isdst",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#localtime changes the timezone according to the set one",
      "group": "Time",
      "spec": "Time#localtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#localtime converts self to local time, modifying the receiver",
      "group": "Time",
      "spec": "Time#localtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#localtime converts time to the UTC offset specified as an Integer number of seconds",
      "group": "Time",
      "spec": "Time#localtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#localtime does nothing if already in a local time zone",
      "group": "Time",
      "spec": "Time#localtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#localtime on a frozen time does not raise an error if already in the right time zone",
      "group": "Time",
      "spec": "Time#localtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#localtime on a frozen time raises a RuntimeError if the time has a different time zone",
      "group": "Time",
      "spec": "Time#localtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#localtime raises ArgumentError if the String argument is not in an ASCII-compatible encoding",
      "group": "Time",
      "spec": "Time#localtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#localtime raises ArgumentError if the String argument is not of the form (+|-)HH:MM",
      "group": "Time",
      "spec": "Time#localtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#localtime raises ArgumentError if the argument represents a value greater than or equal to 86400 seconds",
      "group": "Time",
      "spec": "Time#localtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#localtime raises ArgumentError if the argument represents a value less than or equal to -86400 seconds",
      "group": "Time",
      "spec": "Time#localtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#localtime returns a Time with a UTC offset of the specified number of Rational seconds",
      "group": "Time",
      "spec": "Time#localtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#localtime returns a Time with a UTC offset specified as +HH:MM",
      "group": "Time",
      "spec": "Time#localtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#localtime returns a Time with a UTC offset specified as -HH:MM",
      "group": "Time",
      "spec": "Time#localtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#localtime returns self",
      "group": "Time",
      "spec": "Time#localtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#localtime with an argument that responds to #to_int coerces using #to_int",
      "group": "Time",
      "spec": "Time#localtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#localtime with an argument that responds to #to_r coerces using #to_r",
      "group": "Time",
      "spec": "Time#localtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#localtime with an argument that responds to #to_str coerces using #to_str",
      "group": "Time",
      "spec": "Time#localtime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#mday returns the day of the month (1..n) for a local Time",
      "group": "Time",
      "spec": "Time#mday",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#mday returns the day of the month for a Time with a fixed offset",
      "group": "Time",
      "spec": "Time#mday",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#mday returns the day of the month for a UTC Time",
      "group": "Time",
      "spec": "Time#mday",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#min returns the minute of the hour (0..59) for a local Time",
      "group": "Time",
      "spec": "Time#min",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#min returns the minute of the hour for a Time with a fixed offset",
      "group": "Time",
      "spec": "Time#min",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#min returns the minute of the hour for a UTC Time",
      "group": "Time",
      "spec": "Time#min",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#mon returns the four digit year for a Time with a fixed offset",
      "group": "Time",
      "spec": "Time#mon",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#mon returns the month of the year for a UTC Time",
      "group": "Time",
      "spec": "Time#mon",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#mon returns the month of the year for a local Time",
      "group": "Time",
      "spec": "Time#mon",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#monday? returns false if time doesn't represent Monday",
      "group": "Time",
      "spec": "Time#monday?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#monday? returns true if time represents Monday",
      "group": "Time",
      "spec": "Time#monday?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#month returns the four digit year for a Time with a fixed offset",
      "group": "Time",
      "spec": "Time#month",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#month returns the month of the year for a UTC Time",
      "group": "Time",
      "spec": "Time#month",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#month returns the month of the year for a local Time",
      "group": "Time",
      "spec": "Time#month",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#nsec returns 0 for a Time constructed with a whole number of seconds",
      "group": "Time",
      "spec": "Time#nsec",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#nsec returns a positive value for dates before the epoch",
      "group": "Time",
      "spec": "Time#nsec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#nsec returns the nanoseconds part of a Time constructed with a Float number of seconds",
      "group": "Time",
      "spec": "Time#nsec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#nsec returns the nanoseconds part of a Time constructed with a Rational number of seconds",
      "group": "Time",
      "spec": "Time#nsec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#nsec returns the nanoseconds part of a Time constructed with an Float number of microseconds",
      "group": "Time",
      "spec": "Time#nsec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#nsec returns the nanoseconds part of a Time constructed with an Integer number of microseconds",
      "group": "Time",
      "spec": "Time#nsec",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#nsec returns the nanoseconds part of a Time constructed with an Rational number of microseconds",
      "group": "Time",
      "spec": "Time#nsec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#round copies own timezone to the returning value",
      "group": "Time",
      "spec": "Time#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#round defaults to rounding to 0 places",
      "group": "Time",
      "spec": "Time#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#round returns an instance of Time, even if #round is called on a subclass",
      "group": "Time",
      "spec": "Time#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#round rounds to 0 decimal places with an explicit argument",
      "group": "Time",
      "spec": "Time#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#round rounds to 7 decimal places with an explicit argument",
      "group": "Time",
      "spec": "Time#round",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#saturday? returns false if time doesn't represent Saturday",
      "group": "Time",
      "spec": "Time#saturday?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#saturday? returns true if time represents Saturday",
      "group": "Time",
      "spec": "Time#saturday?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#sec returns the second of the minute(0..60) for time",
      "group": "Time",
      "spec": "Time#sec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#subsec returns 0 as a Fixnum for a Time with a whole number of seconds",
      "group": "Time",
      "spec": "Time#subsec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#subsec returns the fractional seconds as a Rational for a Time constructed with a Float number of seconds",
      "group": "Time",
      "spec": "Time#subsec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#subsec returns the fractional seconds as a Rational for a Time constructed with a Rational number of seconds",
      "group": "Time",
      "spec": "Time#subsec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#subsec returns the fractional seconds as a Rational for a Time constructed with an Float number of microseconds",
      "group": "Time",
      "spec": "Time#subsec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#subsec returns the fractional seconds as a Rational for a Time constructed with an Integer number of microseconds",
      "group": "Time",
      "spec": "Time#subsec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#subsec returns the fractional seconds as a Rational for a Time constructed with an Rational number of microseconds",
      "group": "Time",
      "spec": "Time#subsec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#succ is obsolete",
      "group": "Time",
      "spec": "Time#succ",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#succ returns a new instance",
      "group": "Time",
      "spec": "Time#succ",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#succ returns a new time one second later than time",
      "group": "Time",
      "spec": "Time#succ",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#succ zone is a timezone object preserves time zone",
      "group": "Time",
      "spec": "Time#succ",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#sunday? returns false if time doesn't represent Sunday",
      "group": "Time",
      "spec": "Time#sunday?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#sunday? returns true if time represents Sunday",
      "group": "Time",
      "spec": "Time#sunday?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#thursday? returns false if time doesn't represent Thursday",
      "group": "Time",
      "spec": "Time#thursday?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#thursday? returns true if time represents Thursday",
      "group": "Time",
      "spec": "Time#thursday?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#to_a returns a 10 element array representing the deconstructed time",
      "group": "Time",
      "spec": "Time#to_a",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#to_f returns the float number of seconds + usecs since the epoch",
      "group": "Time",
      "spec": "Time#to_f",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#to_i doesn't return an actual number of seconds in time",
      "group": "Time",
      "spec": "Time#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#to_i returns the value of time as an integer number of seconds since epoch",
      "group": "Time",
      "spec": "Time#to_i",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#to_r returns a Rational even for a whole number of seconds",
      "group": "Time",
      "spec": "Time#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#to_r returns the a Rational representing seconds and subseconds since the epoch",
      "group": "Time",
      "spec": "Time#to_r",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#to_s formats the UTC time following the pattern 'yyyy-MM-dd HH:mm:ss UTC'",
      "group": "Time",
      "spec": "Time#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#to_s formats the fixed offset time following the pattern 'yyyy-MM-dd HH:mm:ss +/-HHMM'",
      "group": "Time",
      "spec": "Time#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#to_s formats the local time following the pattern 'yyyy-MM-dd HH:mm:ss Z'",
      "group": "Time",
      "spec": "Time#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#to_s returns a US-ASCII encoded string",
      "group": "Time",
      "spec": "Time#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#tuesday? returns false if time doesn't represent Tuesday",
      "group": "Time",
      "spec": "Time#tuesday?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#tuesday? returns true if time represents Tuesday",
      "group": "Time",
      "spec": "Time#tuesday?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#tv_nsec needs to be reviewed for spec completeness",
      "group": "Time",
      "spec": "Time#tv_nsec",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#tv_sec doesn't return an actual number of seconds in time",
      "group": "Time",
      "spec": "Time#tv_sec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#tv_sec returns the value of time as an integer number of seconds since epoch",
      "group": "Time",
      "spec": "Time#tv_sec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#tv_usec needs to be reviewed for spec completeness",
      "group": "Time",
      "spec": "Time#tv_usec",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#usec returns 0 for a Time constructed with a whole number of seconds",
      "group": "Time",
      "spec": "Time#usec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#usec returns 0 for a Time constructed with an Float number of microseconds < 1",
      "group": "Time",
      "spec": "Time#usec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#usec returns 0 for a Time constructed with an Rational number of microseconds < 1",
      "group": "Time",
      "spec": "Time#usec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#usec returns a positive value for dates before the epoch",
      "group": "Time",
      "spec": "Time#usec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#usec returns the microseconds for time created by Time#local",
      "group": "Time",
      "spec": "Time#usec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#usec returns the microseconds part of a Time constructed with a Float number of seconds",
      "group": "Time",
      "spec": "Time#usec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#usec returns the microseconds part of a Time constructed with a Rational number of seconds",
      "group": "Time",
      "spec": "Time#usec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#usec returns the microseconds part of a Time constructed with an Float number of microseconds > 1",
      "group": "Time",
      "spec": "Time#usec",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#usec returns the microseconds part of a Time constructed with an Integer number of microseconds",
      "group": "Time",
      "spec": "Time#usec",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#usec returns the microseconds part of a Time constructed with an Rational number of microseconds > 1",
      "group": "Time",
      "spec": "Time#usec",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#utc converts self to UTC, modifying the receiver",
      "group": "Time",
      "spec": "Time#utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#utc on a frozen time does not raise an error if already in UTC",
      "group": "Time",
      "spec": "Time#utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#utc on a frozen time raises a RuntimeError if the time is not UTC",
      "group": "Time",
      "spec": "Time#utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#utc returns self",
      "group": "Time",
      "spec": "Time#utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#utc? returns true if time represents a time in UTC (GMT)",
      "group": "Time",
      "spec": "Time#utc?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#utc_offset given negative offset returns a negative offset",
      "group": "Time",
      "spec": "Time#utc_offset",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#utc_offset given positive offset returns a positive offset",
      "group": "Time",
      "spec": "Time#utc_offset",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#utc_offset returns 0 when the date is UTC",
      "group": "Time",
      "spec": "Time#utc_offset",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#utc_offset returns offset as Rational",
      "group": "Time",
      "spec": "Time#utc_offset",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#utc_offset returns the correct offset for Hawaii around daylight savings time change",
      "group": "Time",
      "spec": "Time#utc_offset",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#utc_offset returns the correct offset for New Zealand around daylight savings time change",
      "group": "Time",
      "spec": "Time#utc_offset",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#utc_offset returns the correct offset for US Eastern time zone around daylight savings time change",
      "group": "Time",
      "spec": "Time#utc_offset",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#utc_offset returns the offset in seconds between the timezone of time and UTC",
      "group": "Time",
      "spec": "Time#utc_offset",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#wday returns an integer representing the day of the week, 0..6, with Sunday being 0",
      "group": "Time",
      "spec": "Time#wday",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#wednesday? returns false if time doesn't represent Wednesday",
      "group": "Time",
      "spec": "Time#wednesday?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#wednesday? returns true if time represents Wednesday",
      "group": "Time",
      "spec": "Time#wednesday?",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#yday returns an integer representing the day of the year, 1..366",
      "group": "Time",
      "spec": "Time#yday",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time#yday returns the correct value for each day of each month",
      "group": "Time",
      "spec": "Time#yday",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#year returns the four digit year for a Time with a fixed offset",
      "group": "Time",
      "spec": "Time#year",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#year returns the four digit year for a UTC Time as an Integer",
      "group": "Time",
      "spec": "Time#year",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#year returns the four digit year for a local Time as an Integer",
      "group": "Time",
      "spec": "Time#year",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#zone Encoding.default_internal is set doesn't raise errors for a Time with a fixed offset",
      "group": "Time",
      "spec": "Time#zone",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#zone Encoding.default_internal is set returns an ASCII string",
      "group": "Time",
      "spec": "Time#zone",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#zone defaults to UTC when bad zones given",
      "group": "Time",
      "spec": "Time#zone",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#zone returns UTC when called on a UTC time",
      "group": "Time",
      "spec": "Time#zone",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#zone returns nil for a Time with a fixed offset",
      "group": "Time",
      "spec": "Time#zone",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#zone returns nil when getting the local time with a fixed offset",
      "group": "Time",
      "spec": "Time#zone",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#zone returns the correct timezone for a local time",
      "group": "Time",
      "spec": "Time#zone",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time#zone returns the time zone used for time",
      "group": "Time",
      "spec": "Time#zone",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time._load is a private method",
      "group": "Time",
      "spec": "Time._load",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time._load loads MRI's marshaled time format",
      "group": "Time",
      "spec": "Time._load",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time._load loads a time object in the new format",
      "group": "Time",
      "spec": "Time._load",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time._load loads a time object in the old UNIX timestamp based format",
      "group": "Time",
      "spec": "Time._load",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time._load treats the data as binary data",
      "group": "Time",
      "spec": "Time._load",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at :in keyword argument could be UTC offset as a String in '+HH:MM or '-HH:MM' format",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at :in keyword argument could be UTC offset as a number of seconds",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at :in keyword argument could be a timezone object",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed Numeric passed BigDecimal doesn't round input value",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed Numeric returns a Time object representing the given number of Float seconds since 1970-01-01 00:00:00 UTC",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed Numeric returns a Time object representing the given number of Integer seconds since 1970-01-01 00:00:00 UTC",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed Numeric returns a non-UTC Time",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed Numeric returns a subclass instance on a Time subclass",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed Numeric roundtrips a Rational produced by #to_r",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed Time creates a dup time object with the value given by time",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed Time creates a new time object with the value given by time",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed Time returns a UTC time if the argument is UTC",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed Time returns a non-UTC time if the argument is non-UTC",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed Time returns a subclass instance",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed [Integer, Numeric] returns a Time object representing the given number of seconds and Float microseconds since 1970-01-01 00:00:00 UTC",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed [Integer, Numeric] returns a Time object representing the given number of seconds and Integer microseconds since 1970-01-01 00:00:00 UTC",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed [Integer, String] raises a TypeError",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed [Integer, nil] raises a TypeError",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed [Time, Integer] raises a TypeError",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed [Time, Numeric, format] :microsecond format traits second argument as microseconds",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed [Time, Numeric, format] :millisecond format traits second argument as milliseconds",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed [Time, Numeric, format] :nanosecond format traits second argument as nanoseconds",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed [Time, Numeric, format] :nsec format traits second argument as nanoseconds",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed [Time, Numeric, format] :usec format traits second argument as microseconds",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed [Time, Numeric, format] not supported format does not try to convert format to Symbol with #to_sym",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed [Time, Numeric, format] not supported format raises ArgumentError",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed [Time, Numeric, format] supports Float second argument",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed non-Time, non-Numeric raises a TypeError with a String argument",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed non-Time, non-Numeric raises a TypeError with a nil argument",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed non-Time, non-Numeric with an argument that responds to #to_int coerces using #to_int",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at passed non-Time, non-Numeric with an argument that responds to #to_r coerces using #to_r",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at with a second argument that responds to #to_int coerces using #to_int",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.at with a second argument that responds to #to_r coerces using #to_r",
      "group": "Time",
      "spec": "Time.at",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm accepts 1 argument (year)",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm accepts 2 arguments (year, month)",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm accepts 3 arguments (year, month, day)",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm accepts 4 arguments (year, month, day, hour)",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm accepts 5 arguments (year, month, day, hour, minute)",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm accepts a too big day of the month by going to the next month",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm accepts nil month, day, hour, minute, and second",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm accepts various year ranges",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm coerces the day with #to_int",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm coerces the hour with #to_int",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm coerces the minute with #to_int",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm coerces the month with #to_int",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm coerces the month with #to_str",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm coerces the second with #to_int",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm coerces the year with #to_int",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm creates a time based on given C-style gmtime arguments, interpreted as UTC (GMT)",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm creates a time based on given values, interpreted as UTC (GMT)",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm handles a String day",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm handles a String hour",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm handles a String minute",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm handles a String month given as a numeral",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm handles a String month given as a short month name",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm handles a String second",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm handles a String year",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm handles float arguments",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm handles fractional microseconds as a Float",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm handles fractional microseconds as a Rational",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm handles fractional seconds as a Float",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm handles fractional seconds as a Rational",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm handles fractional usec close to rounding limit",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm handles microseconds",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm handles string arguments",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm handles years from 0 as such",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm ignores fractional seconds if a passed fractional number of microseconds",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm ignores fractional seconds if a passed whole number of microseconds",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm interprets Julian-Gregorian gap dates using Gregorian proleptic calendar",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm interprets all numerals as base 10",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm interprets post-Gregorian reform dates using Gregorian calendar",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm interprets pre-Gregorian reform dates using Gregorian proleptic calendar",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm raises ArgumentError when given 11 arguments",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm raises ArgumentError when given 9 arguments",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm raises a TypeError if the year is nil",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm raises an ArgumentError for out of range day",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm raises an ArgumentError for out of range hour",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm raises an ArgumentError for out of range microsecond",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm raises an ArgumentError for out of range minute",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm raises an ArgumentError for out of range month",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm raises an ArgumentError for out of range second",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm raises an ArgumentError for out of range values",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.gm returns subclass instances",
      "group": "Time",
      "spec": "Time.gm",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local accepts 1 argument (year)",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local accepts 2 arguments (year, month)",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local accepts 3 arguments (year, month, day)",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local accepts 4 arguments (year, month, day, hour)",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local accepts 5 arguments (year, month, day, hour, minute)",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local accepts a too big day of the month by going to the next month",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local accepts nil month, day, hour, minute, and second",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local accepts various year ranges",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local coerces the day with #to_int",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local coerces the hour with #to_int",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local coerces the minute with #to_int",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local coerces the month with #to_int",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local coerces the month with #to_str",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local coerces the second with #to_int",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local coerces the year with #to_int",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local creates a time based on given C-style gmtime arguments, interpreted in the local time zone",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local creates a time based on given values, interpreted in the local time zone",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local creates the correct time just after dst change",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local creates the correct time just before dst change",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local handles a String day",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local handles a String hour",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local handles a String minute",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local handles a String month given as a numeral",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local handles a String month given as a short month name",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local handles a String second",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local handles a String year",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local handles float arguments",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local handles fractional microseconds as a Float",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local handles fractional microseconds as a Rational",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local handles fractional seconds as a Float",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local handles fractional seconds as a Rational",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local handles microseconds",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local handles string arguments",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local handles years from 0 as such",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local ignores fractional seconds if a passed fractional number of microseconds",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local ignores fractional seconds if a passed whole number of microseconds",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local interprets all numerals as base 10",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local raises ArgumentError when given 11 arguments",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local raises ArgumentError when given 9 arguments",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local raises a TypeError if the year is nil",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local raises an ArgumentError for out of range day",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local raises an ArgumentError for out of range hour",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local raises an ArgumentError for out of range microsecond",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local raises an ArgumentError for out of range minute",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local raises an ArgumentError for out of range month",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local raises an ArgumentError for out of range second",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local raises an ArgumentError for out of range values",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local returns subclass instances",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.local timezone changes correctly adjusts the timezone change to 'CEST' on 'Europe/Amsterdam'",
      "group": "Time",
      "spec": "Time.local",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime accepts 1 argument (year)",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime accepts 2 arguments (year, month)",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime accepts 3 arguments (year, month, day)",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime accepts 4 arguments (year, month, day, hour)",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime accepts 5 arguments (year, month, day, hour, minute)",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime accepts a too big day of the month by going to the next month",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime accepts nil month, day, hour, minute, and second",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime accepts various year ranges",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime coerces the day with #to_int",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime coerces the hour with #to_int",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime coerces the minute with #to_int",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime coerces the month with #to_int",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime coerces the month with #to_str",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime coerces the second with #to_int",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime coerces the year with #to_int",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime creates a time based on given C-style gmtime arguments, interpreted in the local time zone",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime creates a time based on given values, interpreted in the local time zone",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime creates the correct time just after dst change",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime creates the correct time just before dst change",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime handles a String day",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime handles a String hour",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime handles a String minute",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime handles a String month given as a numeral",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime handles a String month given as a short month name",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime handles a String second",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime handles a String year",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime handles float arguments",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime handles fractional microseconds as a Float",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime handles fractional microseconds as a Rational",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime handles fractional seconds as a Float",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime handles fractional seconds as a Rational",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime handles microseconds",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime handles string arguments",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime handles years from 0 as such",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime ignores fractional seconds if a passed fractional number of microseconds",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime ignores fractional seconds if a passed whole number of microseconds",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime interprets all numerals as base 10",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime raises ArgumentError when given 11 arguments",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime raises ArgumentError when given 9 arguments",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime raises a TypeError if the year is nil",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime raises an ArgumentError for out of range day",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime raises an ArgumentError for out of range hour",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime raises an ArgumentError for out of range microsecond",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime raises an ArgumentError for out of range minute",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime raises an ArgumentError for out of range month",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime raises an ArgumentError for out of range second",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime raises an ArgumentError for out of range values",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime returns subclass instances",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.mktime timezone changes correctly adjusts the timezone change to 'CEST' on 'Europe/Amsterdam'",
      "group": "Time",
      "spec": "Time.mktime",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new accepts 1 argument (year)",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new accepts 2 arguments (year, month)",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new accepts 3 arguments (year, month, day)",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new accepts 4 arguments (year, month, day, hour)",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new accepts 5 arguments (year, month, day, hour, minute)",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new accepts a too big day of the month by going to the next month",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new accepts nil month, day, hour, minute, and second",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new accepts various year ranges",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new coerces the day with #to_int",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new coerces the hour with #to_int",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new coerces the minute with #to_int",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new coerces the month with #to_int",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new coerces the month with #to_str",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new coerces the second with #to_int",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new coerces the year with #to_int",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new creates a subclass instance if called on a subclass",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new creates a time based on given values, interpreted in the local time zone",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new handles a String day",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new handles a String hour",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new handles a String minute",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new handles a String month given as a numeral",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new handles a String month given as a short month name",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new handles a String second",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new handles a String year",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new handles fractional seconds as a Float",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new handles fractional seconds as a Rational",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new handles years from 0 as such",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new has at least microsecond precision",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time.new interprets all numerals as base 10",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new raises ArgumentError when given 11 arguments",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new raises ArgumentError when given 9 arguments",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new raises a TypeError if the year is nil",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new raises an ArgumentError for out of range day",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new raises an ArgumentError for out of range hour",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new raises an ArgumentError for out of range minute",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new raises an ArgumentError for out of range month",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new raises an ArgumentError for out of range second",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new returns subclass instances",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new sets the current time",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new timezone changes correctly adjusts the timezone change to 'CEST' on 'Europe/Amsterdam'",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new uses the local timezone",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a timezone argument #name method cannot marshal Time if #name method isn't implemented",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a timezone argument #name method uses the optional #name method for marshaling",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a timezone argument Time-like argument of #utc_to_local and #local_to_utc methods has attribute values the same as a Time object in UTC",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a timezone argument Time-like argument of #utc_to_local and #local_to_utc methods implements subset of Time methods",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a timezone argument accepts timezone argument that must have #local_to_utc and #utc_to_local methods",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a timezone argument does not raise exception if timezone does not implement #utc_to_local method",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a timezone argument raises TypeError if timezone does not implement #local_to_utc method",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a timezone argument returned value by #utc_to_local and #local_to_utc methods could be Time instance",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a timezone argument returned value by #utc_to_local and #local_to_utc methods could be Time subclass instance",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a timezone argument returned value by #utc_to_local and #local_to_utc methods could be any object with #to_i method",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a timezone argument returned value by #utc_to_local and #local_to_utc methods could have any #zone and #utc_offset because they are ignored",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a timezone argument returned value by #utc_to_local and #local_to_utc methods leads to raising Argument error if difference between argument and result is too large",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a timezone argument returns a Time in the timezone",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a timezone argument subject's class implements .find_timezone method calls .find_timezone to build a time object at loading marshaled data",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a timezone argument subject's class implements .find_timezone method calls .find_timezone to build a time object if passed zone name as a timezone argument",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a timezone argument subject's class implements .find_timezone method does not call .find_timezone if passed any not string/numeric/timezone timezone argument",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a timezone argument the #abbr method is used by '%Z' in #strftime",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a utc_offset argument disallows a value for minutes greater than 59",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a utc_offset argument raises ArgumentError if the String argument is not in an ASCII-compatible encoding",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a utc_offset argument raises ArgumentError if the String argument is not of the form (+|-)HH:MM",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a utc_offset argument raises ArgumentError if the argument represents a value greater than or equal to 86400 seconds",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a utc_offset argument raises ArgumentError if the argument represents a value less than or equal to -86400 seconds",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a utc_offset argument raises ArgumentError if the hour value is greater than 23",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a utc_offset argument raises ArgumentError if the seconds argument is negative",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a utc_offset argument raises ArgumentError if the utc_offset argument is greater than or equal to 10e9",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a utc_offset argument returns a Time with a UTC offset of the specified number of Integer seconds",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a utc_offset argument returns a Time with a UTC offset of the specified number of Rational seconds",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a utc_offset argument returns a Time with a UTC offset specified as +HH:MM",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a utc_offset argument returns a Time with a UTC offset specified as +HH:MM:SS",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a utc_offset argument returns a Time with a UTC offset specified as -HH:MM",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a utc_offset argument returns a Time with a UTC offset specified as -HH:MM",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a utc_offset argument returns a local Time if the argument is nil",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a utc_offset argument returns a non-UTC time",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a utc_offset argument with an argument that responds to #to_int coerces using #to_int",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a utc_offset argument with an argument that responds to #to_r coerces using #to_r",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.new with a utc_offset argument with an argument that responds to #to_str coerces using #to_str",
      "group": "Time",
      "spec": "Time.new",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.now creates a subclass instance if called on a subclass",
      "group": "Time",
      "spec": "Time.now",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.now has at least microsecond precision",
      "group": "Time",
      "spec": "Time.now",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Time.now sets the current time",
      "group": "Time",
      "spec": "Time.now",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.now uses the local timezone",
      "group": "Time",
      "spec": "Time.now",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc accepts 1 argument (year)",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc accepts 2 arguments (year, month)",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc accepts 3 arguments (year, month, day)",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc accepts 4 arguments (year, month, day, hour)",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc accepts 5 arguments (year, month, day, hour, minute)",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc accepts a too big day of the month by going to the next month",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc accepts nil month, day, hour, minute, and second",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc accepts various year ranges",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc coerces the day with #to_int",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc coerces the hour with #to_int",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc coerces the minute with #to_int",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc coerces the month with #to_int",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc coerces the month with #to_str",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc coerces the second with #to_int",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc coerces the year with #to_int",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc creates a time based on given C-style gmtime arguments, interpreted as UTC (GMT)",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc creates a time based on given values, interpreted as UTC (GMT)",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc handles a String day",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc handles a String hour",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc handles a String minute",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc handles a String month given as a numeral",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc handles a String month given as a short month name",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc handles a String second",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc handles a String year",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc handles float arguments",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc handles fractional microseconds as a Float",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc handles fractional microseconds as a Rational",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc handles fractional seconds as a Float",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc handles fractional seconds as a Rational",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc handles fractional usec close to rounding limit",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc handles microseconds",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc handles string arguments",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc handles years from 0 as such",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc ignores fractional seconds if a passed fractional number of microseconds",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc ignores fractional seconds if a passed whole number of microseconds",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc interprets Julian-Gregorian gap dates using Gregorian proleptic calendar",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc interprets all numerals as base 10",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc interprets post-Gregorian reform dates using Gregorian calendar",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc interprets pre-Gregorian reform dates using Gregorian proleptic calendar",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc raises ArgumentError when given 11 arguments",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc raises ArgumentError when given 9 arguments",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc raises a TypeError if the year is nil",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc raises an ArgumentError for out of range day",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc raises an ArgumentError for out of range hour",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc raises an ArgumentError for out of range microsecond",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc raises an ArgumentError for out of range minute",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc raises an ArgumentError for out of range month",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc raises an ArgumentError for out of range second",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc raises an ArgumentError for out of range values",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Time.utc returns subclass instances",
      "group": "Time",
      "spec": "Time.utc",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:TrueClass .allocate raises a TypeError",
      "group": "TrueClass",
      "spec": "TrueClass",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:TrueClass .new is undefined",
      "group": "TrueClass",
      "spec": "TrueClass",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:TrueClass#& returns false if other is nil or false, otherwise true",
      "group": "TrueClass",
      "spec": "TrueClass#&",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:TrueClass#^ returns true if other is nil or false, otherwise false",
      "group": "TrueClass",
      "spec": "TrueClass#^",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:TrueClass#dup returns self",
      "group": "TrueClass",
      "spec": "TrueClass#dup",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:TrueClass#inspect returns the string 'true'",
      "group": "TrueClass",
      "spec": "TrueClass#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:TrueClass#to_s returns the string 'true'",
      "group": "TrueClass",
      "spec": "TrueClass#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:TrueClass#| returns true",
      "group": "TrueClass",
      "spec": "TrueClass#|",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#+ canonicalizes the URI's path, removing ../'s",
      "group": "URI",
      "spec": "URI#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#+ conforms to the merge specifications from rfc 2396",
      "group": "URI",
      "spec": "URI#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#+ doesn't canonicalize the path when adding to the empty string",
      "group": "URI",
      "spec": "URI#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#+ raises a URI::BadURIError when adding two relative URIs",
      "group": "URI",
      "spec": "URI#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#+ replaces the end of the path of the URI when added to a string that looks like a relative path",
      "group": "URI",
      "spec": "URI#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#+ replaces the entire path of the URI when added to a string that begins with a /",
      "group": "URI",
      "spec": "URI#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#+ replaces the entire url when added to a string that looks like a full url",
      "group": "URI",
      "spec": "URI#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#== differentiates based on port number",
      "group": "URI",
      "spec": "URI#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#== ignores capitalization of host names",
      "group": "URI",
      "spec": "URI#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#== ignores capitalization of scheme",
      "group": "URI",
      "spec": "URI#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#== is case sensitive in all components of the URI but the host and scheme",
      "group": "URI",
      "spec": "URI#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#== returns false for when compared to non-uri objects",
      "group": "URI",
      "spec": "URI#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#== returns false if the normalized forms are different",
      "group": "URI",
      "spec": "URI#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#== treats a blank path and a path of '/' as the same",
      "group": "URI",
      "spec": "URI#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#eql? returns false for when compared to non-uri objects",
      "group": "URI",
      "spec": "URI#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#eql? returns false if the normalized forms are different",
      "group": "URI",
      "spec": "URI#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#merge accepts URI objects as argument",
      "group": "URI",
      "spec": "URI#merge",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#merge accepts a string-like argument",
      "group": "URI",
      "spec": "URI#merge",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#merge returns the receiver and the argument, joined as per URI.join",
      "group": "URI",
      "spec": "URI#merge",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#normalize adds a / onto the end of the URI if the path is blank",
      "group": "URI",
      "spec": "URI#normalize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#normalize downcases the host of the URI",
      "group": "URI",
      "spec": "URI#normalize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#route_from accepts a string-like argument",
      "group": "URI",
      "spec": "URI#route_from",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#route_from gives the minimal difference between the current URI and the target",
      "group": "URI",
      "spec": "URI#route_from",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#route_to accepts a string-like argument",
      "group": "URI",
      "spec": "URI#route_to",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#route_to gives the minimal difference between the current URI and the target",
      "group": "URI",
      "spec": "URI#route_to",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#select conforms to the MatzRuby tests",
      "group": "URI",
      "spec": "URI#select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#select raises an ArgumentError if a component is requested that isn't valid under the given scheme",
      "group": "URI",
      "spec": "URI#select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#select raises an ArgumentError if given strings rather than symbols",
      "group": "URI",
      "spec": "URI#select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#select returns nil for any valid component that isn't set and doesn't have a default",
      "group": "URI",
      "spec": "URI#select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI#select takes any number of component names as symbols, and returns an array of those components",
      "group": "URI",
      "spec": "URI#select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI.decode_www_form needs to be reviewed for spec completeness",
      "group": "URI",
      "spec": "URI.decode_www_form",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI.decode_www_form_component needs to be reviewed for spec completeness",
      "group": "URI",
      "spec": "URI.decode_www_form_component",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI.encode_www_form needs to be reviewed for spec completeness",
      "group": "URI",
      "spec": "URI.encode_www_form",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI.encode_www_form_component needs to be reviewed for spec completeness",
      "group": "URI",
      "spec": "URI.encode_www_form_component",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI.extract allows the user to specify a list of acceptable protocols of URIs to scan for",
      "group": "URI",
      "spec": "URI.extract",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI.extract behaves according to its documentation",
      "group": "URI",
      "spec": "URI.extract",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI.extract pulls a variety of protocol URIs from a string",
      "group": "URI",
      "spec": "URI.extract",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI.extract pulls all URIs within a string in order into an array when a block is not given",
      "group": "URI",
      "spec": "URI.extract",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI.extract treats contiguous URIs as a single URI",
      "group": "URI",
      "spec": "URI.extract",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI.extract treats pretty much anything with a colon as a URI",
      "group": "URI",
      "spec": "URI.extract",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI.extract wraps a URI string in an array",
      "group": "URI",
      "spec": "URI.extract",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI.extract yields each URI in the given string in order to a block, if given, and returns nil",
      "group": "URI",
      "spec": "URI.extract",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI.join accepts URI objects",
      "group": "URI",
      "spec": "URI.join",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI.join accepts string-like arguments with to_str",
      "group": "URI",
      "spec": "URI.join",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI.join discards arguments given before an absolute uri",
      "group": "URI",
      "spec": "URI.join",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI.join doesn't create redundant '/'s",
      "group": "URI",
      "spec": "URI.join",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI.join raises an error if given no argument",
      "group": "URI",
      "spec": "URI.join",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI.join resolves .. in paths",
      "group": "URI",
      "spec": "URI.join",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI.join returns a URI object of the concatenation of a protocol and domain, and a path",
      "group": "URI",
      "spec": "URI.join",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI.regexp behaves according to the MatzRuby tests",
      "group": "URI",
      "spec": "URI.regexp",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI.split needs to be reviewed for spec completeness",
      "group": "URI",
      "spec": "URI.split",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Escape#decode needs to be reviewed for spec completeness",
      "group": "URI::Escape",
      "spec": "URI::Escape#decode",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Escape#encode needs to be reviewed for spec completeness",
      "group": "URI::Escape",
      "spec": "URI::Escape#encode",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Escape#escape needs to be reviewed for spec completeness",
      "group": "URI::Escape",
      "spec": "URI::Escape#escape",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Escape#unescape needs to be reviewed for spec completeness",
      "group": "URI::Escape",
      "spec": "URI::Escape#unescape",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::FTP#merge needs to be reviewed for spec completeness",
      "group": "URI::FTP",
      "spec": "URI::FTP#merge",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::FTP#path unescapes the leading /",
      "group": "URI::FTP",
      "spec": "URI::FTP#path",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::FTP#path= does not require a leading /",
      "group": "URI::FTP",
      "spec": "URI::FTP#path=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::FTP#path= does not strip the leading /",
      "group": "URI::FTP",
      "spec": "URI::FTP#path=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::FTP#set_typecode needs to be reviewed for spec completeness",
      "group": "URI::FTP",
      "spec": "URI::FTP#set_typecode",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::FTP#to_s escapes the leading /",
      "group": "URI::FTP",
      "spec": "URI::FTP#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::FTP#typecode needs to be reviewed for spec completeness",
      "group": "URI::FTP",
      "spec": "URI::FTP#typecode",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::FTP#typecode= needs to be reviewed for spec completeness",
      "group": "URI::FTP",
      "spec": "URI::FTP#typecode=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::FTP.build needs to be reviewed for spec completeness",
      "group": "URI::FTP",
      "spec": "URI::FTP.build",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::FTP.new2 needs to be reviewed for spec completeness",
      "group": "URI::FTP",
      "spec": "URI::FTP.new2",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#+ needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#+",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#- needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#-",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#== needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#absolute needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#absolute",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#absolute? needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#absolute?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#coerce needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#coerce",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#component needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#component",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#component_ary needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#component_ary",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#default_port needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#default_port",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#eql? needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#fragment needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#fragment",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#fragment= needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#fragment=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#hash needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#hierarchical? needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#hierarchical?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#host needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#host",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#host= needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#host=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#inspect needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#merge needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#merge",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#merge! needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#merge!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#normalize needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#normalize",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#normalize! needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#normalize!",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#opaque needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#opaque",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#opaque= needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#opaque=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#password needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#password",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#password= needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#password=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#path needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#path",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#path= needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#path=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#port needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#port",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#port= needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#port=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#query needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#query",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#query= needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#query=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#registry needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#registry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#registry= needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#registry=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#relative? needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#relative?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#route_from needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#route_from",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#route_to needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#route_to",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#scheme needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#scheme",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#scheme= needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#scheme=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#select needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#select",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#set_fragment needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#set_fragment",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#set_host needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#set_host",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#set_opaque needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#set_opaque",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#set_password needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#set_password",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#set_path needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#set_path",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#set_port needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#set_port",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#set_query needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#set_query",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#set_registry needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#set_registry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#set_scheme needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#set_scheme",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#set_user needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#set_user",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#set_userinfo needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#set_userinfo",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#to_s needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#user needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#user",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#user= needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#user=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#userinfo needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#userinfo",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic#userinfo= needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic#userinfo=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic.build needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic.build",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic.build2 needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic.build2",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic.component needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic.component",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic.default_port needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic.default_port",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Generic.use_registry needs to be reviewed for spec completeness",
      "group": "URI::Generic",
      "spec": "URI::Generic.use_registry",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::HTTP#request_uri needs to be reviewed for spec completeness",
      "group": "URI::HTTP",
      "spec": "URI::HTTP#request_uri",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::HTTP.build needs to be reviewed for spec completeness",
      "group": "URI::HTTP",
      "spec": "URI::HTTP.build",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::HTTP.request_uri returns '/' if the path of the URI is blank",
      "group": "URI::HTTP",
      "spec": "URI::HTTP.request_uri",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::HTTP.request_uri returns a string of the path + query",
      "group": "URI::HTTP",
      "spec": "URI::HTTP.request_uri",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::LDAP#attributes needs to be reviewed for spec completeness",
      "group": "URI::LDAP",
      "spec": "URI::LDAP#attributes",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::LDAP#attributes= needs to be reviewed for spec completeness",
      "group": "URI::LDAP",
      "spec": "URI::LDAP#attributes=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::LDAP#dn needs to be reviewed for spec completeness",
      "group": "URI::LDAP",
      "spec": "URI::LDAP#dn",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::LDAP#dn= needs to be reviewed for spec completeness",
      "group": "URI::LDAP",
      "spec": "URI::LDAP#dn=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::LDAP#extensions needs to be reviewed for spec completeness",
      "group": "URI::LDAP",
      "spec": "URI::LDAP#extensions",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::LDAP#extensions= needs to be reviewed for spec completeness",
      "group": "URI::LDAP",
      "spec": "URI::LDAP#extensions=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::LDAP#filter needs to be reviewed for spec completeness",
      "group": "URI::LDAP",
      "spec": "URI::LDAP#filter",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::LDAP#filter= needs to be reviewed for spec completeness",
      "group": "URI::LDAP",
      "spec": "URI::LDAP#filter=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::LDAP#hierarchical? needs to be reviewed for spec completeness",
      "group": "URI::LDAP",
      "spec": "URI::LDAP#hierarchical?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::LDAP#scope needs to be reviewed for spec completeness",
      "group": "URI::LDAP",
      "spec": "URI::LDAP#scope",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::LDAP#scope= needs to be reviewed for spec completeness",
      "group": "URI::LDAP",
      "spec": "URI::LDAP#scope=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::LDAP#set_attributes needs to be reviewed for spec completeness",
      "group": "URI::LDAP",
      "spec": "URI::LDAP#set_attributes",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::LDAP#set_dn needs to be reviewed for spec completeness",
      "group": "URI::LDAP",
      "spec": "URI::LDAP#set_dn",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::LDAP#set_extensions needs to be reviewed for spec completeness",
      "group": "URI::LDAP",
      "spec": "URI::LDAP#set_extensions",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::LDAP#set_filter needs to be reviewed for spec completeness",
      "group": "URI::LDAP",
      "spec": "URI::LDAP#set_filter",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::LDAP#set_scope needs to be reviewed for spec completeness",
      "group": "URI::LDAP",
      "spec": "URI::LDAP#set_scope",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::LDAP.build needs to be reviewed for spec completeness",
      "group": "URI::LDAP",
      "spec": "URI::LDAP.build",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::MailTo#headers needs to be reviewed for spec completeness",
      "group": "URI::MailTo",
      "spec": "URI::MailTo#headers",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::MailTo#headers= needs to be reviewed for spec completeness",
      "group": "URI::MailTo",
      "spec": "URI::MailTo#headers=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::MailTo#set_headers needs to be reviewed for spec completeness",
      "group": "URI::MailTo",
      "spec": "URI::MailTo#set_headers",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::MailTo#set_to needs to be reviewed for spec completeness",
      "group": "URI::MailTo",
      "spec": "URI::MailTo#set_to",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::MailTo#to needs to be reviewed for spec completeness",
      "group": "URI::MailTo",
      "spec": "URI::MailTo#to",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::MailTo#to= needs to be reviewed for spec completeness",
      "group": "URI::MailTo",
      "spec": "URI::MailTo#to=",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::MailTo#to_mailtext needs to be reviewed for spec completeness",
      "group": "URI::MailTo",
      "spec": "URI::MailTo#to_mailtext",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::MailTo#to_rfc822text needs to be reviewed for spec completeness",
      "group": "URI::MailTo",
      "spec": "URI::MailTo#to_rfc822text",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::MailTo#to_s needs to be reviewed for spec completeness",
      "group": "URI::MailTo",
      "spec": "URI::MailTo#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Mailto.build conforms to the MatzRuby tests",
      "group": "URI::Mailto",
      "spec": "URI::Mailto.build",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:URI::Util.make_components_hash needs to be reviewed for spec completeness",
      "group": "URI::Util",
      "spec": "URI::Util.make_components_hash",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#== returns false if UnboundMethods are different methods",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#== returns false if both have identical body but are not the same",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#== returns false if both have same Module, same name, identical body but not the same",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#== returns false if methods are the same but added from an included Module",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#== returns false if same method but extracted from two different subclasses",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#== returns false if same method but one extracted from a subclass",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#== returns true if both are aliases for a third method",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#== returns true if either is an alias for the other",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#== returns true if objects refer to the same method",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#== returns true if same method is extracted from the same subclass",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#==",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"UnboundMethod#arity returns negative values for method definition \\n    def m(*) end\\n        def n(*a) end\"",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"UnboundMethod#arity returns negative values for method definition \\n    def m(**k, &l) end\\n        def n(*a, **k) end\\n        def o(a: 1, b: 2, **k) end\"",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"UnboundMethod#arity returns negative values for method definition \\n    def m(*a, b) end\\n        def n(*a, b, c) end\\n        def o(*a, b, c, d) end\"",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"UnboundMethod#arity returns negative values for method definition \\n    def m(a, *) end\\n        def n(a, *b) end\\n        def o(a, b, *c) end\\n        def p(a, b, c, *d) end\"",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"UnboundMethod#arity returns negative values for method definition \\n    def m(a, *b, c) end\\n        def n(a, b, *c, d, e) end\"",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"UnboundMethod#arity returns negative values for method definition \\n    def m(a, b=1) end\\n        def n(a, b, c=1, d=2) end\"",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"UnboundMethod#arity returns negative values for method definition \\n    def m(a, b=1, *c, d, e:, f: 2, **k, &l) end\\n        def n(a, b=1, *c, d:, e:, f: 2, **k, &l) end\\n        def o(a=0, b=1, *c, d, e:, f: 2, **k, &l) end\\n        def p(a=0, b=1, *c, d:, e:, f: 2, **k, &l) end\"",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"UnboundMethod#arity returns negative values for method definition \\n    def m(a, b=1, c=2, *d, e, f) end\\n        def n(a, b, c=1, *d, e, f, g) end\"",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"UnboundMethod#arity returns negative values for method definition \\n    def m(a: 1) end\\n        def n(a: 1, b: 2) end\"",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"UnboundMethod#arity returns negative values for method definition \\n    def m(a=1) end\\n        def n(a=1, b=2) end\"",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"UnboundMethod#arity returns negative values for method definition \\n    def m(a=1, *b) end\\n        def n(a=1, b=2, *c) end\"",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"UnboundMethod#arity returns negative values for method definition \\n    def m(a=1, b: 2) end\\n        def n(*a, b: 1) end\\n        def o(a=1, b: 2) end\\n        def p(a=1, *b, c: 2, &l) end\"",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"UnboundMethod#arity returns positive values for method definition \\n    def m(a) end\\n        def n(a, b) end\\n        def o(a, b, c) end\\n        def p(a, b, c, d) end\"",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:\"UnboundMethod#arity returns positive values for method definition \\n    def m(a, b, c:, d: 1) end\\n        def n(a, b, c:, d: 1, **k, &l) end\"",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"UnboundMethod#arity returns positive values for method definition \\n    def m(a, b:) end\\n        def n(a, b:, &l) end\"",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:\"UnboundMethod#arity returns positive values for method definition \\n    def m(a:) end\\n        def n(a:, b:) end\\n        def o(a: 1, b:, c:, d: 2) end\"",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#arity for a Method generated by respond_to_missing? returns -1",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#arity returns negative values for method definition 'def m(a=1, *b, c:, d: 2, **k, &l) end'",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#arity",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#arity returns zero for method definition 'def m() end'",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#arity returns zero for method definition 'def n(&b) end'",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#arity",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#bind allows binding a Kernel method retrieved from Object on BasicObject",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#bind",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#bind binds a Parent's class method to any Child's class methods",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#bind",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#bind raises TypeError if object is not kind_of? the Module the method defined in",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#bind",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#bind returns Method for any object kind_of? the Module the method is defined in",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#bind",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#bind returns Method for any object that is kind_of? the Module method was extracted from",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#bind",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#bind returns Method on any object when UnboundMethod is unbound from a module",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#bind",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#bind returns a callable method",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#bind",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#bind the returned Method is equal to the one directly returned by obj.method",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#bind",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#bind will raise when binding a an object singleton's method to another object",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#bind",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#clone returns a copy of the UnboundMethod",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#clone",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#eql? needs to be reviewed for spec completeness",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#eql?",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#hash returns the same value for builtin methods that are eql?",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#hash",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#hash returns the same value for user methods that are eql?",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#hash",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#inspect returns a String",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#inspect the String reflects that this is an UnboundMethod object",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#inspect the String shows the method name, Module defined in and Module extracted from",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#inspect",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#name returns the name even when aliased",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#name returns the name of the method",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#name",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#original_name returns the name of the method",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#original_name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#original_name returns the original name",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#original_name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#original_name returns the original name even when aliased twice",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#original_name",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#owner returns the class/module it was defined in",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#owner",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#owner returns the new owner for aliased methods on singleton classes",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#owner",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#owner returns the owner of the method",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#owner",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#owner returns the same owner when aliased in the same classes",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#owner",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#parameters needs to be reviewed for spec completeness",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#parameters",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#source_location returns the last place the method was defined",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#source_location",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#source_location returns the location of the original method even if it was aliased",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#source_location",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#source_location sets the first value to the path of the file in which the method was defined",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#source_location",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#source_location sets the last value to a Fixnum representing the line on which the method was defined",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#source_location",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#source_location works for define_method methods",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#source_location",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#source_location works for define_singleton_method methods",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#source_location",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#super_method returns nil when the parent's method is removed",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#super_method",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#super_method returns nil when there's no super method in the parent",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#super_method",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#super_method returns the method that would be called by super in the method",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#super_method",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#to_s returns a String",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#to_s the String reflects that this is an UnboundMethod object",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UnboundMethod#to_s the String shows the method name, Module defined in and Module extracted from",
      "group": "UnboundMethod",
      "spec": "UnboundMethod#to_s",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UncaughtThrowError is a subclass of ArgumentError",
      "group": "UncaughtThrowError",
      "spec": "UncaughtThrowError",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:UncaughtThrowError#tag returns the object thrown",
      "group": "UncaughtThrowError",
      "spec": "UncaughtThrowError#tag",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:Warning.warn can be overridden",
      "group": "Warning",
      "spec": "Warning.warn",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Warning.warn complains",
      "group": "Warning",
      "spec": "Warning.warn",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Warning.warn does not add a newline",
      "group": "Warning",
      "spec": "Warning.warn",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Warning.warn extends itself",
      "group": "Warning",
      "spec": "Warning.warn",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Warning.warn has Warning as the method owner",
      "group": "Warning",
      "spec": "Warning.warn",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Warning.warn is called by Kernel.warn",
      "group": "Warning",
      "spec": "Warning.warn",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Warning.warn is called by parser warnings",
      "group": "Warning",
      "spec": "Warning.warn",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:Warning.warn returns nil",
      "group": "Warning",
      "spec": "Warning.warn",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:main#include in a file loaded with wrapping includes the given Module in the load wrapper",
      "group": "main",
      "spec": "main#include",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:main#include includes the given Module in Object",
      "group": "main",
      "spec": "main#include",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:main#private raises a NameError when given an undefined name",
      "group": "main",
      "spec": "main#private",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:main#private returns Object",
      "group": "main",
      "spec": "main#private",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:main#private sets the visibility of the given method to private",
      "group": "main",
      "spec": "main#private",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:main#public raises a NameError when given an undefined name",
      "group": "main",
      "spec": "main#public",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:main#public returns Object",
      "group": "main",
      "spec": "main#public",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:main#public sets the visibility of the given method to public",
      "group": "main",
      "spec": "main#public",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:main#to_s returns 'main'",
      "group": "main",
      "spec": "main#to_s",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:main.using does not affect methods defined before it is called",
      "group": "main",
      "spec": "main.using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:main.using does not propagate refinements of new modules added after it is called",
      "group": "main",
      "spec": "main.using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:main.using propagates refinements added to existing modules after it is called",
      "group": "main",
      "spec": "main.using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:main.using requires one Module argument",
      "group": "main",
      "spec": "main.using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:main.using uses refinements from the given module for method calls in the target file",
      "group": "main",
      "spec": "main.using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:main.using uses refinements from the given module in the eval string",
      "group": "main",
      "spec": "main.using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:main.using uses refinements from the given module only in the target file",
      "group": "main",
      "spec": "main.using",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:rescuing Interrupt raises an Interrupt when sent a signal SIGINT",
      "group": "rescuing",
      "spec": "rescuing",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:rescuing SignalException raises a SignalException when sent a signal",
      "group": "rescuing",
      "spec": "rescuing",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:the URI method converts its argument with to_str",
      "group": "the",
      "spec": "the",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:the URI method does not add a URI method to Object instances",
      "group": "the",
      "spec": "the",
      "outcome": "fail"
    },
    {
      "tag": "spec-runner-tagger:the URI method parses a given URI, returning a URI object",
      "group": "the",
      "spec": "the",
      "outcome": "pass"
    },
    {
      "tag": "spec-runner-tagger:the URI method returns the argument if it is a URI object",
      "group": "the",
      "spec": "the",
      "outcome": "pass"
    }
  ]
}
